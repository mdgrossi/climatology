
---
title: "Woods Hole, MA"
image: ../../images/falma.JPG
format:
  dashboard:
    logo: ../../images/falma.JPG
    scrolling: false
---

```{python}
#| include: False

# SET THE DIRECTORY NAME
dirName = '_woodsHoleMa'

# ENTER THE FLOOD THRESHOLDS FOR THIS SITE
# https://water.noaa.gov/gauges/bzbm3
flood_thresholds = {
    'major': 8.5,
    'moderate': 7.0,
    'minor': 5.5
    }
```

# {.sidebar}

```{python}
import pytz
from datetime import datetime as dt
from IPython.display import Markdown

est = pytz.timezone('US/Eastern')
display(Markdown(f"**{dt.now(tz=est).date().strftime('%A, %B %d, %Y')}**<br>"))

```

::: {.card}
![](../../images/falma.JPG){scale="75%"}
:::

<br>
[**Woods Hole, MA**](https://en.wikipedia.org/wiki/Woods_Hole%2C_Massachusetts){target="_blank"} is a coastal community in southeastern Massachusetts with a **warm-summer humid continental climate** with both summer and winter temperatures being moderated by the adjacent ocean waters. It is located in the southwestern corner of Cape Cod with Martha's Vineyard and the Elizabeth Islands to its south. The current [NOAA](https://www.noaa.gov){target="_blank"} [weather station](https://tidesandcurrents.noaa.gov/stationhome.html?id=8447930){target="_blank"} has been installed at the [Woods Hole Oceanographic Institute Marine Facility](https://www.whoi.edu/){target="_blank"} since November 1988.

<iframe src="https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d23894.50825594117!2d-70.68927649357778!3d41.52997961202817!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sus!4v1729821867768!5m2!1sen!2sus" align="right" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>

# Today's Stats

```{python}
#| label: load data
#| include: False
import os
import sys
import xarray as xr
from bokeh.io import output_notebook
sys.path.append('/home/runner/work/climatology/climatology')
sys.path.append('/workspaces/climatology')
from clipy import plot

# DIRECTORY
HOME = '../../'
dirName = os.path.join(HOME, dirName)

# READ IN STATS
daily_stats = xr.load_dataset(os.path.join(dirName, 'statistics-daily.nc'))
monthly_stats = xr.load_dataset(os.path.join(dirName, 'statistics-monthly.nc'))

# READ IN METADATA
with open(os.path.join(dirName, 'metadata.yml'), 'r') as file:
    meta = yaml.safe_load(file)
```

## Air Temperature {height=30%}

###

```{python}
#| output: asis
#| label: "air temp obs and records"
#| title: "Air Temperature &rarr;"
var = 'Air Temperature'
print("<b>Yesterday's</b><br/>")
print(f"<b>High:</b> {np.round(meta['yesterday']['high'][var], decimals=1)} {meta['units'][var]}<br/>")
print(f"<b>Average:</b> {np.round(meta['yesterday']['average'][var], decimals=1)} {meta['units'][var]}<br/>")
print(f"<b>Low:</b> {np.round(meta['yesterday']['low'][var], decimals=1)} {meta['units'][var]}")
```

### 

```{python}
#| content: valuebox
#| title: "Today's Record Low"
record = 'Record Low'
dict(
  icon = 'thermometer-snow',
  color = plot.colors['cb'][record],
  value = plot.getval(stats=daily_stats, var=var, record=record)
)
```

###

```{python}
#| content: valuebox
#| title: "Average Low"
record = 'Average Low'
dict(
  icon = 'thermometer-low',
  color = plot.colors['cb'][record],
  value = plot.getval(stats=daily_stats, var=var, record=record)
)
```

###

```{python}
#| content: valuebox
#| title: "Highest Low"
record = 'Highest Low'
dict(
  icon = 'thermometer-half',
  color = plot.colors['cb'][record],
  value = plot.getval(daily_stats, var=var, record=record)
)
```

###

```{python}
#| content: valuebox
#| title: "Lowest High"
record = 'Lowest High'
dict(
  icon = 'thermometer-half',
  color = plot.colors['cb'][record],
  value = plot.getval(daily_stats, var=var, record=record)
)
```

###

```{python}
#| content: valuebox
#| title: "Average High"
record = 'Average High'
dict(
  icon = 'thermometer-high',
  color = plot.colors['cb'][record],
  value = plot.getval(daily_stats, var=var, record=record)
)
```

###

```{python}
#| content: valuebox
#| title: "Record High"
record = 'Record High'
dict(
  icon = 'thermometer-sun',
  color = plot.colors['cb'][record],
  value = plot.getval(daily_stats, var=var, record=record)
)
```

## Water Level {height=30%}

###

```{python}
#| output: asis
#| label: "water level obs and records"
#| title: "Water Level &rarr;"
var = 'Water Level'
print("<b>Yesterday's</b><br/>")
print(f"<b>High:</b> {np.round(meta['yesterday']['high'][var], decimals=2)} {meta['units'][var]}<br/>")
print(f"<b>Average:</b> {np.round(meta['yesterday']['average'][var], decimals=2)} {meta['units'][var]}<br/>")
print(f"<b>Low:</b> {np.round(meta['yesterday']['low'][var], decimals=2)} {meta['units'][var]}")
```

###

```{python}
#| content: valuebox
#| title: "Today's Record Low"
record = 'Record Low'
dict(
  icon = 'droplet',
  color = plot.colors['cb'][record],
  value = plot.getval(stats=daily_stats, var=var, record=record, decimals=2)
)
```

###

```{python}
#| content: valuebox
#| title: "Average Low"
record = 'Average Low'
dict(
  icon = 'droplet-half',
  color = plot.colors['cb'][record],
  value = plot.getval(stats=daily_stats, var=var, record=record, decimals=2)
)
```

###

```{python}
#| content: valuebox
#| title: "Highest Low"
record = 'Highest Low'
dict(
  icon = 'moisture',
  color = plot.colors['cb'][record],
  value = plot.getval(daily_stats, var=var, record=record, decimals=2)
)
```

###

```{python}
#| content: valuebox
#| title: "Lowest High"
record = 'Lowest High'
dict(
  icon = 'moisture',
  color = plot.colors['cb'][record],
  value = plot.getval(daily_stats, var=var, record=record, decimals=2)
)
```

###

```{python}
#| content: valuebox
#| title: "Average High"
record = 'Average High'
dict(
  icon = 'droplet-half',
  color = plot.colors['cb'][record],
  value = plot.getval(daily_stats, var=var, record=record, decimals=2)
)
```

###

```{python}
#| content: valuebox
#| title: "Record High"
record = 'Record High'
dict(
  icon = 'droplet-fill',
  color = plot.colors['cb'][record],
  value = plot.getval(daily_stats, var=var, record=record, decimals=2)
)
```

## Water Temperature {height=30%}

###

```{python}
#| output: asis
#| label: "water temp obs and records"
#| title: "Water Temperature &rarr;"
var = 'Water Temperature'
print("<b>Yesterday's</b><br/>")
print(f"<b>High:</b> {np.round(meta['yesterday']['high'][var], decimals=1)} {meta['units'][var]}<br/>")
print(f"<b>Average:</b> {np.round(meta['yesterday']['average'][var], decimals=1)} {meta['units'][var]}<br/>")
print(f"<b>Low:</b> {np.round(meta['yesterday']['low'][var], decimals=1)} {meta['units'][var]}")
```

###

```{python}
#| content: valuebox
#| title: "Today's Record Low"
record = 'Record Low'
dict(
  icon = 'thermometer-snow',
  color = plot.colors['cb'][record],
  value = plot.getval(stats=daily_stats, var=var, record=record)
)
```

###

```{python}
#| content: valuebox
#| title: "Average Low"
record = 'Average Low'
dict(
  icon = 'thermometer-low',
  color = plot.colors['cb'][record],
  value = plot.getval(stats=daily_stats, var=var, record=record)
)
```

###

```{python}
#| content: valuebox
#| title: "Highest Low"
record = 'Highest Low'
dict(
  icon = 'thermometer-half',
  color = plot.colors['cb'][record],
  value = plot.getval(daily_stats, var=var, record=record)
)
```

###

```{python}
#| content: valuebox
#| title: "Lowest High"
record = 'Lowest High'
dict(
  icon = 'thermometer-half',
  color = plot.colors['cb'][record],
  value = plot.getval(daily_stats, var=var, record=record)
)
```

###

```{python}
#| content: valuebox
#| title: "Average High"
record = 'Average High'
dict(
  icon = 'thermometer-high',
  color = plot.colors['cb'][record],
  value = plot.getval(daily_stats, var=var, record=record)
)
```

###

```{python}
#| content: valuebox
#| title: "Record High"
record = 'Record High'
dict(
  icon = 'thermometer-sun',
  color = plot.colors['cb'][record],
  value = plot.getval(daily_stats, var=var, record=record)
)
```

# Plots

## Dashboard {.tabset}

```{python}
#| output: asis
#| title: "Daily Stats"
output_notebook(hide_banner=True)
display(Markdown('::: {.panel-tabset}'))

for var in daily_stats.variable.values:
    display(Markdown(f'\n## {var} ({daily_stats.attrs[f"{var} units"]})\n\n'))
    plot.daily_climo(data=daily_stats, var=var, scheme='mg',
                    flood_thresholds=flood_thresholds)
    display(Markdown(' '))

display(Markdown(':::'))

```

```{python}
#| output: asis
#| label: "monthly stats plots"
#| title: "Monthly Stats"

display(Markdown('::: {.panel-tabset}'))

for var in monthly_stats.variable.values:
    display(Markdown(f'\n## {var} ({monthly_stats.attrs[f"{var} units"]})\n\n'))
    plot.monthly_climo(data=monthly_stats, var=var, scheme='mg')
    display(Markdown(' '))

display(Markdown(':::'))

```

```{python}
#| output: asis
#| label: "daily record by year"
#| title: "Daily Records Set By Year"

display(Markdown('::: {.panel-tabset}'))

for var in daily_stats.variable.values:
    display(Markdown(f'\n## {var} ({daily_stats.attrs[f"{var} units"]})\n\n'))
    plot.histograms(stats=daily_stats, var=var, scheme='mg')
    display(Markdown(' '))

display(Markdown(':::'))

```

```{python}
#| output: asis
#| label: "monthly records by year"
#| title: "Monthly Records Set By Year"

display(Markdown('::: {.panel-tabset}'))

for var in monthly_stats.variable.values:
    display(Markdown(f'\n## {var} ({monthly_stats.attrs[f"{var} units"]})\n\n'))
    plot.histograms(stats=monthly_stats, var=var, scheme='mg')
    display(Markdown(' '))

display(Markdown(':::'))

```

### Water Level Trend

```{=html}
{{< include ../../_woodsHoleMa/trend-waterlevel.html >}}
```

# Data

## Row {.tabset}

```{python}
#| output: asis
#| label: "daily stats data"
#| title: "Daily Stats"

display(Markdown('::: {.panel-tabset}'))

for var in daily_stats.variable.values:
    display(Markdown(f'\n### {var} ({daily_stats.attrs[f"{var} units"]})\n\n'))
    plot.gtable(daily_stats, var)
    display(Markdown(' '))

display(Markdown(':::'))

```

```{python}
#| output: asis
#| label: "monthly stats data"
#| title: "Monthly Stats"

display(Markdown('::: {.panel-tabset}'))

for var in monthly_stats.variable.values:
    display(Markdown(f'\n### {var} ({monthly_stats.attrs[f"{var} units"]})\n\n'))
    plot.gtable(monthly_stats, var)
    display(Markdown(' '))

display(Markdown(':::'))

```
