[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Local Climatologies",
    "section": "",
    "text": "Daily and monthly averages and records of NOAA CO-OPS weather and\ntide observations at different locations along the U.S. East Coast"
  },
  {
    "objectID": "index.html#active-sites-updated-daily",
    "href": "index.html#active-sites-updated-daily",
    "title": "Local Climatologies",
    "section": "Active Sites (updated daily)",
    "text": "Active Sites (updated daily)\n\n\n\n\n\n\n\n\nBeaufort, NC\n\n\n\n\n\n\n\n\n\n\n\n\n\nVirginia Key, FL\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#archived-sites-updated-less-frequently",
    "href": "index.html#archived-sites-updated-less-frequently",
    "title": "Local Climatologies",
    "section": "Archived Sites (updated less frequently)",
    "text": "Archived Sites (updated less frequently)\n\n\n\n\n\n\n\n\nLewes, DE\n\n\n\n\n\n\n\n\n\n\n\nPass Christian, MS\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#shout-out",
    "href": "index.html#shout-out",
    "title": "Local Climatologies",
    "section": "Shout Out",
    "text": "Shout Out\nThis project is inspired by Brian McNoldy at the University of Miami, whose long-standing Climatology of Virginia Key, FL site never ceased to provide insightful weather perspectives during my time at the Rosenstiel School of Marine, Atmospheric, and Earth Science."
  },
  {
    "objectID": "content/stations/virginiakey/index.html",
    "href": "content/stations/virginiakey/index.html",
    "title": "````",
    "section": "",
    "text": "title: “Virginia Key, FL” logo: ../../../images/vkfl.JPG format: dashboard: # orientation: columns scrolling: true\nfrom IPython.display import Markdown\nfrom scipy.optimize import curve_fit\nimport plotly.graph_objects as go\nfrom datetime import datetime\nimport pandas as pd\nimport xarray as xr\nimport numpy as np\nimport os\n\ndirName = 'virginiaKeyFl'\n\ndaily_stats = xr.load_dataset(f'../../../{dirName}/statistics-daily.nc')\nmonthly_stats = xr.load_dataset(f'../../../{dirName}/statistics-monthly.nc')\n\ncolsdict = {\n    'RecordHigh': '#d26c6c',\n    'AvgHigh': '#dc8d8d',\n    'LowestHigh': '#e6aeae',\n    'RecordHighAvg': '#ff8080',\n    'DailyAvg': '#F5F5F5',\n    'RecordLowAvg': '#c1d5f8',\n    'HighestLow': '#d1dffa',\n    'AvgLow': '#a2bff4',\n    'RecordLow': '#74a0ef'\n}\n\n# colsdict = {\n#     'RecordHigh': '#b31529',\n#     'AvgHigh': '#d75f4c',\n#     'LowestHigh': '#f6a482',\n#     'RecordHighAvg': '#fedbc7',\n#     'DailyAvg': '#f9f9f9',\n#     'RecordLowAvg': '#d1e5f0',\n#     'HighestLow': '#8ec4de',\n#     'AvgLow': '#3a93c3',    \n#     'RecordLow': '#1065ab'\n# }\n\ndeg = u'\\N{DEGREE SIGN}'\n\ndef getval(var, record, type):\n    \"\"\"Retrieve 'var' 'record' from stats table\"\"\"\n    if type.lower() == 'daily':\n        val = daily_stats[record].sel(variable=var, Date=today).values\n    elif type.lower() == 'monthly':\n        val = monthly_stats[record].sel(variable=var, Date=today).values\n    else:\n        raise ValueError(\"'type' must be either 'daily' or 'monthly'\")\n    return str(val)+f' {deg}F'\n\ndef colortable(stats):\n    \"\"\"Create a colored table\"\"\"\n    # Colors:\n    # https://www.tutorialrepublic.com/css-reference/css-color-names.php\n    fig = go.Figure(data=[go.Table(\n        header=dict( #values=list(stats.reset_index().columns),\n                    values=[f'&lt;b&gt;{i}&lt;/b&gt;' for i in stats.reset_index().columns],\n                    fill_color='grey',\n                    font_color='white',\n                    font_size=12,\n                    align='left'),\n        cells=dict(values=stats.reset_index().T,\n                fill_color=['white', colsdict['DailyAvg'],\n                            colsdict['RecordHighAvg'],\n                            colsdict['RecordHighAvg'],\n                            colsdict['RecordLowAvg'],\n                            colsdict['RecordLowAvg'],\n                            colsdict['AvgHigh'],\n                            colsdict['LowestHigh'],\n                            colsdict['LowestHigh'],\n                            colsdict['RecordHigh'],\n                            colsdict['RecordHigh'],\n                            colsdict['AvgLow'],\n                            colsdict['HighestLow'],\n                            colsdict['HighestLow'],\n                            colsdict['RecordLow'],\n                            colsdict['RecordLow'], 'white'],\n                font_size=12,\n                align='center')\n        )\n    ])\n    fig.show()\n\ndef cos_fit(data, plot=False):\n    \"\"\"Fit cosine curve to data\"\"\"\n    X = np.arange(0, len(data))/len(data)\n\n    # Initial parameter values\n    guess_freq = 1\n    guess_amplitude = 3*np.std(data)/(2**0.5)\n    guess_phase = 0\n    guess_offset = np.mean(data)\n    p0 = [guess_freq, guess_amplitude,\n          guess_phase, guess_offset]\n\n    # Function to fit\n    def my_cos(x, freq, amplitude, phase, offset):\n        return np.cos(x * freq + phase) * amplitude + offset\n\n    # Fit curve to data\n    fit = curve_fit(my_cos, X, data, p0=p0)\n\n    if plot:\n        fig, ax = plt.subplots(1, 1, figsize=(12,5))\n\n        ax.plot(data, label=data.name)\n        ax.plot(fit, color='red', label=f'Cosine fit')\n\n        ax.legend(loc='best')\n        plt.show()\n    else:\n        return my_cos(np.array(X), *fit[0])\n\ndef daily_climo(data, var, scheme='mg'):\n    \"\"\"Create a daily climatology plot for environmental variable 'var'\n    from 'data'.\n    \n    Inputs:\n        data: xarray containing climatological stats\n        var: str, one of the available environmental variables in 'data'\n        scheme: str, either 'mg' or 'bm' specifying whether to use M. Grossi's\n            color scheme or B. McNoldy's\n        show: Bool, display the plot to screen instead of saving to file\n    \"\"\"\n\n    # Dates for x axis\n    xdates = pd.date_range(start='2020-01-01',end='2020-12-31', freq='1D')\n    df = data.sel(variable=var)\n    \n    # Color dictionary\n    colors = dict(\n        mg=dict({\n            'Record High Year': 'white',\n            'Record High': '#d26c6c',\n            'Average High': '#dc8d8d',\n            'Daily Average': '#F5F5F5',\n            'Average Low': '#a2bff4',\n            'Record Low': '#74a0ef',\n            'Record Low Year': 'white'}),\n        bm=dict({\n            'Record High Year': 'white',\n            'Record High': 'orange',\n            'Average High': 'red',\n            'Daily Average': 'grey',\n            'Average Low': 'purple',\n            'Record Low': 'white'}),\n        cb=dict({\n            'Record High Year': 'white',\n            'Record High': colsdict['RecordHigh'],\n            'Average High': colsdict['AvgHigh'],\n            'Daily Average': colsdict['DailyAvg'],\n            'Average Low': colsdict['AvgLow'],\n            'Record Low': colsdict['RecordLow']})\n        )\n    \n    # Create figure\n    fig = go.Figure()\n\n    # Record highs\n    # High records this year\n    thisYear = pd.to_datetime('today').year\n    thisYearRecords = (data.sel(variable='Air Temperature')==thisYear)\\\n                       .to_dataframe().drop('variable', axis=1).sum().sum()\n    lastYearRecords = (data.sel(variable='Air Temperature')==thisYear-1)\\\n                       .to_dataframe().drop('variable', axis=1).sum().sum()\n    highRecords = df['Record High'].where(df['Record High Year'] == thisYear).to_dataframe()['Record High']\n    highRecords.index = pd.to_datetime(highRecords.index+'-2020')\n    lowRecords = df['Record Low'].where(df['Record Low Year'] == thisYear).to_dataframe()['Record Low']\n    lowRecords.index = pd.to_datetime(lowRecords.index+'-2020')\n    \n    first_time = datetime.strptime(df.attrs[f'{var} data range'][0], '%Y-%m-%d').strftime('%-m/%-d/%Y')\n    last_time = datetime.strptime(df.attrs[f'{var} data range'][1], '%Y-%m-%d').strftime('%-m/%-d/%Y')\n    fig.add_trace(\n    go.Scatter(\n        x=highRecords.index, y=highRecords.values,\n        name=f'{pd.to_datetime(\"today\").year} Record'.upper(),\n        mode='markers',\n        marker=dict(size=6, color='white'),\n        hoverinfo='none'\n    ))\n    fig.add_trace(\n    go.Scatter(\n        x=lowRecords.index, y=lowRecords.values,\n        name='Low Record',\n        mode='markers',\n        marker=dict(size=6, color='white'),\n        hoverinfo='none',\n        showlegend=False\n    ))\n    fig.add_trace(\n    go.Scatter(\n        x=xdates, y=df['Record High'],\n        name='Record High'.upper(),\n        mode='markers',\n        marker=dict(size=3, color=colors[scheme]['Record High'])\n    ))\n    # Average highs\n    fig.add_trace(\n    go.Scatter(\n        x=xdates, y=cos_fit(df['Average High']).round(1),\n        name='Average High'.upper(),\n        marker=dict(size=3, color=colors[scheme]['Average High'])\n    ))\n    # Daily average\n    fig.add_trace(\n    go.Scatter(\n        x=xdates, y=cos_fit(df['Daily Average']).round(1),\n        name='Daily Average'.upper(),\n        marker=dict(size=3, color=colors[scheme]['Daily Average'])\n    ))\n    # Average lows\n    fig.add_trace(\n    go.Scatter(\n        x=xdates,\n        y=cos_fit(df['Average Low']).round(1),\n        name='Average Low'.upper(),\n        marker=dict(size=3, color=colors[scheme]['Average Low'])\n    ))\n    # Record lows\n    fig.add_trace(\n    go.Scatter(\n        x=xdates, y=df['Record Low'],\n        name='Record Low'.upper(),\n        mode='markers',\n        marker=dict(size=3, color=colors[scheme]['Record Low'])\n    ))\n    # Hover box\n    fig.update_traces(\n        hoverlabel = dict(bordercolor='white')\n    )\n    # Plot settings\n    fig.update_layout(\n        template='plotly_dark',\n        paper_bgcolor='#404040',\n        plot_bgcolor='#404040',\n        margin=dict(l=50, r=50,\n                    t=70, b=50,\n                    pad=4),\n        title=dict(text='Daily {} records'.format(var.lower())+\n                        '&lt;br&gt;&lt;sup&gt;{}-{}&lt;/sup&gt;'.format(first_time, last_time)+\n                        '&lt;br&gt;&lt;sup&gt;As of today, &lt;b&gt;{}&lt;/b&gt; {} records have been set. Last year, {} records were set.&lt;/sup&gt;'.format(\n                            thisYearRecords, var.lower(), lastYearRecords\n                        ),\n                  font=dict(size=22)),\n        yaxis = dict(title=f'{var} ({data.attrs[f\"{var} units\"]})',\n                     showgrid=True, gridcolor='grey'),\n        xaxis = dict(showgrid=False, showspikes=True,\n                     dtick='M1', tickformat='%b %d',\n                     ),\n        hovermode='x unified',\n        legend=dict(itemsizing='constant',\n                    yanchor='top',\n                    y=0.7,\n                    xanchor='left',\n                    x=1),\n        # hoverlabel=dict(font_size=12),\n        font=dict(size=14)\n    )\n    fig.show()\n\ndef display_table(stats, var):\n    \"\"\"Display the table if the variable 'var' exists in 'stats'. Otherwise, display a message that the data do not exist.\n    \"\"\"\n    freq = 'Monthly' if 'Month' in stats.sizes.keys() else 'Daily'\n    try:\n        stats = stats.sel(variable=var.title()).to_dataframe().drop('variable', axis=1)\n        colortable(stats)\n    except KeyError:\n        print(f'{freq} {var.lower()} data are not available for this station.')"
  },
  {
    "objectID": "content/stations/virginiakey/index.html#row",
    "href": "content/stations/virginiakey/index.html#row",
    "title": "````",
    "section": "Row",
    "text": "Row\n\nColumn\n\n\n\n\n\nColumn"
  },
  {
    "objectID": "content/stations/virginiakey/index.html#row-1",
    "href": "content/stations/virginiakey/index.html#row-1",
    "title": "````",
    "section": "Row",
    "text": "Row\nVirginia Key is a small barrier island in southeast Florida with a tropical monsoon climate characterized by hot, humid summers and warm, dry winters. It is located east of Miami, south of Miami Beach, and north of Key Biscayne in Biscayne Bay. The NOAA weather station has been installed on a pier at the University of Miami Rosenstiel School of Marine, Atmospheric, and Earth Science since February 1994."
  },
  {
    "objectID": "content/stations/virginiakey/index.html#row-.height50",
    "href": "content/stations/virginiakey/index.html#row-.height50",
    "title": "````",
    "section": "Row {.height=50%}",
    "text": "Row {.height=50%}\n\nvar = 'Air Temperature'\ndict(\n  icon = \"thermometer-snow\",\n  color = colsdict['RecordLow'],\n  value = getval(var, 'Record Low', 'daily')\n)\n\n{'icon': 'thermometer-snow', 'color': '#74a0ef', 'value': '72.3 °F'}\n\n\n\ndict(\n  icon = \"thermometer-low\",\n  color = colsdict['AvgLow'],\n  value = getval(var, 'Average Low', 'daily')\n)\n\n{'icon': 'thermometer-low', 'color': '#a2bff4', 'value': '77.4 °F'}\n\n\n\ndict(\n  icon = \"thermometer-half\",\n  color = colsdict['HighestLow'],\n  value = getval(var, 'Highest Low', 'daily')\n)\n\n{'icon': 'thermometer-half', 'color': '#d1dffa', 'value': '82.0 °F'}\n\n\n\ndict(\n  icon = \"thermometer-half\",\n  color = colsdict['LowestHigh'],\n  value = getval(var, 'Lowest High', 'daily')\n)\n\n{'icon': 'thermometer-half', 'color': '#e6aeae', 'value': '79.9 °F'}\n\n\n\ndict(\n  icon = \"thermometer-high\",\n  color = colsdict['AvgHigh'],\n  value = getval(var, 'Average High', 'daily')\n)\n\n{'icon': 'thermometer-high', 'color': '#dc8d8d', 'value': '83.4 °F'}\n\n\n\ndict(\n  icon = \"thermometer-sun\",\n  color = colsdict['RecordHigh'],\n  value = getval(var, 'Record High', 'daily')\n)\n\n{'icon': 'thermometer-sun', 'color': '#d26c6c', 'value': '88.9 °F'}"
  },
  {
    "objectID": "content/stations/virginiakey/index.html#row-2",
    "href": "content/stations/virginiakey/index.html#row-2",
    "title": "````",
    "section": "Row",
    "text": "Row\n\ntoday = datetime.today().strftime('%d-%b')\nMarkdown(\"**Welcome!** Today is {}.\"\n    .format(datetime.today().strftime(\"%A, %B %d, %Y\")))\n\nWelcome! Today is Tuesday, June 11, 2024."
  },
  {
    "objectID": "content/stations/virginiakey/index.html#row-3",
    "href": "content/stations/virginiakey/index.html#row-3",
    "title": "````",
    "section": "Row",
    "text": "Row\n\nColumn\n\nRow\n\nvar = 'Air Temperature'\ndict(\n  icon = \"thermometer-sun\",\n  color = colsdict['RecordHigh'],\n  value = getval(var, 'Record High', 'daily')\n)\n\n{'icon': 'thermometer-sun', 'color': '#d26c6c', 'value': '87.6 °F'}\n\n\n\n\nRow\n\ndict(\n  icon = \"thermometer-high\",\n  color = colsdict['AvgHigh'],\n  value = getval(var, 'Average High', 'daily')\n)\n\n{'icon': 'thermometer-high', 'color': '#dc8d8d', 'value': '83.9 °F'}\n\n\n\n\nRow\n\ndict(\n  icon = \"thermometer-half\",\n  color = colsdict['LowestHigh'],\n  value = getval(var, 'Lowest High', 'daily')\n)\n\n{'icon': 'thermometer-half', 'color': '#e6aeae', 'value': '80.6 °F'}\n\n\n\n\nRow\n\ndict(\n  icon = \"thermometer-half\",\n  color = colsdict['HighestLow'],\n  value = getval(var, 'Highest Low', 'daily')\n)\n\n{'icon': 'thermometer-half', 'color': '#d1dffa', 'value': '82.0 °F'}\n\n\n\n\nRow\n\ndict(\n  icon = \"thermometer-snow\",\n  color = colsdict['RecordLow'],\n  value = getval(var, 'Record Low', 'daily')\n)\n\n{'icon': 'thermometer-snow', 'color': '#74a0ef', 'value': '72.0 °F'}\n\n\n\n\n\nColumn\n\ndisplay(Markdown('::: {.panel-tabset}'))\n\nfor var in daily_stats.variable.values:\n    display(Markdown(f'\\n## {var}\\n\\n'))\n    daily_climo(data=daily_stats, var=var, scheme='cb')\n    display(Markdown(' '))\n\ndisplay(Markdown(':::'))\n\nAir TemperatureWater Temperature\n\n\n                                                \n\n\n                                                \n\n\n\n\n\ndisplay(Markdown('::: {.panel-tabset}'))\n\nfor var in daily_stats.variable.values:\n    display(Markdown(f'\\n## {var}\\n\\n'))\n    display(Markdown('Plot'))\n    display(Markdown(' '))\n\ndisplay(Markdown(':::'))\n\nAir TemperatureWater Temperature\n\n\nPlot\n\n\nPlot"
  },
  {
    "objectID": "content/stations/virginiakey/index.html#tabset-2-1",
    "href": "content/stations/virginiakey/index.html#tabset-2-1",
    "title": "Climatology",
    "section": "Row",
    "text": "Row\n\nDaily Stats\n\n\n\nAir TemperatureWater Temperature\n\n\n                                                \n\n\n                                                \n\n\n\n\n\n\n    \n    \n        \n    \n\n\nMonthly Stats\n\n\n\n\n\nAir\n\nTemperature\n\n                                                \n\nWater\n\nTemperature"
  },
  {
    "objectID": "content/stations/virginiakey/index.html#row-9",
    "href": "content/stations/virginiakey/index.html#row-9",
    "title": "````",
    "section": "Row",
    "text": "Row\n\ndisplay(Markdown('::: {..column-screen}'))\ndisplay(Markdown('::: {.panel-tabset}'))\n\nfor var in daily_stats.variable.values:\n    display(Markdown(f'\\n## {var}\\n\\n'))\n    display_table(daily_stats, var)\n    display(Markdown(' '))\n\ndisplay(Markdown(':::'))\ndisplay(Markdown(':::'))\n\n\nAir TemperatureWater Temperature\n\n\n                                                \n\n\n                                                \n\n\n\n\n\n\ndisplay(Markdown('::: {.panel-tabset}'))\n\nfor var in daily_stats.variable.values:\n    display(Markdown(f'\\n## {var}\\n\\n'))\n    display_table(monthly_stats, var)\n    display(Markdown(' '))\n\ndisplay(Markdown(':::'))\n\nAir TemperatureWater Temperature\n\n\n                                                \n\n\n                                                \n\n\n\n\n````"
  },
  {
    "objectID": "content/about.html",
    "href": "content/about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\n\n Back to top"
  }
]