[
  {
    "objectID": "acknowledgements.html",
    "href": "acknowledgements.html",
    "title": "Giving credit where credit is due",
    "section": "",
    "text": "This project is inspired by Brian McNoldy at the University of Miami, whose long-standing “Climatology of Virginia Key, FL” site never ceased to provide insightful weather perpectives during my time at the Rosenstiel School of Marine, Atmospheric, and Earth Science.\nClimatology dashboards are provided here for a number of locations along the east coast to which I have some degree of connection. Some are updated more regularly than others.\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Shout Out"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "What are these data?",
    "section": "",
    "text": "The National Oceanographic and Atmospheric Administration (NOAA) National Ocean Service Center for Operational Oceanographic Products and Services (CO-OPS) operates hundreds of water level observation stations along the United States coasts and Great Lakes. This National Water Level Observation Network (NWLON), part of the Integrating Ocean Observing System (IOOS), provides the data from which official tidal predictions are generated. Most of these observation stations also observe water temperature as well as air temperature, barometric pressure, and wind. All of these data are publically available via the NOAA CO-OPS Tides and Currents data portal.\nThe historical time series vary in length among sites and environmental parameters. Water level sensors often came first, with eather stations added later. Data collected since circa 1995 are generally available in 6-minute observations; prior to that, observations are hourly. Data inventories are available for every site:\n\nBeaufort, North Carolina\nWoods Hole, Massachusetts\nNaples, Florida\nBay St. Louis, Mississippi\nVirginia Key, Florida\nLewes, Delaware\n\nWater level sensors are calibrated and the observations are verified. None of the other variables are verified and should be used with caution.\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "About the Data"
    ]
  },
  {
    "objectID": "demos/NOAA-CO-OPS-records.html",
    "href": "demos/NOAA-CO-OPS-records.html",
    "title": "Data Cleansing and Records Calculations",
    "section": "",
    "text": "This notebook follows sequentially from NOAA-CO-OPS-data in which we downloaded the latest data for a particular NOAA CO-OPS weather and tide station. The data record and corresponding metadata were written to file. Here we use those data and calculates several daily and monthly statistics and records. This is done in two steps:\n\nFilter the data: We do not perform any quality assurance or quality control checks, but we do remove from the records any days missing a specified amount of data and any months missing a specified number of days of data.\nCalculate records:\n\nDaily and monthly averages\nRecord high daily and monthly averages*\nRecord low daily and monthly averages*\nAverage daily and monthly high\nLowest daily and monthly high*\nRecord daily and monthly high*\nAverage daily and monthly low\nHighest daily and monthly low*\nRecord daily and monthly low*\n\n\nYears are also noted for those records marked by an asterisk (*).\n\nPackages and configurations\nFirst we import the packages we need.\n\nimport pandas as pd\nimport xarray as xr\nimport calendar\nimport yaml\nimport os\n\nBy default, Python only displays warnings the first time they are thrown. Ideally, we want a code that does not throw any warnings, but it sometimes takes soem trial and error to resolve the issue being warned about. So, for diagnostic purposes, we’ll set the kernel to always display warnings.\n\nimport warnings\nwarnings.filterwarnings('always')\n\n\n\nFunctions\nNext, we define a number of functions that will come in handy later.\n\nHelper functions\n\ndef camel(text):\n    \"\"\"Convert 'text' to camel case\"\"\"\n    s = text.replace(',','').replace(\"-\", \" \").replace(\"_\", \" \")\n    s = s.split()\n    if len(text) == 0:\n        return text\n    return s[0].lower() + ''.join(i.capitalize() for i in s[1:])\n\ndef DOY(df):\n    \"\"\"Determine year day out of 366\"\"\"\n    # Day of year as integer\n    df['YearDay'] = df.index.day_of_year.astype(int)\n    # Years that are NOT leap years\n    leapInd = [not calendar.isleap(i) for i in df.index.year]\n    mask = (leapInd) & (df.index.month &gt; 2)\n    # Advance by one day everything after February 28 \n    df.loc[mask, 'YearDay'] += 1\n    return df\n\n\n\nFiltering data\n\ndef count_missing_hours(group, threshold=3):\n    \"\"\"Return True if the number of hours in a day with missing data is less\n    than or equal to 'threshold' and False otherwise.\n    \"\"\"\n    missing_hours = group.resample('1h').mean().isna().sum()\n    return missing_hours &lt;= threshold\n\ndef count_missing_days(group, threshold=2):\n    \"\"\"Return True if the number of days in a month with missing data is less\n    than or equal to 'theshold' and False otherwise. Two tests are performed:\n    missing data (NaN) and compare to the number of days in the given month.\n    \"\"\"\n    try:\n        days_in_month = pd.Period(group.index[0].strftime(format='%Y-%m-%d')).days_in_month\n        missing_days = group.resample('1D').mean().isna().sum()\n        missing_days_flag = missing_days &lt;= threshold\n        days_in_month_flag = days_in_month - group.resample('1D').mean().size &lt;= threshold\n        return min(missing_days_flag, days_in_month_flag)\n    except IndexError:\n        pass\n\ndef filter_data(data, hr_threshold=3, day_threshold=2):\n    \"\"\"Filter data to remove days with more than 'hr_threshold' missing hours\n    of data and months with more than 'day_threshold' days of missing data.\n    \"\"\"\n    # Filter out days missing more than &lt;hr_threshold&gt; hours\n    filtered = data.groupby(pd.Grouper(freq='1D')).filter(lambda x: count_missing_hours(group=x, threshold=hr_threshold))\n    # Filter out months missing more than &lt;day_threshold&gt; days\n    filtered = filtered.groupby(pd.Grouper(freq='1M')).filter(lambda x: count_missing_days(group=x, threshold=day_threshold))\n    return filtered\n\n\n\nCalculate records\n\ndef daily_highs(df):\n    \"\"\"Daily highs\"\"\"\n    return df.groupby(pd.Grouper(freq='1D')).max(numeric_only=True)\n\ndef daily_lows(df):\n    \"\"\"Daily lows\"\"\"\n    return df.groupby(pd.Grouper(freq='1D')).min(numeric_only=True)\n\ndef daily_avgs(df, decimals=1, true_average=False):\n    \"\"\"Daily averages by calendar day rounded to 'decimals'. If\n    'true_average' is True, all measurements from each 24-hour day will be\n    used to calculate the average. Otherwise, only the maximum and minimum\n    observations are used. Defaults to False (meteorological standard).\n    \"\"\"\n    if true_average:\n        results = df.groupby(pd.Grouper(freq='1D')).mean(numeric_only=True)\n    else:\n        dailyHighs = daily_highs(df)\n        dailyLows = daily_lows(df)\n        results = (dailyHighs + dailyLows) / 2\n    return results.round(decimals)\n\ndef daily_avg(df, decimals=1, true_average=False):\n    \"\"\"Daily averages rounded to 'decimals'. If 'true_average' is True, all\n    measurements from each 24-hour day will be used to calculate the daily\n    average. Otherwise, only the maximum and minimum observations are used.\n    Defaults to False (meteorological standard).\n    \"\"\"\n    dailyAvgs = daily_avgs(df, decimals=decimals, true_average=true_average)\n    dailyAvg = dailyAvgs.groupby('YearDay').mean(numeric_only=True).round(decimals)\n    dailyAvg.index = dailyAvg.index.astype(int)\n    results = xr.DataArray(dailyAvg, dims=['yearday', 'variable'])\n    results.name = 'Daily Average'\n    return results\n\ndef monthly_highs(df, decimals=1, true_average=False):\n    \"\"\"Monthly highs rounded to 'decimals'. If 'true_average' is True, all\n    measurements from each 24-hour day will be used to calculate the daily\n    average. Otherwise, only the maximum and minimum observations are used.\n    Defaults to False (meteorological standard).\n    \"\"\"\n    dailyAvgs = daily_avgs(df, decimals=decimals, true_average=False)\n    monthHighs = dailyAvgs.groupby(pd.Grouper(freq='M')).max(numeric_only=True)\n    return monthHighs\n  \ndef monthly_lows(df, decimals=1, true_average=False):\n    \"\"\"Monthly lows rounded to 'decimals'. If 'true_average' is True, all\n    measurements from each 24-hour day will be used to calculate the daily\n    average. Otherwise, only the maximum and minimum observations are used.\n    Defaults to False (meteorological standard).\n    \"\"\"\n    dailyAvgs = daily_avgs(df, decimals=decimals, true_average=true_average)\n    monthLows = dailyAvgs.groupby(pd.Grouper(freq='M')).min(numeric_only=True)\n    return monthLows\n    \ndef monthly_avg(df, decimals=1, true_average=False):\n    \"\"\"Monthly averages for variable 'var' rounded to 'decimals'. If\n    'true_average' is True, all measurements from each 24-hour day will be\n    used to calculate the daily average. Otherwise, only the maximum and\n    minimum observations are used. Defaults to False (meteorological\n    standard).\n    \"\"\"\n    dailyAvgs = daily_avgs(df, decimals=decimals, true_average=true_average)\n    monthlyMeans = dailyAvgs.groupby(pd.Grouper(freq='M')).mean(numeric_only=True).round(decimals)\n    monthlyMeans.drop('YearDay', axis=1, inplace=True)\n    monthlyAvg = monthlyMeans.groupby(monthlyMeans.index.month).mean(numeric_only=True).round(decimals)\n    monthlyAvg.index = monthlyAvg.index.astype(int)\n    results = xr.DataArray(monthlyAvg, dims=['month', 'variable'])\n    results.name = 'Monthly Average'\n    return results\n\ndef record_high_daily_avg(df, decimals=1, true_average=False):\n    \"\"\"Record high daily averages rounded to 'decimals'. If 'true_average'\n    is True, all measurements from each 24-hour day will be used to\n    calculate the daily average. Otherwise, only the maximum and minimum\n    observations are used. Defaults to False (meteorological standard).\n    \"\"\"\n    # Calculate the records\n    dailyAvgs = daily_avgs(df=df, decimals=decimals, true_average=true_average)\n    recordHighDailyAvg = dailyAvgs.groupby('YearDay').max(numeric_only=True).round(decimals)\n    recordHighDailyAvg.index = recordHighDailyAvg.index.astype(int)\n    # Record years\n    recordHighDailyAvgYear = dailyAvgs.groupby('YearDay').apply(lambda x: x.idxmax(numeric_only=True).dt.year)\n    recordHighDailyAvgYear.drop('YearDay', axis=1, inplace=True)\n    recordHighDailyAvgYear.index = recordHighDailyAvgYear.index.astype(int)\n    recordHighDailyAvgYear.columns = [i+' Year' for i in recordHighDailyAvgYear.columns]\n    # Create xarray\n    results = pd.concat((recordHighDailyAvg, recordHighDailyAvgYear), axis=1)\n    results = xr.DataArray(results, dims=['yearday', 'variable'])\n    results.name = 'Record High Daily Average'\n    return results\n    \ndef record_high_monthly_avg(df, decimals=1, true_average=False):\n    \"\"\"Record high monthly averages rounded to 'decimals'. If\n    'true_average' is True, all measurements from each 24-hour day will be\n    used to calculate the daily average. Otherwise, only the maximum and\n    minimum observations are used. Defaults to False (meteorological\n    standard).\n    \"\"\"\n    # Calculate the records\n    dailyAvgs = daily_avgs(df, decimals=decimals, true_average=true_average)\n    monthlyAvgs = dailyAvgs.groupby(pd.Grouper(freq='M')).mean(numeric_only=True).round(decimals)\n    monthlyAvgs.drop('YearDay', axis=1, inplace=True)\n    recordHighMonthlyAvg = monthlyAvgs.groupby(monthlyAvgs.index.month).max(numeric_only=True)\n    recordHighMonthlyAvg.index = recordHighMonthlyAvg.index.astype(int)\n    # Record years\n    recordHighMonthlyAvgYear = monthlyAvgs.groupby(monthlyAvgs.index.month).apply(lambda x: x.idxmax(numeric_only=True).dt.year)\n    recordHighMonthlyAvgYear.index = recordHighMonthlyAvgYear.index.astype(int)\n    recordHighMonthlyAvgYear.columns = [i+' Year' for i in recordHighMonthlyAvgYear.columns]\n    # Create xarray\n    results = pd.concat((recordHighMonthlyAvg, recordHighMonthlyAvgYear), axis=1)\n    results = xr.DataArray(results, dims=['month', 'variable'])\n    results.name = 'Record High Monthly Average'\n    return results\n\ndef record_low_daily_avg(df, decimals=1, true_average=False):\n    \"\"\"Record low daily averages rounded to 'decimals'.  If 'true_average'\n    True, all measurements from each 24-hour day will be used to calculate\n    the average. Otherwise, only the maximum and minimum observations are\n    used. Defaults to False (meteorological standard).\"\"\"\n    # Calculate the records\n    dailyAvgs = daily_avgs(df=df, decimals=decimals, true_average=true_average)\n    recordLowDailyAvg = dailyAvgs.groupby('YearDay').min(numeric_only=True).round(decimals)\n    recordLowDailyAvg.index = recordLowDailyAvg.index.astype(int)\n    # Record years\n    recordLowDailyAvgYear = dailyAvgs.groupby('YearDay').apply(lambda x: x.idxmin(numeric_only=True).dt.year)\n    recordLowDailyAvgYear.drop('YearDay', axis=1, inplace=True)\n    recordLowDailyAvgYear.index = recordLowDailyAvgYear.index.astype(int)\n    recordLowDailyAvgYear.columns = [i+' Year' for i in recordLowDailyAvgYear.columns]\n    # Create xarray\n    results = pd.concat((recordLowDailyAvg, recordLowDailyAvgYear), axis=1)\n    results = xr.DataArray(results, dims=['yearday', 'variable'])\n    results.name = 'Record Low Daily Average'\n    return results\n\ndef record_low_monthly_avg(df, decimals=1, true_average=False):\n    \"\"\"Record low monthly averages rounded to 'decimals'. If 'true_average'\n    is True, all measurements from each 24-hour day will be used to\n    calculate the daily average. Otherwise, only the maximum and minimum\n    observations are used. Defaults to False (meteorological standard).\n    \"\"\"\n    # Calculate the records\n    dailyAvgs = daily_avgs(df, decimals=decimals, true_average=true_average)\n    monthlyAvgs = dailyAvgs.groupby(pd.Grouper(freq='M')).mean(numeric_only=True).round(decimals)\n    monthlyAvgs.drop('YearDay', axis=1, inplace=True)\n    recordLowMonthlyAvg = monthlyAvgs.groupby(monthlyAvgs.index.month).min(numeric_only=True)\n    recordLowMonthlyAvg.index = recordLowMonthlyAvg.index.astype(int)\n    # Record years\n    recordLowMonthlyAvgYear = monthlyAvgs.groupby(monthlyAvgs.index.month).apply(lambda x: x.idxmin(numeric_only=True).dt.year)\n    recordLowMonthlyAvgYear.index = recordLowMonthlyAvgYear.index.astype(int)\n    recordLowMonthlyAvgYear.columns = [i+' Year' for i in recordLowMonthlyAvgYear.columns]\n    # Create xarray\n    results = pd.concat((recordLowMonthlyAvg, recordLowMonthlyAvgYear), axis=1)\n    results = xr.DataArray(results, dims=['month', 'variable'])\n    results.name = 'Record Low Monthly Average'\n    return results\n\ndef avg_daily_high(df, decimals=1):\n    \"\"\"Average daily highs rounded to 'decimals'.\"\"\"        \n    dailyHighs = daily_highs(df)\n    results = dailyHighs.groupby('YearDay').mean(numeric_only=True).round(decimals)\n    results = xr.DataArray(results, dims=['yearday', 'variable'])\n    results.name = 'Average Daily High'\n    return results\n\ndef avg_monthly_high(df, decimals=1, true_average=False):\n    \"\"\"Average monthly highs rounded to 'decimals'. If 'true_average' is\n    True, all measurements from each 24-hour day will be used to calculate\n    the daily average. Otherwise, only the maximum and minimum observations\n    are used. Defaults to False (meteorological standard).\n    \"\"\"\n    monthlyHighs = monthly_highs(df, decimals=decimals, true_average=true_average)\n    monthlyHighs.drop('YearDay', axis=1, inplace=True)\n    avgMonthlyHighs = monthlyHighs.groupby(monthlyHighs.index.month).mean(numeric_only=True).round(decimals)\n    results = xr.DataArray(avgMonthlyHighs, dims=['month', 'variable'])\n    results.name = 'Average Monthly High'\n    return results\n\ndef lowest_daily_high(df, decimals=1):\n    \"\"\"Lowest daily highs rounded to 'decimals'.\"\"\"\n    # Calculate the record\n    dailyHighs = daily_highs(df)\n    lowestHigh = dailyHighs.groupby('YearDay').min(numeric_only=True).round(decimals)\n    lowestHigh.index = lowestHigh.index.astype(int)\n    # Record years\n    lowestHighYear = dailyHighs.groupby('YearDay').apply(lambda x: x.idxmin(numeric_only=True).dt.year)\n    lowestHighYear.drop('YearDay', axis=1, inplace=True)\n    lowestHighYear.index = lowestHighYear.index.astype(int)\n    lowestHighYear.columns = [i+' Year' for i in lowestHighYear.columns]\n    # Create xarray\n    results = pd.concat((lowestHigh, lowestHighYear), axis=1)\n    results = xr.DataArray(results, dims=['yearday', 'variable'])\n    results.name = 'Lowest Daily High'\n    return results\n    \ndef lowest_monthly_high(df, decimals=1, true_average=False):\n    \"\"\"Lowest monthly highs rounded to 'decimals'. If 'true_average' is\n    True, all measurements from each 24-hour day will be used to calculate\n    the daily average. Otherwise, only the maximum and minimum observations\n    are used. Defaults to False (meteorological standard).\n    \"\"\"\n    # Calculate the record\n    monthlyHighs = monthly_highs(df, decimals=decimals, true_average=true_average)\n    monthlyHighs.drop('YearDay', axis=1, inplace=True)\n    lowMonthlyHigh = monthlyHighs.groupby(monthlyHighs.index.month).min(numeric_only=True).round(decimals)\n    lowMonthlyHigh.index = lowMonthlyHigh.index.astype(int)\n    # Record years\n    lowMonthlyHighYear = monthlyHighs.groupby(monthlyHighs.index.month).apply(lambda x: x.idxmin(numeric_only=True).dt.year)\n    lowMonthlyHighYear.index = lowMonthlyHighYear.index.astype(int)\n    lowMonthlyHighYear.columns = [i+' Year' for i in lowMonthlyHighYear.columns]\n    # Create xarray\n    results = pd.concat((lowMonthlyHigh, lowMonthlyHighYear), axis=1)\n    results = xr.DataArray(results, dims=['month', 'variable'])\n    results.name = 'Lowest Monthly High'\n    return results\n\ndef record_daily_high(df, decimals=1):\n    \"\"\"Record daily highs rounded to 'decimal'.\"\"\"\n    # Calculate the record\n    dailyHighs = daily_highs(df)\n    recordHigh = dailyHighs.groupby('YearDay').max(numeric_only=True).round(decimals)\n    recordHigh.index = recordHigh.index.astype(int)\n    # Record years\n    recordHighYear = dailyHighs.groupby('YearDay').apply(lambda x: x.idxmax(numeric_only=True).dt.year)\n    recordHighYear.drop('YearDay', axis=1, inplace=True)\n    recordHighYear.index = recordHighYear.index.astype(int)\n    recordHighYear.columns = [i+' Year' for i in recordHighYear.columns]\n    # Create xarray\n    results = pd.concat((recordHigh, recordHighYear), axis=1)\n    results = xr.DataArray(results, dims=['yearday', 'variable'])\n    results.name = 'Record Daily High'\n    return results\n\ndef record_monthly_high(df, decimals=1, true_average=False):\n    \"\"\"Record monthly highs rounded to 'decimals'. If 'true_average' is\n    True, all measurements from each 24-hour day will be used to calculate\n    the daily average. Otherwise, only the maximum and minimum observations\n    are used. Defaults to False (meteorological standard).\n    \"\"\"\n    # Calculate the record\n    monthlyHighs = monthly_highs(df, decimals=decimals, true_average=true_average)\n    monthlyHighs.drop('YearDay', axis=1, inplace=True)\n    recordMonthlyHigh = monthlyHighs.groupby(monthlyHighs.index.month).max(numeric_only=True).round(decimals)\n    recordMonthlyHigh.index = recordMonthlyHigh.index.astype(int)\n    # Record years\n    recordMonthlyHighYear = monthlyHighs.groupby(monthlyHighs.index.month).apply(lambda x: x.idxmax(numeric_only=True).dt.year)\n    recordMonthlyHighYear.index = recordMonthlyHighYear.index.astype(int)\n    recordMonthlyHighYear.columns = [i+' Year' for i in recordMonthlyHighYear.columns]\n    # Create xarray\n    results = pd.concat((recordMonthlyHigh, recordMonthlyHighYear), axis=1)\n    results = xr.DataArray(results, dims=['month', 'variable'])\n    results.name = 'Record Monthly High'\n    return results\n\ndef avg_daily_low(df, decimals=1):\n    \"\"\"Average daily lows rounded to 'decimals'.\"\"\"        \n    dailyLows = daily_lows(df)\n    results = dailyLows.groupby('YearDay').mean(numeric_only=True).round(decimals)\n    results = xr.DataArray(results, dims=['yearday', 'variable'])\n    results.name = 'Average Daily Low'\n    return results\n\ndef avg_monthly_low(df, decimals=1, true_average=False):\n    \"\"\"Average monthly lows rounded to 'decimals'. If 'true_average' is\n    True, all measurements from each 24-hour day will be used to calculate\n    the daily average. Otherwise, only the maximum and minimum observations\n    are used. Defaults to False (meteorological standard).\n    \"\"\"\n    monthlyLows = monthly_lows(df, decimals=decimals, true_average=true_average)\n    monthlyLows.drop('YearDay', axis=1, inplace=True)\n    avgMonthlyLows = monthlyLows.groupby(monthlyLows.index.month).mean(numeric_only=True).round(decimals)\n    results = xr.DataArray(avgMonthlyLows, dims=['month', 'variable'])\n    results.name = 'Average Monthly Low'\n    return results\n\ndef highest_daily_low(df, decimals=1):\n    \"\"\"Highest daily lows rounded to 'decimals'.\"\"\"\n    # Calculate the record\n    dailyLows = daily_lows(df)\n    highestLow = dailyLows.groupby('YearDay').max(numeric_only=True).round(decimals)\n    highestLow.index = highestLow.index.astype(int)\n    # Record years\n    highestLowYear = dailyLows.groupby('YearDay').apply(lambda x: x.idxmax(numeric_only=True).dt.year)\n    highestLowYear.drop('YearDay', axis=1, inplace=True)\n    highestLowYear.index = highestLowYear.index.astype(int)\n    highestLowYear.columns = [i+' Year' for i in highestLowYear.columns]\n    # Create xarray\n    results = pd.concat((highestLow, highestLowYear), axis=1)\n    results = xr.DataArray(results, dims=['yearday', 'variable'])\n    results.name = 'Highest Daily Low'\n    return results\n    \ndef highest_monthly_low(df, decimals=1, true_average=False):\n    \"\"\"Highest monthly lows rounded to 'decimals'. If 'true_average' is\n    True, all measurements from each 24-hour day will be used to calculate\n    the daily average. Otherwise, only the maximum and minimum observations\n    are used. Defaults to False (meteorological standard).\n    \"\"\"\n    # Calculate the record\n    monthlyLows = monthly_lows(df, decimals=decimals, true_average=true_average)\n    monthlyLows.drop('YearDay', axis=1, inplace=True)\n    highestMonthlyLow = monthlyLows.groupby(monthlyLows.index.month).max(numeric_only=True).round(decimals)\n    highestMonthlyLow.index = highestMonthlyLow.index.astype(int)\n    # Record years\n    highestMonthlyLowYear = monthlyLows.groupby(monthlyLows.index.month).apply(lambda x: x.idxmax(numeric_only=True).dt.year)\n    highestMonthlyLowYear.index = highestMonthlyLowYear.index.astype(int)\n    highestMonthlyLowYear.columns = [i+' Year' for i in highestMonthlyLowYear.columns]\n    # Create xarray\n    results = pd.concat((highestMonthlyLow, highestMonthlyLowYear), axis=1)\n    results = xr.DataArray(results, dims=['month', 'variable'])\n    results.name = 'Highest Monthly Low'\n    return results\n\ndef record_daily_low(df, decimals=1):\n    \"\"\"Record daily lows rounded to 'decimals'.\"\"\"\n    # Calculate the record\n    dailyLows = daily_lows(df)\n    recordLow = dailyLows.groupby('YearDay').min(numeric_only=True).round(decimals)\n    recordLow.index = recordLow.index.astype(int)\n    # Record years\n    recordLowYear = dailyLows.groupby('YearDay').apply(lambda x: x.idxmin(numeric_only=True).dt.year)\n    recordLowYear.drop('YearDay', axis=1, inplace=True)\n    recordLowYear.index = recordLowYear.index.astype(int)\n    recordLowYear.columns = [i+' Year' for i in recordLowYear.columns]\n    # Create xarray\n    results = pd.concat((recordLow, recordLowYear), axis=1)\n    results = xr.DataArray(results, dims=['yearday', 'variable'])\n    results.name = 'Record Daily Low'\n    return results\n\ndef record_monthly_low(df, decimals=1, true_average=False):\n    \"\"\"Record monthly lows rounded to 'decimals'. If 'true_average' is\n    True, all measurements from each 24-hour day will be used to calculate\n    the daily average. Otherwise, only the maximum and minimum observations\n    are used. Defaults to False (meteorological standard).\n    \"\"\"\n    # Calculate the record\n    monthlyLows = monthly_lows(df, decimals=decimals, true_average=true_average)\n    monthlyLows.drop('YearDay', axis=1, inplace=True)\n    recordMonthlyLow = monthlyLows.groupby(monthlyLows.index.month).min(numeric_only=True).round(decimals)\n    recordMonthlyLow.index = recordMonthlyLow.index.astype(int)\n    # Record years\n    recordMonthlyLowYear = monthlyLows.groupby(monthlyLows.index.month).apply(lambda x: x.idxmin(numeric_only=True).dt.year)\n    recordMonthlyLowYear.index = recordMonthlyLowYear.index.astype(int)\n    recordMonthlyLowYear.columns = [i+' Year' for i in recordMonthlyLowYear.columns]\n    # Create xarray\n    results = pd.concat((recordMonthlyLow, recordMonthlyLowYear), axis=1)\n    results = xr.DataArray(results, dims=['month', 'variable'])\n    results.name = 'Record Monthly Low'\n    return results\n\ndef number_of_years_byday(df):\n    \"\"\"Number of years in the historical data records by day of year.\"\"\"\n    numYears = pd.concat([df[[v, 'YearDay']].dropna().groupby('YearDay')\\\n                                        .apply(lambda x: len(x.index.year.unique())) \\\n                         for v in filtered_data.columns if v != 'YearDay'], axis=1)\n    numYears.columns = [v for v in df.columns if v != 'YearDay']\n    results = xr.DataArray(numYears, dims=['yearday', 'variable'])\n    results.name = 'Number of Years'\n    return results\n\ndef number_of_years_bymonth(df):\n    \"\"\"Number of years in the historical data records by month.\"\"\"\n    numYears = pd.concat([df[v].dropna().groupby(df[v].dropna().index.month)\\\n                                        .apply(lambda x: len(x.index.year.unique())) \\\n                         for v in filtered_data.columns if v != 'YearDay'], axis=1)\n    numYears.columns = [v for v in df.columns if v != 'YearDay']\n    results = xr.DataArray(numYears, dims=['month', 'variable'])\n    results.name = 'Number of Years'\n    return results\n\ndef generate_yeardays():\n    return pd.date_range(start='2020-01-01',end='2020-12-31', freq='1D').strftime('%d-%b')\n\n\n\n\nData cleaning\nFirst we need to load in the data and metadata for the desired station. This will be used to determine the directory from which to load the data.\nAs before, stationname is the custom human-readable “City, ST” string for the station. Since we are not downloading data, we do not need the NOAA-COOPS station ID number.\n\nstationname = 'Virginia Key, FL'\n\nDerive the local directory name containing for data from the station name. This is the same way the directory was created when the data were downloaded.\n\ndirname = camel(stationname)\noutdir = os.path.join(os.getcwd(), dirname)\n\nprint(f\"Station folder: {dirname}\")\nprint(f\"Full directory: {outdir}\")\n\nStation folder: virginiaKeyFl\nFull directory: /home/climatology/virginiaKeyFl\n\n\nNext, load the data and metadata.\n\n# Metadata\nwith open(os.path.join(outdir, 'metadata.yml')) as m:\n    meta = yaml.safe_load(m)\n\n# Observational data\ndata = pd.read_csv(os.path.join(outdir, 'observational_data_record.csv.gz'),\n                   index_col=f'time_{meta[\"tz\"]}', parse_dates=True,\n                   compression='infer')\n\nNow we filter the data to remove days with more than 3 hours of missing data and months with more than 2 days of missing data. These thresholds are stored in meta and can easily be changed. We have to do this one variable at a time because this is sensor-dependent, so it takes a short while to run.\n\nfiltered_data = pd.concat([filter_data(data[var],\n                                       hr_threshold=meta['hr_threshold'],\n                                       day_threshold=meta['day_threshold'])\n                                       for var in meta['variables']], axis=1)\n\nConfirm that the data were filtered:\n\ndata.shape\n\n(2466580, 2)\n\n\n\nfiltered_data.shape\n\n(2174766, 2)\n\n\n\n\nCalculate records\nNow we’re ready to determine the records using all of the functions above. We’ll store these in an xarray dataset and add the appropriate metadata for convenience. But first, we need to add a day of year (DOY) column so that we can calculate daily records. We’ve used a function to do this because accounting for leap years is not trivial.\n\nfiltered_data = DOY(filtered_data)\n\n\ndaily_records = \\\n    xr.Dataset({'Daily Average': daily_avg(filtered_data),\n                'Record High Daily Average': record_high_daily_avg(filtered_data),\n                'Record Low Daily Average': record_low_daily_avg(filtered_data),\n                'Average High': avg_daily_high(filtered_data),\n                'Lowest High': lowest_daily_high(filtered_data),\n                'Record High': record_daily_high(filtered_data),\n                'Average Low': avg_daily_low(filtered_data),\n                'Highest Low': highest_daily_low(filtered_data),\n                'Record Low': record_daily_low(filtered_data),\n                'Years': number_of_years_byday(filtered_data)},\n               attrs={k:v for k, v in meta.items() if k not in ['outdir', 'variables', 'units']})\n\n\nmonthly_records = \\\n    xr.Dataset({'Monthly Average': monthly_avg(filtered_data),\n                'Record High Monthly Average': record_high_monthly_avg(filtered_data),\n                'Record Low Monthly Average': record_low_monthly_avg(filtered_data),\n                'Average High': avg_monthly_high(filtered_data),\n                'Lowest High': lowest_monthly_high(filtered_data),\n                'Record High': record_monthly_high(filtered_data),\n                'Average Low': avg_monthly_low(filtered_data),\n                'Highest Low': highest_monthly_low(filtered_data),\n                'Record Low': record_monthly_low(filtered_data),\n                'Years': number_of_years_bymonth(filtered_data)},\n               attrs={k:v for k, v in meta.items() if k not in ['outdir', 'variables', 'units']})\n\nAdd data units and time series ranges for each variable to the arrays as metadata attributes.\n\nfor k, v in meta['units'].items():\n    daily_records.attrs[k+' units'] = v\n\nfor var in daily_records.coords['variable'].values:\n    if 'Year' not in var:\n        daily_records.attrs[var+' data range'] = \\\n            (filtered_data[var].dropna().index.min().strftime('%Y-%m-%d'),\n             filtered_data[var].dropna().index.max().strftime('%Y-%m-%d'))\n\n\nfor k, v in meta['units'].items():\n    monthly_records.attrs[k+' units'] = v\n\nfor var in monthly_records.coords['variable'].values:\n    if 'Year' not in var:\n        monthly_records.attrs[var+' data range'] = \\\n            (filtered_data[var].dropna().index.min().strftime('%Y-%m-%d'),\n             filtered_data[var].dropna().index.max().strftime('%Y-%m-%d'))\n\nWhat do we have now? Let’s take a look:\n\ndaily_records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 120kB\nDimensions:                    (yearday: 366, variable: 4)\nCoordinates:\n  * yearday                    (yearday) int64 3kB 1 2 3 4 5 ... 363 364 365 366\n  * variable                   (variable) object 32B 'Air Temperature' ... 'W...\nData variables:\n    Daily Average              (yearday, variable) float64 12kB 71.5 nan ... nan\n    Record High Daily Average  (yearday, variable) float64 12kB 78.0 ... 2.02...\n    Record Low Daily Average   (yearday, variable) float64 12kB 54.4 ... 2.01...\n    Average High               (yearday, variable) float64 12kB 75.0 nan ... nan\n    Lowest High                (yearday, variable) float64 12kB 63.3 ... 2.01...\n    Record High                (yearday, variable) float64 12kB 79.3 ... 2.02...\n    Average Low                (yearday, variable) float64 12kB 67.9 nan ... nan\n    Highest Low                (yearday, variable) float64 12kB 76.8 ... 2.02...\n    Record Low                 (yearday, variable) float64 12kB 45.5 ... 2.01...\n    Years                      (yearday, variable) float64 12kB 23.0 nan ... nan\nAttributes:\n    datum:                         MHHW\n    day_threshold:                 2\n    hr_threshold:                  3\n    last_updated:                  2024-05-25 10:00:00\n    stationid:                     8723214\n    stationname:                   Virginia Key, FL\n    tz:                            lst\n    unit_system:                   english\n    Air Temperature units:         F\n    Water Temperature units:       F\n    Air Temperature data range:    ('1994-04-01', '2024-04-30')\n    Water Temperature data range:  ('1994-04-01', '2024-04-30')xarray.DatasetDimensions:yearday: 366variable: 4Coordinates: (2)yearday(yearday)int641 2 3 4 5 6 ... 362 363 364 365 366array([  1,   2,   3, ..., 364, 365, 366])variable(variable)object'Air Temperature' ... 'Water Tem...array(['Air Temperature', 'Air Temperature Year', 'Water Temperature',\n       'Water Temperature Year'], dtype=object)Data variables: (10)Daily Average(yearday, variable)float6471.5 nan 72.4 nan ... nan 72.6 nanarray([[71.5,  nan, 72.4,  nan],\n       [71.8,  nan, 72.9,  nan],\n       [70. ,  nan, 73. ,  nan],\n       ...,\n       [70.6,  nan, 72.6,  nan],\n       [69.6,  nan, 72.7,  nan],\n       [70.8,  nan, 72.6,  nan]])Record High Daily Average(yearday, variable)float6478.0 2.022e+03 ... 80.5 2.021e+03array([[  78. , 2022. ,   80.4, 2022. ],\n       [  77.8, 2022. ,   80.2, 2022. ],\n       [  78. , 2015. ,   80.7, 2017. ],\n       ...,\n       [  79.4, 2015. ,   82.6, 2016. ],\n       [  79.5, 2015. ,   81.9, 2016. ],\n       [  79.2, 2015. ,   80.5, 2021. ]])Record Low Daily Average(yearday, variable)float6454.4 2.001e+03 ... 66.1 2.01e+03array([[  54.4, 2001. ,   66.4, 2011. ],\n       [  56.6, 2010. ,   66.8, 2011. ],\n       [  51.7, 2012. ,   67.3, 2011. ],\n       ...,\n       [  58.7, 2009. ,   66.6, 1995. ],\n       [  54.8, 2000. ,   66.4, 2010. ],\n       [  49.9, 2000. ,   66.1, 2010. ]])Average High(yearday, variable)float6475.0 nan 73.7 nan ... nan 73.9 nanarray([[75. ,  nan, 73.7,  nan],\n       [75.1,  nan, 74.2,  nan],\n       [73.9,  nan, 74.3,  nan],\n       ...,\n       [74.4,  nan, 74.1,  nan],\n       [73.2,  nan, 74.1,  nan],\n       [74.3,  nan, 73.9,  nan]])Lowest High(yearday, variable)float6463.3 2.001e+03 ... 67.8 2.01e+03array([[  63.3, 2001. ,   67.8, 2011. ],\n       [  64.2, 2010. ,   68. , 2011. ],\n       [  57. , 2012. ,   68.9, 2011. ],\n       ...,\n       [  67.1, 2010. ,   69.4, 2003. ],\n       [  59.5, 2000. ,   68.4, 2010. ],\n       [  55.6, 2000. ,   67.8, 2010. ]])Record High(yearday, variable)float6479.3 2.022e+03 ... 81.7 2.021e+03array([[  79.3, 2022. ,   81.1, 2022. ],\n       [  79.3, 2022. ,   81. , 2022. ],\n       [  79.2, 2019. ,   81.5, 2017. ],\n       ...,\n       [  80.6, 2015. ,   83.3, 2016. ],\n       [  80.6, 2013. ,   83.1, 2016. ],\n       [  80.1, 2015. ,   81.7, 2021. ]])Average Low(yearday, variable)float6467.9 nan 71.1 nan ... nan 71.4 nanarray([[67.9,  nan, 71.1,  nan],\n       [68.5,  nan, 71.6,  nan],\n       [66.1,  nan, 71.7,  nan],\n       ...,\n       [66.7,  nan, 71.2,  nan],\n       [66.1,  nan, 71.4,  nan],\n       [67.3,  nan, 71.4,  nan]])Highest Low(yearday, variable)float6476.8 2.022e+03 ... 79.3 2.021e+03array([[  76.8, 2022. ,   79.7, 2022. ],\n       [  76.3, 2017. ,   79.5, 2022. ],\n       [  77. , 2015. ,   79.9, 2017. ],\n       ...,\n       [  78.3, 2015. ,   81.9, 2016. ],\n       [  78.4, 2015. ,   80.8, 2016. ],\n       [  78.3, 2015. ,   79.3, 2021. ]])Record Low(yearday, variable)float6445.5 2.001e+03 ... 64.4 2.01e+03array([[  45.5, 2001. ,   63.9, 2001. ],\n       [  49.1, 2010. ,   64.4, 2001. ],\n       [  46.4, 2012. ,   65.5, 2001. ],\n       ...,\n       [  50.1, 2009. ,   62.2, 2010. ],\n       [  50. , 2000. ,   64.4, 2010. ],\n       [  44.2, 2000. ,   64.4, 2010. ]])Years(yearday, variable)float6423.0 nan 24.0 nan ... nan 24.0 nanarray([[23., nan, 24., nan],\n       [23., nan, 24., nan],\n       [23., nan, 24., nan],\n       ...,\n       [24., nan, 24., nan],\n       [24., nan, 24., nan],\n       [23., nan, 24., nan]])Indexes: (2)yeardayPandasIndexPandasIndex(Int64Index([  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,\n            ...\n            357, 358, 359, 360, 361, 362, 363, 364, 365, 366],\n           dtype='int64', name='yearday', length=366))variablePandasIndexPandasIndex(Index(['Air Temperature', 'Air Temperature Year', 'Water Temperature',\n       'Water Temperature Year'],\n      dtype='object', name='variable'))Attributes: (12)datum :MHHWday_threshold :2hr_threshold :3last_updated :2024-05-25 10:00:00stationid :8723214stationname :Virginia Key, FLtz :lstunit_system :englishAir Temperature units :FWater Temperature units :FAir Temperature data range :('1994-04-01', '2024-04-30')Water Temperature data range :('1994-04-01', '2024-04-30')\n\n\n\nmonthly_records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 4kB\nDimensions:                      (month: 12, variable: 4)\nCoordinates:\n  * month                        (month) int64 96B 1 2 3 4 5 6 7 8 9 10 11 12\n  * variable                     (variable) object 32B 'Air Temperature' ... ...\nData variables:\n    Monthly Average              (month, variable) float64 384B 68.7 nan ... nan\n    Record High Monthly Average  (month, variable) float64 384B 72.6 ... 2.01...\n    Record Low Monthly Average   (month, variable) float64 384B 63.0 ... 2.01...\n    Average High                 (month, variable) float64 384B 76.0 nan ... nan\n    Lowest High                  (month, variable) float64 384B 73.0 ... 2.00...\n    Record High                  (month, variable) float64 384B 78.0 ... 2.01...\n    Average Low                  (month, variable) float64 384B 55.6 nan ... nan\n    Highest Low                  (month, variable) float64 384B 63.5 ... 2.01...\n    Record Low                   (month, variable) float64 384B 48.3 ... 2.01...\n    Years                        (month, variable) float64 384B 23.0 nan ... nan\nAttributes:\n    datum:                         MHHW\n    day_threshold:                 2\n    hr_threshold:                  3\n    last_updated:                  2024-05-25 10:00:00\n    stationid:                     8723214\n    stationname:                   Virginia Key, FL\n    tz:                            lst\n    unit_system:                   english\n    Air Temperature units:         F\n    Water Temperature units:       F\n    Air Temperature data range:    ('1994-04-01', '2024-04-30')\n    Water Temperature data range:  ('1994-04-01', '2024-04-30')xarray.DatasetDimensions:month: 12variable: 4Coordinates: (2)month(month)int641 2 3 4 5 6 7 8 9 10 11 12array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])variable(variable)object'Air Temperature' ... 'Water Tem...array(['Air Temperature', 'Air Temperature Year', 'Water Temperature',\n       'Water Temperature Year'], dtype=object)Data variables: (10)Monthly Average(month, variable)float6468.7 nan 71.6 nan ... nan 74.0 nanarray([[68.7,  nan, 71.6,  nan],\n       [70.8,  nan, 72.8,  nan],\n       [72.3,  nan, 75. ,  nan],\n       [75.6,  nan, 78.5,  nan],\n       [78.7,  nan, 82. ,  nan],\n       [81.5,  nan, 85.2,  nan],\n       [82.9,  nan, 87.1,  nan],\n       [83.2,  nan, 87.3,  nan],\n       [82. ,  nan, 85.7,  nan],\n       [79.6,  nan, 82.1,  nan],\n       [75. ,  nan, 77.4,  nan],\n       [71.4,  nan, 74. ,  nan]])Record High Monthly Average(month, variable)float6472.6 2.013e+03 ... 82.5 2.016e+03array([[  72.6, 2013. ,   78.9, 2017. ],\n       [  74.9, 2018. ,   76.3, 2021. ],\n       [  77.6, 2003. ,   80. , 2003. ],\n       [  79.4, 2020. ,   83.4, 2020. ],\n       [  80.7, 1995. ,   84.1, 2021. ],\n       [  83.6, 2010. ,   87.6, 2010. ],\n       [  85. , 2023. ,   89.5, 2023. ],\n       [  85.9, 2022. ,   90.1, 2021. ],\n       [  82.7, 2017. ,   89.5, 2021. ],\n       [  81.2, 2020. ,   85.9, 2021. ],\n       [  78.6, 2015. ,   81.5, 2016. ],\n       [  76.9, 2015. ,   82.5, 2016. ]])Record Low Monthly Average(month, variable)float6463.0 2.001e+03 ... 68.2 2.01e+03array([[  63. , 2001. ,   67.5, 2001. ],\n       [  65.5, 1996. ,   67.7, 2005. ],\n       [  66.1, 2010. ,   69.2, 2010. ],\n       [  72.8, 2004. ,   75.1, 2004. ],\n       [  77. , 2013. ,   78.6, 2001. ],\n       [  79.8, 2014. ,   83.3, 2002. ],\n       [  81. , 2013. ,   84.5, 2013. ],\n       [  81.8, 1994. ,   85.4, 1995. ],\n       [  80.6, 2001. ,   82.7, 2004. ],\n       [  77.5, 2000. ,   79.6, 2000. ],\n       [  71.4, 2012. ,   74.6, 2012. ],\n       [  62.1, 2010. ,   68.2, 2010. ]])Average High(month, variable)float6476.0 nan 75.4 nan ... nan 77.6 nanarray([[76. ,  nan, 75.4,  nan],\n       [76.5,  nan, 76.7,  nan],\n       [78.5,  nan, 79.2,  nan],\n       [80.8,  nan, 81.9,  nan],\n       [82.5,  nan, 85.1,  nan],\n       [84.8,  nan, 87.9,  nan],\n       [85.8,  nan, 89.1,  nan],\n       [85.7,  nan, 89.4,  nan],\n       [85.1,  nan, 88. ,  nan],\n       [83.8,  nan, 85.6,  nan],\n       [79.7,  nan, 80.6,  nan],\n       [77.5,  nan, 77.6,  nan]])Lowest High(month, variable)float6473.0 2.011e+03 ... 73.0 2.003e+03array([[  73. , 2011. ,   70.5, 2011. ],\n       [  74.2, 2000. ,   73.7, 2016. ],\n       [  74.2, 2010. ,   73.3, 2010. ],\n       [  77.3, 2004. ,   78.4, 2010. ],\n       [  80.8, 2014. ,   82.8, 2013. ],\n       [  82.8, 2014. ,   85.3, 1996. ],\n       [  84.2, 2012. ,   86.4, 2013. ],\n       [  84. , 2003. ,   87.2, 2000. ],\n       [  83.9, 2000. ,   85.2, 1997. ],\n       [  81. , 2010. ,   82.7, 2004. ],\n       [  76.9, 2012. ,   76.8, 2001. ],\n       [  72.5, 2010. ,   73. , 2003. ]])Record High(month, variable)float6478.0 2.015e+03 ... 84.6 2.016e+03array([[  78. , 2015. ,   81.7, 2017. ],\n       [  78.6, 2021. ,   81.5, 2021. ],\n       [  82.8, 2003. ,   83.2, 2021. ],\n       [  85.8, 2020. ,   85.8, 2020. ],\n       [  85.2, 1995. ,   87.7, 2021. ],\n       [  87.6, 2009. ,   90.4, 2010. ],\n       [  88.7, 2018. ,   92. , 2021. ],\n       [  88.5, 2022. ,   92.2, 2021. ],\n       [  86.7, 2021. ,   91.2, 2021. ],\n       [  86.8, 2023. ,   89. , 2016. ],\n       [  82. , 2020. ,   85. , 2020. ],\n       [  79.6, 1994. ,   84.6, 2016. ]])Average Low(month, variable)float6455.6 nan 67.6 nan ... nan 70.2 nanarray([[55.6,  nan, 67.6,  nan],\n       [59.4,  nan, 68.9,  nan],\n       [63.3,  nan, 70.9,  nan],\n       [68.3,  nan, 74.6,  nan],\n       [73.8,  nan, 78.1,  nan],\n       [77.6,  nan, 82.2,  nan],\n       [79. ,  nan, 84.5,  nan],\n       [79.3,  nan, 84.4,  nan],\n       [78.2,  nan, 83. ,  nan],\n       [72.7,  nan, 77.9,  nan],\n       [66. ,  nan, 74.2,  nan],\n       [59.2,  nan, 70.2,  nan]])Highest Low(month, variable)float6463.5 2.013e+03 ... 79.6 2.016e+03array([[  63.5, 2013. ,   75.9, 2017. ],\n       [  70. , 2018. ,   73.4, 2023. ],\n       [  72. , 1997. ,   75.4, 1997. ],\n       [  72.6, 2015. ,   81.1, 2020. ],\n       [  77.1, 2003. ,   80.4, 1994. ],\n       [  80.8, 2004. ,   85.2, 2004. ],\n       [  82.3, 2022. ,   87.2, 2023. ],\n       [  83.6, 2022. ,   87.2, 2021. ],\n       [  79.8, 2009. ,   87.1, 2021. ],\n       [  77.8, 1995. ,   83.4, 2021. ],\n       [  74.4, 2020. ,   80. , 2016. ],\n       [  70.5, 2015. ,   79.6, 2016. ]])Record Low(month, variable)float6448.3 1.997e+03 ... 63.7 2.01e+03array([[  48.3, 1997. ,   64. , 2003. ],\n       [  47.9, 1996. ,   63.2, 2005. ],\n       [  55.1, 1996. ,   64.8, 2010. ],\n       [  61.2, 2009. ,   69.4, 2003. ],\n       [  67.9, 1999. ,   74.1, 2001. ],\n       [  75.1, 1995. ,   80. , 1996. ],\n       [  76.1, 2013. ,   80.9, 2013. ],\n       [  76.1, 1996. ,   81. , 2012. ],\n       [  74.3, 2001. ,   79.5, 2004. ],\n       [  64.6, 2005. ,   73.2, 2005. ],\n       [  57.4, 2006. ,   70.8, 2000. ],\n       [  48.8, 2010. ,   63.7, 2010. ]])Years(month, variable)float6423.0 nan 24.0 nan ... nan 24.0 nanarray([[23., nan, 24., nan],\n       [23., nan, 21., nan],\n       [24., nan, 25., nan],\n       [24., nan, 25., nan],\n       [21., nan, 23., nan],\n       [20., nan, 23., nan],\n       [25., nan, 25., nan],\n       [24., nan, 25., nan],\n       [24., nan, 24., nan],\n       [23., nan, 23., nan],\n       [23., nan, 24., nan],\n       [24., nan, 24., nan]])Indexes: (2)monthPandasIndexPandasIndex(Int64Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], dtype='int64', name='month'))variablePandasIndexPandasIndex(Index(['Air Temperature', 'Air Temperature Year', 'Water Temperature',\n       'Water Temperature Year'],\n      dtype='object', name='variable'))Attributes: (12)datum :MHHWday_threshold :2hr_threshold :3last_updated :2024-05-25 10:00:00stationid :8723214stationname :Virginia Key, FLtz :lstunit_system :englishAir Temperature units :FWater Temperature units :FAir Temperature data range :('1994-04-01', '2024-04-30')Water Temperature data range :('1994-04-01', '2024-04-30')\n\n\nHow are these stored? Let’s consider the monthly stats. Each statistic is its own variable within the dataset. Take Record High for example:\n\nmonthly_records['Record High']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'Record High' (month: 12, variable: 4)&gt; Size: 384B\narray([[  78. , 2015. ,   81.7, 2017. ],\n       [  78.6, 2021. ,   81.5, 2021. ],\n       [  82.8, 2003. ,   83.2, 2021. ],\n       [  85.8, 2020. ,   85.8, 2020. ],\n       [  85.2, 1995. ,   87.7, 2021. ],\n       [  87.6, 2009. ,   90.4, 2010. ],\n       [  88.7, 2018. ,   92. , 2021. ],\n       [  88.5, 2022. ,   92.2, 2021. ],\n       [  86.7, 2021. ,   91.2, 2021. ],\n       [  86.8, 2023. ,   89. , 2016. ],\n       [  82. , 2020. ,   85. , 2020. ],\n       [  79.6, 1994. ,   84.6, 2016. ]])\nCoordinates:\n  * month     (month) int64 96B 1 2 3 4 5 6 7 8 9 10 11 12\n  * variable  (variable) object 32B 'Air Temperature' ... 'Water Temperature ...xarray.DataArray'Record High'month: 12variable: 478.0 2.015e+03 81.7 2.017e+03 78.6 ... 79.6 1.994e+03 84.6 2.016e+03array([[  78. , 2015. ,   81.7, 2017. ],\n       [  78.6, 2021. ,   81.5, 2021. ],\n       [  82.8, 2003. ,   83.2, 2021. ],\n       [  85.8, 2020. ,   85.8, 2020. ],\n       [  85.2, 1995. ,   87.7, 2021. ],\n       [  87.6, 2009. ,   90.4, 2010. ],\n       [  88.7, 2018. ,   92. , 2021. ],\n       [  88.5, 2022. ,   92.2, 2021. ],\n       [  86.7, 2021. ,   91.2, 2021. ],\n       [  86.8, 2023. ,   89. , 2016. ],\n       [  82. , 2020. ,   85. , 2020. ],\n       [  79.6, 1994. ,   84.6, 2016. ]])Coordinates: (2)month(month)int641 2 3 4 5 6 7 8 9 10 11 12array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])variable(variable)object'Air Temperature' ... 'Water Tem...array(['Air Temperature', 'Air Temperature Year', 'Water Temperature',\n       'Water Temperature Year'], dtype=object)Indexes: (2)monthPandasIndexPandasIndex(Int64Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], dtype='int64', name='month'))variablePandasIndexPandasIndex(Index(['Air Temperature', 'Air Temperature Year', 'Water Temperature',\n       'Water Temperature Year'],\n      dtype='object', name='variable'))Attributes: (0)\n\n\nHere, the rows are months and the columns are the records or corresponding year. Let’s see what the variables are:\n\nmonthly_records['Record High'].coords['variable']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'variable' (variable: 4)&gt; Size: 32B\narray(['Air Temperature', 'Air Temperature Year', 'Water Temperature',\n       'Water Temperature Year'], dtype=object)\nCoordinates:\n  * variable  (variable) object 32B 'Air Temperature' ... 'Water Temperature ...xarray.DataArray'variable'variable: 4'Air Temperature' 'Air Temperature Year' ... 'Water Temperature Year'array(['Air Temperature', 'Air Temperature Year', 'Water Temperature',\n       'Water Temperature Year'], dtype=object)Coordinates: (1)variable(variable)object'Air Temperature' ... 'Water Tem...array(['Air Temperature', 'Air Temperature Year', 'Water Temperature',\n       'Water Temperature Year'], dtype=object)Indexes: (1)variablePandasIndexPandasIndex(Index(['Air Temperature', 'Air Temperature Year', 'Water Temperature',\n       'Water Temperature Year'],\n      dtype='object', name='variable'))Attributes: (0)\n\n\nAlternatively, we can select a specific variable and see all of its stats (converting to a dataframe makes it easier to see):\n\nmonthly_records.sel(variable='Air Temperature').to_dataframe().drop('variable', axis=1)\n\n\n\n\n\n\n\n\nMonthly Average\nRecord High Monthly Average\nRecord Low Monthly Average\nAverage High\nLowest High\nRecord High\nAverage Low\nHighest Low\nRecord Low\nYears\n\n\nmonth\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n68.7\n72.6\n63.0\n76.0\n73.0\n78.0\n55.6\n63.5\n48.3\n23.0\n\n\n2\n70.8\n74.9\n65.5\n76.5\n74.2\n78.6\n59.4\n70.0\n47.9\n23.0\n\n\n3\n72.3\n77.6\n66.1\n78.5\n74.2\n82.8\n63.3\n72.0\n55.1\n24.0\n\n\n4\n75.6\n79.4\n72.8\n80.8\n77.3\n85.8\n68.3\n72.6\n61.2\n24.0\n\n\n5\n78.7\n80.7\n77.0\n82.5\n80.8\n85.2\n73.8\n77.1\n67.9\n21.0\n\n\n6\n81.5\n83.6\n79.8\n84.8\n82.8\n87.6\n77.6\n80.8\n75.1\n20.0\n\n\n7\n82.9\n85.0\n81.0\n85.8\n84.2\n88.7\n79.0\n82.3\n76.1\n25.0\n\n\n8\n83.2\n85.9\n81.8\n85.7\n84.0\n88.5\n79.3\n83.6\n76.1\n24.0\n\n\n9\n82.0\n82.7\n80.6\n85.1\n83.9\n86.7\n78.2\n79.8\n74.3\n24.0\n\n\n10\n79.6\n81.2\n77.5\n83.8\n81.0\n86.8\n72.7\n77.8\n64.6\n23.0\n\n\n11\n75.0\n78.6\n71.4\n79.7\n76.9\n82.0\n66.0\n74.4\n57.4\n23.0\n\n\n12\n71.4\n76.9\n62.1\n77.5\n72.5\n79.6\n59.2\n70.5\n48.8\n24.0\n\n\n\n\n\n\n\n\n\nReorganize\nFor the sake of convenience later, let’s rearrange these data arrays before saving them. It will be more useful to have record years as data variables instead of a dimension, but we’ll have to do some renaming in order to pull that off.\nFirst, separate the records and years into smaller xarrays:\n\nday_records = daily_records.sel(variable=[i for i in daily_records.coords['variable'].values if 'Year' not in i])\nday_years = daily_records.sel(variable=[i for i in daily_records.coords['variable'].values if 'Year' in i])\n\nmon_records = monthly_records.sel(variable=[i for i in monthly_records.coords['variable'].values if 'Year' not in i])\nmon_years = monthly_records.sel(variable=[i for i in monthly_records.coords['variable'].values if 'Year' in i])\n\nNext, add “Year” to all of the variable names and remove it from the coordinate name:\n\nday_years = day_years.rename_vars({i:i+' Year' for i in day_years.data_vars})\nday_years.coords['variable'] = [i.removesuffix(' Year') for i in day_years.coords['variable'].values]\n\nmon_years = mon_years.rename_vars({i:i+' Year' for i in mon_years.data_vars})\nmon_years.coords['variable'] = [i.removesuffix(' Year') for i in mon_years.coords['variable'].values]\n\nNow we can merge these two xarrays together, rearrange the order of the variables, and drop those that do not contain a year, such as daily average.\n\ndaily_records = xr.merge([day_records, day_years])\ndaily_records = daily_records[[item for items in zip(day_records.data_vars, day_years.data_vars) for item in items]]\ndaily_records = daily_records.drop_vars([x for x in daily_records.data_vars if daily_records[x].isnull().all()])\n\nmonthly_records = xr.merge([mon_records, mon_years])\nmonthly_records = monthly_records[[item for items in zip(mon_records.data_vars, mon_years.data_vars) for item in items]]\nmonthly_records = monthly_records.drop_vars([x for x in monthly_records.data_vars if monthly_records[x].isnull().all()])\n\n\nmonthly_records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 3kB\nDimensions:                           (month: 12, variable: 2)\nCoordinates:\n  * month                             (month) int64 96B 1 2 3 4 5 ... 9 10 11 12\n  * variable                          (variable) object 16B 'Air Temperature'...\nData variables: (12/16)\n    Monthly Average                   (month, variable) float64 192B 68.7 ......\n    Record High Monthly Average       (month, variable) float64 192B 72.6 ......\n    Record High Monthly Average Year  (month, variable) float64 192B 2.013e+0...\n    Record Low Monthly Average        (month, variable) float64 192B 63.0 ......\n    Record Low Monthly Average Year   (month, variable) float64 192B 2.001e+0...\n    Average High                      (month, variable) float64 192B 76.0 ......\n    ...                                ...\n    Average Low                       (month, variable) float64 192B 55.6 ......\n    Highest Low                       (month, variable) float64 192B 63.5 ......\n    Highest Low Year                  (month, variable) float64 192B 2.013e+0...\n    Record Low                        (month, variable) float64 192B 48.3 ......\n    Record Low Year                   (month, variable) float64 192B 1.997e+0...\n    Years                             (month, variable) float64 192B 23.0 ......\nAttributes:\n    datum:                         MHHW\n    day_threshold:                 2\n    hr_threshold:                  3\n    last_updated:                  2024-05-25 10:00:00\n    stationid:                     8723214\n    stationname:                   Virginia Key, FL\n    tz:                            lst\n    unit_system:                   english\n    Air Temperature units:         F\n    Water Temperature units:       F\n    Air Temperature data range:    ('1994-04-01', '2024-04-30')\n    Water Temperature data range:  ('1994-04-01', '2024-04-30')xarray.DatasetDimensions:month: 12variable: 2Coordinates: (2)month(month)int641 2 3 4 5 6 7 8 9 10 11 12array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])variable(variable)object'Air Temperature' 'Water Tempera...array(['Air Temperature', 'Water Temperature'], dtype=object)Data variables: (16)Monthly Average(month, variable)float6468.7 71.6 70.8 ... 77.4 71.4 74.0array([[68.7, 71.6],\n       [70.8, 72.8],\n       [72.3, 75. ],\n       [75.6, 78.5],\n       [78.7, 82. ],\n       [81.5, 85.2],\n       [82.9, 87.1],\n       [83.2, 87.3],\n       [82. , 85.7],\n       [79.6, 82.1],\n       [75. , 77.4],\n       [71.4, 74. ]])Record High Monthly Average(month, variable)float6472.6 78.9 74.9 ... 81.5 76.9 82.5array([[72.6, 78.9],\n       [74.9, 76.3],\n       [77.6, 80. ],\n       [79.4, 83.4],\n       [80.7, 84.1],\n       [83.6, 87.6],\n       [85. , 89.5],\n       [85.9, 90.1],\n       [82.7, 89.5],\n       [81.2, 85.9],\n       [78.6, 81.5],\n       [76.9, 82.5]])Record High Monthly Average Year(month, variable)float642.013e+03 2.017e+03 ... 2.016e+03array([[2013., 2017.],\n       [2018., 2021.],\n       [2003., 2003.],\n       [2020., 2020.],\n       [1995., 2021.],\n       [2010., 2010.],\n       [2023., 2023.],\n       [2022., 2021.],\n       [2017., 2021.],\n       [2020., 2021.],\n       [2015., 2016.],\n       [2015., 2016.]])Record Low Monthly Average(month, variable)float6463.0 67.5 65.5 ... 74.6 62.1 68.2array([[63. , 67.5],\n       [65.5, 67.7],\n       [66.1, 69.2],\n       [72.8, 75.1],\n       [77. , 78.6],\n       [79.8, 83.3],\n       [81. , 84.5],\n       [81.8, 85.4],\n       [80.6, 82.7],\n       [77.5, 79.6],\n       [71.4, 74.6],\n       [62.1, 68.2]])Record Low Monthly Average Year(month, variable)float642.001e+03 2.001e+03 ... 2.01e+03array([[2001., 2001.],\n       [1996., 2005.],\n       [2010., 2010.],\n       [2004., 2004.],\n       [2013., 2001.],\n       [2014., 2002.],\n       [2013., 2013.],\n       [1994., 1995.],\n       [2001., 2004.],\n       [2000., 2000.],\n       [2012., 2012.],\n       [2010., 2010.]])Average High(month, variable)float6476.0 75.4 76.5 ... 80.6 77.5 77.6array([[76. , 75.4],\n       [76.5, 76.7],\n       [78.5, 79.2],\n       [80.8, 81.9],\n       [82.5, 85.1],\n       [84.8, 87.9],\n       [85.8, 89.1],\n       [85.7, 89.4],\n       [85.1, 88. ],\n       [83.8, 85.6],\n       [79.7, 80.6],\n       [77.5, 77.6]])Lowest High(month, variable)float6473.0 70.5 74.2 ... 76.8 72.5 73.0array([[73. , 70.5],\n       [74.2, 73.7],\n       [74.2, 73.3],\n       [77.3, 78.4],\n       [80.8, 82.8],\n       [82.8, 85.3],\n       [84.2, 86.4],\n       [84. , 87.2],\n       [83.9, 85.2],\n       [81. , 82.7],\n       [76.9, 76.8],\n       [72.5, 73. ]])Lowest High Year(month, variable)float642.011e+03 2.011e+03 ... 2.003e+03array([[2011., 2011.],\n       [2000., 2016.],\n       [2010., 2010.],\n       [2004., 2010.],\n       [2014., 2013.],\n       [2014., 1996.],\n       [2012., 2013.],\n       [2003., 2000.],\n       [2000., 1997.],\n       [2010., 2004.],\n       [2012., 2001.],\n       [2010., 2003.]])Record High(month, variable)float6478.0 81.7 78.6 ... 85.0 79.6 84.6array([[78. , 81.7],\n       [78.6, 81.5],\n       [82.8, 83.2],\n       [85.8, 85.8],\n       [85.2, 87.7],\n       [87.6, 90.4],\n       [88.7, 92. ],\n       [88.5, 92.2],\n       [86.7, 91.2],\n       [86.8, 89. ],\n       [82. , 85. ],\n       [79.6, 84.6]])Record High Year(month, variable)float642.015e+03 2.017e+03 ... 2.016e+03array([[2015., 2017.],\n       [2021., 2021.],\n       [2003., 2021.],\n       [2020., 2020.],\n       [1995., 2021.],\n       [2009., 2010.],\n       [2018., 2021.],\n       [2022., 2021.],\n       [2021., 2021.],\n       [2023., 2016.],\n       [2020., 2020.],\n       [1994., 2016.]])Average Low(month, variable)float6455.6 67.6 59.4 ... 74.2 59.2 70.2array([[55.6, 67.6],\n       [59.4, 68.9],\n       [63.3, 70.9],\n       [68.3, 74.6],\n       [73.8, 78.1],\n       [77.6, 82.2],\n       [79. , 84.5],\n       [79.3, 84.4],\n       [78.2, 83. ],\n       [72.7, 77.9],\n       [66. , 74.2],\n       [59.2, 70.2]])Highest Low(month, variable)float6463.5 75.9 70.0 ... 80.0 70.5 79.6array([[63.5, 75.9],\n       [70. , 73.4],\n       [72. , 75.4],\n       [72.6, 81.1],\n       [77.1, 80.4],\n       [80.8, 85.2],\n       [82.3, 87.2],\n       [83.6, 87.2],\n       [79.8, 87.1],\n       [77.8, 83.4],\n       [74.4, 80. ],\n       [70.5, 79.6]])Highest Low Year(month, variable)float642.013e+03 2.017e+03 ... 2.016e+03array([[2013., 2017.],\n       [2018., 2023.],\n       [1997., 1997.],\n       [2015., 2020.],\n       [2003., 1994.],\n       [2004., 2004.],\n       [2022., 2023.],\n       [2022., 2021.],\n       [2009., 2021.],\n       [1995., 2021.],\n       [2020., 2016.],\n       [2015., 2016.]])Record Low(month, variable)float6448.3 64.0 47.9 ... 70.8 48.8 63.7array([[48.3, 64. ],\n       [47.9, 63.2],\n       [55.1, 64.8],\n       [61.2, 69.4],\n       [67.9, 74.1],\n       [75.1, 80. ],\n       [76.1, 80.9],\n       [76.1, 81. ],\n       [74.3, 79.5],\n       [64.6, 73.2],\n       [57.4, 70.8],\n       [48.8, 63.7]])Record Low Year(month, variable)float641.997e+03 2.003e+03 ... 2.01e+03array([[1997., 2003.],\n       [1996., 2005.],\n       [1996., 2010.],\n       [2009., 2003.],\n       [1999., 2001.],\n       [1995., 1996.],\n       [2013., 2013.],\n       [1996., 2012.],\n       [2001., 2004.],\n       [2005., 2005.],\n       [2006., 2000.],\n       [2010., 2010.]])Years(month, variable)float6423.0 24.0 23.0 ... 24.0 24.0 24.0array([[23., 24.],\n       [23., 21.],\n       [24., 25.],\n       [24., 25.],\n       [21., 23.],\n       [20., 23.],\n       [25., 25.],\n       [24., 25.],\n       [24., 24.],\n       [23., 23.],\n       [23., 24.],\n       [24., 24.]])Indexes: (2)monthPandasIndexPandasIndex(Int64Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], dtype='int64', name='month'))variablePandasIndexPandasIndex(Index(['Air Temperature', 'Water Temperature'], dtype='object', name='variable'))Attributes: (12)datum :MHHWday_threshold :2hr_threshold :3last_updated :2024-05-25 10:00:00stationid :8723214stationname :Virginia Key, FLtz :lstunit_system :englishAir Temperature units :FWater Temperature units :FAir Temperature data range :('1994-04-01', '2024-04-30')Water Temperature data range :('1994-04-01', '2024-04-30')\n\n\nFinally, let’s convert years to integers since we do not need decimal years.\n\ndaily_records[[i for i in daily_records.data_vars if \"Year\" in i]] = \\\n    daily_records[[i for i in daily_records.data_vars if \"Year\" in i]].astype(int)\n\nmonthly_records[[i for i in monthly_records.data_vars if \"Year\" in i]] = \\\n    monthly_records[[i for i in monthly_records.data_vars if \"Year\" in i]].astype(int)\n\n‘yearday’ is not intuitive, so we can change it to calendar day instead and rename the coordinate. Similarly, we can use month names instead of numbers for the sake of clarity.\n\ndaily_records.coords['yearday'] = pd.date_range(start='2020-01-01', end='2020-12-31', freq='1D').strftime('%d-%b')\ndaily_records = daily_records.rename({'yearday':'Date'})\n\nmonthly_records.coords['month'] = pd.date_range(start='2020-01-01', end='2020-12-31', freq='1m').strftime('%b')\nmonthly_records = monthly_records.rename({'month': 'Month'})\n\nNow take a look at the final products\n\ndaily_records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 97kB\nDimensions:                         (Date: 366, variable: 2)\nCoordinates:\n  * variable                        (variable) object 16B 'Air Temperature' '...\n  * Date                            (Date) object 3kB '01-Jan' ... '31-Dec'\nData variables: (12/16)\n    Daily Average                   (Date, variable) float64 6kB 71.5 ... 72.6\n    Record High Daily Average       (Date, variable) float64 6kB 78.0 ... 80.5\n    Record High Daily Average Year  (Date, variable) int64 6kB 2022 ... 2021\n    Record Low Daily Average        (Date, variable) float64 6kB 54.4 ... 66.1\n    Record Low Daily Average Year   (Date, variable) int64 6kB 2001 ... 2010\n    Average High                    (Date, variable) float64 6kB 75.0 ... 73.9\n    ...                              ...\n    Average Low                     (Date, variable) float64 6kB 67.9 ... 71.4\n    Highest Low                     (Date, variable) float64 6kB 76.8 ... 79.3\n    Highest Low Year                (Date, variable) int64 6kB 2022 ... 2021\n    Record Low                      (Date, variable) float64 6kB 45.5 ... 64.4\n    Record Low Year                 (Date, variable) int64 6kB 2001 ... 2010\n    Years                           (Date, variable) int64 6kB 23 24 ... 23 24\nAttributes:\n    datum:                         MHHW\n    day_threshold:                 2\n    hr_threshold:                  3\n    last_updated:                  2024-05-25 10:00:00\n    stationid:                     8723214\n    stationname:                   Virginia Key, FL\n    tz:                            lst\n    unit_system:                   english\n    Air Temperature units:         F\n    Water Temperature units:       F\n    Air Temperature data range:    ('1994-04-01', '2024-04-30')\n    Water Temperature data range:  ('1994-04-01', '2024-04-30')xarray.DatasetDimensions:Date: 366variable: 2Coordinates: (2)variable(variable)object'Air Temperature' 'Water Tempera...array(['Air Temperature', 'Water Temperature'], dtype=object)Date(Date)object'01-Jan' '02-Jan' ... '31-Dec'array(['01-Jan', '02-Jan', '03-Jan', ..., '29-Dec', '30-Dec', '31-Dec'],\n      dtype=object)Data variables: (16)Daily Average(Date, variable)float6471.5 72.4 71.8 ... 72.7 70.8 72.6array([[71.5, 72.4],\n       [71.8, 72.9],\n       [70. , 73. ],\n       [69.3, 72.7],\n       [68.2, 72.5],\n       [69.1, 72.3],\n       [68.4, 72.3],\n       [67.4, 72. ],\n       [68. , 71.7],\n       [68.3, 71.6],\n       [70.3, 71.6],\n       [70.7, 71.8],\n       [69.6, 71.9],\n       [68.6, 71.7],\n       [69.6, 71.4],\n       [69.3, 71.4],\n       [67.5, 71.1],\n       [67.6, 70.7],\n       [68. , 70.9],\n       [68.1, 71. ],\n...\n       [72.1, 74.8],\n       [73. , 74.8],\n       [72.9, 74.7],\n       [71. , 74.2],\n       [71.7, 74.3],\n       [71.8, 74.2],\n       [70.9, 74.2],\n       [70.3, 73.9],\n       [69.1, 73.4],\n       [69. , 72.9],\n       [70.3, 72.8],\n       [71.7, 72.9],\n       [71.6, 72.9],\n       [70.6, 72.7],\n       [69.6, 72.6],\n       [68.1, 72.3],\n       [69.4, 72.5],\n       [70.6, 72.6],\n       [69.6, 72.7],\n       [70.8, 72.6]])Record High Daily Average(Date, variable)float6478.0 80.4 77.8 ... 81.9 79.2 80.5array([[78. , 80.4],\n       [77.8, 80.2],\n       [78. , 80.7],\n       [77.9, 81.2],\n       [77.3, 81.4],\n       [76.8, 81.7],\n       [77.4, 81.5],\n       [76.8, 78.8],\n       [77.1, 78.2],\n       [76.9, 78.2],\n       [76.6, 78.2],\n       [77.4, 77.2],\n       [76.3, 77.4],\n       [76.7, 77.8],\n       [76. , 78. ],\n       [76. , 78. ],\n       [74.8, 77.4],\n       [75.8, 78.6],\n       [74.5, 79.8],\n       [74.1, 80.4],\n...\n       [78.8, 81.7],\n       [78.8, 82.6],\n       [78. , 83.3],\n       [78.4, 83.3],\n       [78.4, 82.8],\n       [79.1, 82.2],\n       [78.8, 82.4],\n       [78.9, 83.1],\n       [78.3, 83.2],\n       [77.6, 83.4],\n       [78.4, 83. ],\n       [79. , 83.2],\n       [79.2, 83. ],\n       [79. , 82.8],\n       [78.6, 82.3],\n       [78.4, 81.8],\n       [79. , 82.2],\n       [79.4, 82.6],\n       [79.5, 81.9],\n       [79.2, 80.5]])Record High Daily Average Year(Date, variable)int642022 2022 2022 ... 2016 2015 2021array([[2022, 2022],\n       [2022, 2022],\n       [2015, 2017],\n       [2015, 2017],\n       [2015, 2017],\n       [2015, 2017],\n       [2007, 2017],\n       [2007, 2017],\n       [2013, 2022],\n       [2014, 2022],\n       [2020, 2022],\n       [2020, 2022],\n       [2020, 2017],\n       [2020, 2017],\n       [2020, 2017],\n       [2020, 2017],\n       [2007, 2017],\n       [2007, 2017],\n       [2020, 2017],\n       [2017, 2017],\n...\n       [2021, 2021],\n       [2021, 2016],\n       [2015, 2016],\n       [2009, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2016, 2016],\n       [2016, 2016],\n       [2016, 2016],\n       [2013, 2016],\n       [2013, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2015, 2021]])Record Low Daily Average(Date, variable)float6454.4 66.4 56.6 ... 66.4 49.9 66.1array([[54.4, 66.4],\n       [56.6, 66.8],\n       [51.7, 67.3],\n       [51.6, 67.6],\n       [51. , 66.2],\n       [48.4, 64.8],\n       [53. , 65.9],\n       [49. , 66.2],\n       [50. , 64.5],\n       [54.6, 65. ],\n       [59.6, 64. ],\n       [52.5, 65.9],\n       [53.6, 65.6],\n       [58.6, 66.2],\n       [61.2, 66.9],\n       [58.4, 66.8],\n       [55.4, 66.4],\n       [50. , 66.7],\n       [48.3, 64.9],\n       [57.8, 65. ],\n...\n       [60.5, 69.1],\n       [53.7, 67.6],\n       [62.2, 66.3],\n       [52.6, 65.8],\n       [60.6, 63.7],\n       [63.2, 65. ],\n       [54.7, 65.3],\n       [59.9, 67.1],\n       [50.6, 67.1],\n       [57.6, 65.8],\n       [57.2, 66.8],\n       [58.8, 67.8],\n       [51.8, 67.3],\n       [49.4, 66.4],\n       [54.7, 66.6],\n       [48.8, 65.8],\n       [52.2, 65.2],\n       [58.7, 66.6],\n       [54.8, 66.4],\n       [49.9, 66.1]])Record Low Daily Average Year(Date, variable)int642001 2011 2010 ... 2010 2000 2010array([[2001, 2011],\n       [2010, 2011],\n       [2012, 2011],\n       [2018, 2001],\n       [2010, 2001],\n       [2010, 2001],\n       [2010, 2010],\n       [1996, 2002],\n       [1996, 1996],\n       [2001, 1996],\n       [2004, 2010],\n       [2010, 2010],\n       [1996, 1996],\n       [1996, 1996],\n       [2012, 2011],\n       [2014, 2011],\n       [1997, 2012],\n       [1997, 1997],\n       [1997, 2003],\n       [1997, 2003],\n...\n       [2004, 1996],\n       [2010, 2010],\n       [2017, 2010],\n       [2010, 2010],\n       [2010, 2010],\n       [1997, 2010],\n       [2003, 2010],\n       [2003, 2010],\n       [1996, 2003],\n       [2009, 2003],\n       [2012, 2003],\n       [1995, 2010],\n       [1995, 2003],\n       [1995, 2003],\n       [1995, 2010],\n       [2010, 1995],\n       [2010, 2010],\n       [2009, 1995],\n       [2000, 2010],\n       [2000, 2010]])Average High(Date, variable)float6475.0 73.7 75.1 ... 74.1 74.3 73.9array([[75. , 73.7],\n       [75.1, 74.2],\n       [73.9, 74.3],\n       [73.2, 74.1],\n       [72.9, 74. ],\n       [73.9, 73.6],\n       [73.4, 73.7],\n       [72.2, 73.5],\n       [72.3, 73.1],\n       [73.4, 73.1],\n       [74.1, 73. ],\n       [74. , 73.2],\n       [73.6, 73.2],\n       [73.4, 73.1],\n       [73.7, 72.9],\n       [73.3, 73. ],\n       [72.3, 72.5],\n       [72.2, 72.2],\n       [72.8, 72.3],\n       [73.3, 72.4],\n...\n       [75.9, 75.9],\n       [76.3, 75.9],\n       [76.6, 75.9],\n       [75.1, 75.7],\n       [75.4, 75.4],\n       [76.1, 75.3],\n       [75.6, 75.4],\n       [74.7, 75.3],\n       [72.5, 74.6],\n       [73.7, 74.2],\n       [73.9, 74. ],\n       [74.8, 74.3],\n       [74.8, 74.2],\n       [74.4, 74. ],\n       [74. , 73.9],\n       [72.7, 73.6],\n       [73.1, 73.8],\n       [74.4, 74.1],\n       [73.2, 74.1],\n       [74.3, 73.9]])Lowest High(Date, variable)float6463.3 67.8 64.2 ... 68.4 55.6 67.8array([[63.3, 67.8],\n       [64.2, 68. ],\n       [57. , 68.9],\n       [58.7, 69.1],\n       [57.8, 68.5],\n       [55.7, 66.2],\n       [59.7, 67.1],\n       [54.5, 67.8],\n       [59.7, 66.6],\n       [65.3, 67.3],\n       [68.7, 68. ],\n       [60.1, 68.9],\n       [59.5, 68. ],\n       [67.3, 67.6],\n       [67.3, 68.9],\n       [63.5, 68. ],\n       [61.9, 67.5],\n       [55.8, 68.2],\n       [55.2, 67.1],\n       [65.7, 66.9],\n...\n       [66.9, 69.8],\n       [62.6, 70.9],\n       [68.9, 69.8],\n       [61.7, 69.3],\n       [64.6, 65.3],\n       [70.2, 68. ],\n       [62.1, 68. ],\n       [64.6, 68.9],\n       [57. , 68.5],\n       [63. , 68.7],\n       [64. , 69.1],\n       [62.2, 69.4],\n       [57.9, 69.1],\n       [57.7, 67.3],\n       [61.7, 68.7],\n       [55.4, 67.8],\n       [57.7, 67.1],\n       [67.1, 69.4],\n       [59.5, 68.4],\n       [55.6, 67.8]])Lowest High Year(Date, variable)int642001 2011 2010 ... 2010 2000 2010array([[2001, 2011],\n       [2010, 2011],\n       [2012, 2011],\n       [2010, 2011],\n       [2010, 2001],\n       [2010, 2001],\n       [2014, 2002],\n       [1996, 2011],\n       [1996, 1996],\n       [2001, 1996],\n       [2001, 2010],\n       [2010, 2001],\n       [1996, 1996],\n       [1996, 2011],\n       [2000, 1996],\n       [2014, 2011],\n       [1997, 2012],\n       [1997, 2012],\n       [1997, 2003],\n       [1997, 2003],\n...\n       [2004, 1996],\n       [2010, 2010],\n       [2017, 2010],\n       [2010, 2010],\n       [1998, 2010],\n       [1998, 2010],\n       [2003, 2010],\n       [2003, 1997],\n       [1996, 1997],\n       [2009, 2003],\n       [1995, 2004],\n       [1995, 2004],\n       [1995, 2003],\n       [1995, 2003],\n       [1995, 2010],\n       [2010, 1995],\n       [1995, 1995],\n       [2010, 2003],\n       [2000, 2010],\n       [2000, 2010]])Record High(Date, variable)float6479.3 81.1 79.3 ... 83.1 80.1 81.7array([[79.3, 81.1],\n       [79.3, 81. ],\n       [79.2, 81.5],\n       [81.7, 81.9],\n       [80.2, 82.2],\n       [78.3, 82.6],\n       [81. , 82.2],\n       [79.2, 80.6],\n       [77.9, 79. ],\n       [79. , 79.2],\n       [79. , 79. ],\n       [79. , 78.4],\n       [78.4, 79.2],\n       [78.4, 79.7],\n       [78.6, 79.9],\n       [80.4, 79.5],\n       [77.7, 78.4],\n       [77.7, 79.9],\n       [78.4, 81.1],\n       [80.2, 81.5],\n...\n       [81.5, 82.6],\n       [82.9, 83.5],\n       [80.1, 84. ],\n       [80.4, 84. ],\n       [79.7, 83.7],\n       [82.2, 82.9],\n       [82.8, 83.1],\n       [79.9, 83.8],\n       [80.4, 83.8],\n       [79.3, 84. ],\n       [80.4, 83.7],\n       [79.9, 83.8],\n       [80.1, 83.7],\n       [79.7, 83.5],\n       [80.8, 82.9],\n       [80.2, 82.6],\n       [80.1, 82.9],\n       [80.6, 83.3],\n       [80.6, 83.1],\n       [80.1, 81.7]])Record High Year(Date, variable)int642022 2022 2022 ... 2016 2015 2021array([[2022, 2022],\n       [2022, 2022],\n       [2019, 2017],\n       [2020, 2017],\n       [2019, 2017],\n       [2015, 2017],\n       [2017, 2017],\n       [2007, 2017],\n       [2013, 2017],\n       [2022, 2022],\n       [2020, 2022],\n       [2024, 2017],\n       [2024, 2017],\n       [2014, 2017],\n       [2024, 2017],\n       [1997, 2017],\n       [2007, 2017],\n       [2015, 2017],\n       [2011, 2017],\n       [2017, 2017],\n...\n       [2021, 2021],\n       [2020, 2016],\n       [2009, 2016],\n       [2016, 2016],\n       [2009, 2016],\n       [2020, 2016],\n       [2012, 2016],\n       [2016, 2016],\n       [2021, 2016],\n       [2020, 2016],\n       [2017, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2023, 2016],\n       [2021, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2013, 2016],\n       [2015, 2021]])Average Low(Date, variable)float6467.9 71.1 68.5 ... 71.4 67.3 71.4array([[67.9, 71.1],\n       [68.5, 71.6],\n       [66.1, 71.7],\n       [65.4, 71.3],\n       [63.6, 71.1],\n       [64.4, 71. ],\n       [63.4, 70.9],\n       [62.7, 70.6],\n       [63.6, 70.4],\n       [63.2, 70.1],\n       [66.6, 70.2],\n       [67.4, 70.5],\n       [65.6, 70.6],\n       [63.8, 70.3],\n       [65.4, 70. ],\n       [65.2, 70. ],\n       [62.7, 69.8],\n       [63. , 69.2],\n       [63.2, 69.5],\n       [62.8, 69.6],\n...\n       [68.3, 73.7],\n       [69.7, 73.7],\n       [69.2, 73.6],\n       [66.9, 72.7],\n       [68.1, 73.2],\n       [67.5, 73.1],\n       [66.3, 72.9],\n       [65.8, 72.6],\n       [65.8, 72.2],\n       [64.3, 71.6],\n       [66.6, 71.5],\n       [68.5, 71.6],\n       [68.3, 71.5],\n       [66.7, 71.4],\n       [65.3, 71.3],\n       [63.4, 71. ],\n       [65.8, 71.2],\n       [66.7, 71.2],\n       [66.1, 71.4],\n       [67.3, 71.4]])Highest Low(Date, variable)float6476.8 79.7 76.3 ... 80.8 78.3 79.3array([[76.8, 79.7],\n       [76.3, 79.5],\n       [77. , 79.9],\n       [76.8, 80.6],\n       [75.9, 80.6],\n       [75.4, 80.8],\n       [76.6, 80.8],\n       [75.4, 77.9],\n       [76.3, 77.5],\n       [75.4, 77.2],\n       [74.8, 77.5],\n       [76.1, 76.6],\n       [75.2, 75.9],\n       [75. , 75.9],\n       [74.3, 76.1],\n       [74.5, 76.5],\n       [73. , 76.5],\n       [74.8, 77.2],\n       [73. , 78.6],\n       [70.5, 79.2],\n...\n       [76.1, 80.8],\n       [77.5, 81.7],\n       [76.5, 82.6],\n       [77. , 82.6],\n       [77. , 81.9],\n       [78.1, 81.5],\n       [77.4, 81.7],\n       [77.9, 82.4],\n       [77.4, 82.6],\n       [76.3, 82.8],\n       [77.4, 82.2],\n       [78.1, 82.6],\n       [78.3, 82.2],\n       [78.3, 82. ],\n       [77.2, 81.7],\n       [77.5, 81.1],\n       [77.9, 81.5],\n       [78.3, 81.9],\n       [78.4, 80.8],\n       [78.3, 79.3]])Highest Low Year(Date, variable)int642022 2022 2017 ... 2016 2015 2021array([[2022, 2022],\n       [2017, 2022],\n       [2015, 2017],\n       [2015, 2017],\n       [2007, 2017],\n       [2007, 2017],\n       [2007, 2017],\n       [2013, 2022],\n       [2013, 2022],\n       [2013, 2022],\n       [2013, 2022],\n       [2020, 2022],\n       [2020, 2022],\n       [2020, 2017],\n       [2013, 2017],\n       [2020, 2017],\n       [2017, 2017],\n       [2007, 2017],\n       [2001, 2017],\n       [2015, 2017],\n...\n       [1997, 2021],\n       [2021, 2016],\n       [2001, 2016],\n       [2009, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2016, 2016],\n       [2016, 2016],\n       [2016, 2016],\n       [2013, 2016],\n       [2013, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2015, 2016],\n       [2015, 2021]])Record Low(Date, variable)float6445.5 63.9 49.1 ... 64.4 44.2 64.4array([[45.5, 63.9],\n       [49.1, 64.4],\n       [46.4, 65.5],\n       [43.7, 64.5],\n       [44.2, 63.6],\n       [41. , 61.7],\n       [45.5, 61.7],\n       [43.5, 62.5],\n       [40.3, 60.9],\n       [43.9, 61.2],\n       [49.3, 60.1],\n       [44.9, 62.2],\n       [46.4, 62.3],\n       [50. , 62.2],\n       [53.6, 63.9],\n       [53.2, 65. ],\n       [48.9, 65.3],\n       [44.1, 64. ],\n       [41.4, 62.8],\n       [49.8, 63. ],\n...\n       [54.1, 67.3],\n       [44.8, 64.4],\n       [55.6, 62.8],\n       [43.5, 62.2],\n       [51.6, 62.1],\n       [55.8, 62.1],\n       [47.3, 62.6],\n       [48.9, 63.7],\n       [44.2, 65.1],\n       [49.3, 63. ],\n       [49.5, 64.4],\n       [55.4, 64.9],\n       [45.7, 65.5],\n       [41. , 63.3],\n       [47.5, 64. ],\n       [42.1, 63. ],\n       [42.4, 62.2],\n       [50.1, 62.2],\n       [50. , 64.4],\n       [44.2, 64.4]])Record Low Year(Date, variable)int642001 2001 2010 ... 2010 2000 2010array([[2001, 2001],\n       [2010, 2001],\n       [2012, 2001],\n       [2018, 2010],\n       [2010, 2010],\n       [2010, 2010],\n       [2010, 2010],\n       [1996, 2010],\n       [1996, 2010],\n       [2001, 2010],\n       [2004, 2010],\n       [2010, 2010],\n       [2011, 2010],\n       [1996, 2010],\n       [2012, 2010],\n       [2014, 2010],\n       [1997, 2012],\n       [1997, 1997],\n       [1997, 2003],\n       [1997, 1997],\n...\n       [2004, 2010],\n       [2010, 2010],\n       [2017, 2010],\n       [2010, 2010],\n       [2010, 2010],\n       [1997, 2010],\n       [2003, 2010],\n       [1996, 2010],\n       [1996, 2003],\n       [2003, 2003],\n       [2012, 2003],\n       [1995, 2003],\n       [1995, 2003],\n       [1995, 1995],\n       [2010, 1995],\n       [2010, 2010],\n       [2010, 2010],\n       [2009, 2010],\n       [2000, 2010],\n       [2000, 2010]])Years(Date, variable)int6423 24 23 24 23 ... 24 24 24 23 24array([[23, 24],\n       [23, 24],\n       [23, 24],\n       [22, 24],\n       [23, 24],\n       [23, 24],\n       [23, 24],\n       [22, 24],\n       [23, 24],\n       [22, 24],\n       [22, 24],\n       [23, 24],\n       [23, 24],\n       [23, 24],\n       [23, 24],\n       [23, 24],\n       [23, 24],\n       [23, 24],\n       [23, 24],\n       [23, 24],\n...\n       [24, 24],\n       [24, 24],\n       [23, 24],\n       [24, 24],\n       [24, 24],\n       [24, 24],\n       [24, 24],\n       [24, 24],\n       [24, 24],\n       [24, 24],\n       [24, 24],\n       [24, 24],\n       [23, 23],\n       [24, 24],\n       [23, 23],\n       [24, 24],\n       [24, 24],\n       [24, 24],\n       [24, 24],\n       [23, 24]])Indexes: (2)variablePandasIndexPandasIndex(Index(['Air Temperature', 'Water Temperature'], dtype='object', name='variable'))DatePandasIndexPandasIndex(Index(['01-Jan', '02-Jan', '03-Jan', '04-Jan', '05-Jan', '06-Jan', '07-Jan',\n       '08-Jan', '09-Jan', '10-Jan',\n       ...\n       '22-Dec', '23-Dec', '24-Dec', '25-Dec', '26-Dec', '27-Dec', '28-Dec',\n       '29-Dec', '30-Dec', '31-Dec'],\n      dtype='object', name='Date', length=366))Attributes: (12)datum :MHHWday_threshold :2hr_threshold :3last_updated :2024-05-25 10:00:00stationid :8723214stationname :Virginia Key, FLtz :lstunit_system :englishAir Temperature units :FWater Temperature units :FAir Temperature data range :('1994-04-01', '2024-04-30')Water Temperature data range :('1994-04-01', '2024-04-30')\n\n\n\nmonthly_records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 3kB\nDimensions:                           (Month: 12, variable: 2)\nCoordinates:\n  * variable                          (variable) object 16B 'Air Temperature'...\n  * Month                             (Month) object 96B 'Jan' 'Feb' ... 'Dec'\nData variables: (12/16)\n    Monthly Average                   (Month, variable) float64 192B 68.7 ......\n    Record High Monthly Average       (Month, variable) float64 192B 72.6 ......\n    Record High Monthly Average Year  (Month, variable) int64 192B 2013 ... 2016\n    Record Low Monthly Average        (Month, variable) float64 192B 63.0 ......\n    Record Low Monthly Average Year   (Month, variable) int64 192B 2001 ... 2010\n    Average High                      (Month, variable) float64 192B 76.0 ......\n    ...                                ...\n    Average Low                       (Month, variable) float64 192B 55.6 ......\n    Highest Low                       (Month, variable) float64 192B 63.5 ......\n    Highest Low Year                  (Month, variable) int64 192B 2013 ... 2016\n    Record Low                        (Month, variable) float64 192B 48.3 ......\n    Record Low Year                   (Month, variable) int64 192B 1997 ... 2010\n    Years                             (Month, variable) int64 192B 23 24 ... 24\nAttributes:\n    datum:                         MHHW\n    day_threshold:                 2\n    hr_threshold:                  3\n    last_updated:                  2024-05-25 10:00:00\n    stationid:                     8723214\n    stationname:                   Virginia Key, FL\n    tz:                            lst\n    unit_system:                   english\n    Air Temperature units:         F\n    Water Temperature units:       F\n    Air Temperature data range:    ('1994-04-01', '2024-04-30')\n    Water Temperature data range:  ('1994-04-01', '2024-04-30')xarray.DatasetDimensions:Month: 12variable: 2Coordinates: (2)variable(variable)object'Air Temperature' 'Water Tempera...array(['Air Temperature', 'Water Temperature'], dtype=object)Month(Month)object'Jan' 'Feb' 'Mar' ... 'Nov' 'Dec'array(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',\n       'Nov', 'Dec'], dtype=object)Data variables: (16)Monthly Average(Month, variable)float6468.7 71.6 70.8 ... 77.4 71.4 74.0array([[68.7, 71.6],\n       [70.8, 72.8],\n       [72.3, 75. ],\n       [75.6, 78.5],\n       [78.7, 82. ],\n       [81.5, 85.2],\n       [82.9, 87.1],\n       [83.2, 87.3],\n       [82. , 85.7],\n       [79.6, 82.1],\n       [75. , 77.4],\n       [71.4, 74. ]])Record High Monthly Average(Month, variable)float6472.6 78.9 74.9 ... 81.5 76.9 82.5array([[72.6, 78.9],\n       [74.9, 76.3],\n       [77.6, 80. ],\n       [79.4, 83.4],\n       [80.7, 84.1],\n       [83.6, 87.6],\n       [85. , 89.5],\n       [85.9, 90.1],\n       [82.7, 89.5],\n       [81.2, 85.9],\n       [78.6, 81.5],\n       [76.9, 82.5]])Record High Monthly Average Year(Month, variable)int642013 2017 2018 ... 2016 2015 2016array([[2013, 2017],\n       [2018, 2021],\n       [2003, 2003],\n       [2020, 2020],\n       [1995, 2021],\n       [2010, 2010],\n       [2023, 2023],\n       [2022, 2021],\n       [2017, 2021],\n       [2020, 2021],\n       [2015, 2016],\n       [2015, 2016]])Record Low Monthly Average(Month, variable)float6463.0 67.5 65.5 ... 74.6 62.1 68.2array([[63. , 67.5],\n       [65.5, 67.7],\n       [66.1, 69.2],\n       [72.8, 75.1],\n       [77. , 78.6],\n       [79.8, 83.3],\n       [81. , 84.5],\n       [81.8, 85.4],\n       [80.6, 82.7],\n       [77.5, 79.6],\n       [71.4, 74.6],\n       [62.1, 68.2]])Record Low Monthly Average Year(Month, variable)int642001 2001 1996 ... 2012 2010 2010array([[2001, 2001],\n       [1996, 2005],\n       [2010, 2010],\n       [2004, 2004],\n       [2013, 2001],\n       [2014, 2002],\n       [2013, 2013],\n       [1994, 1995],\n       [2001, 2004],\n       [2000, 2000],\n       [2012, 2012],\n       [2010, 2010]])Average High(Month, variable)float6476.0 75.4 76.5 ... 80.6 77.5 77.6array([[76. , 75.4],\n       [76.5, 76.7],\n       [78.5, 79.2],\n       [80.8, 81.9],\n       [82.5, 85.1],\n       [84.8, 87.9],\n       [85.8, 89.1],\n       [85.7, 89.4],\n       [85.1, 88. ],\n       [83.8, 85.6],\n       [79.7, 80.6],\n       [77.5, 77.6]])Lowest High(Month, variable)float6473.0 70.5 74.2 ... 76.8 72.5 73.0array([[73. , 70.5],\n       [74.2, 73.7],\n       [74.2, 73.3],\n       [77.3, 78.4],\n       [80.8, 82.8],\n       [82.8, 85.3],\n       [84.2, 86.4],\n       [84. , 87.2],\n       [83.9, 85.2],\n       [81. , 82.7],\n       [76.9, 76.8],\n       [72.5, 73. ]])Lowest High Year(Month, variable)int642011 2011 2000 ... 2001 2010 2003array([[2011, 2011],\n       [2000, 2016],\n       [2010, 2010],\n       [2004, 2010],\n       [2014, 2013],\n       [2014, 1996],\n       [2012, 2013],\n       [2003, 2000],\n       [2000, 1997],\n       [2010, 2004],\n       [2012, 2001],\n       [2010, 2003]])Record High(Month, variable)float6478.0 81.7 78.6 ... 85.0 79.6 84.6array([[78. , 81.7],\n       [78.6, 81.5],\n       [82.8, 83.2],\n       [85.8, 85.8],\n       [85.2, 87.7],\n       [87.6, 90.4],\n       [88.7, 92. ],\n       [88.5, 92.2],\n       [86.7, 91.2],\n       [86.8, 89. ],\n       [82. , 85. ],\n       [79.6, 84.6]])Record High Year(Month, variable)int642015 2017 2021 ... 2020 1994 2016array([[2015, 2017],\n       [2021, 2021],\n       [2003, 2021],\n       [2020, 2020],\n       [1995, 2021],\n       [2009, 2010],\n       [2018, 2021],\n       [2022, 2021],\n       [2021, 2021],\n       [2023, 2016],\n       [2020, 2020],\n       [1994, 2016]])Average Low(Month, variable)float6455.6 67.6 59.4 ... 74.2 59.2 70.2array([[55.6, 67.6],\n       [59.4, 68.9],\n       [63.3, 70.9],\n       [68.3, 74.6],\n       [73.8, 78.1],\n       [77.6, 82.2],\n       [79. , 84.5],\n       [79.3, 84.4],\n       [78.2, 83. ],\n       [72.7, 77.9],\n       [66. , 74.2],\n       [59.2, 70.2]])Highest Low(Month, variable)float6463.5 75.9 70.0 ... 80.0 70.5 79.6array([[63.5, 75.9],\n       [70. , 73.4],\n       [72. , 75.4],\n       [72.6, 81.1],\n       [77.1, 80.4],\n       [80.8, 85.2],\n       [82.3, 87.2],\n       [83.6, 87.2],\n       [79.8, 87.1],\n       [77.8, 83.4],\n       [74.4, 80. ],\n       [70.5, 79.6]])Highest Low Year(Month, variable)int642013 2017 2018 ... 2016 2015 2016array([[2013, 2017],\n       [2018, 2023],\n       [1997, 1997],\n       [2015, 2020],\n       [2003, 1994],\n       [2004, 2004],\n       [2022, 2023],\n       [2022, 2021],\n       [2009, 2021],\n       [1995, 2021],\n       [2020, 2016],\n       [2015, 2016]])Record Low(Month, variable)float6448.3 64.0 47.9 ... 70.8 48.8 63.7array([[48.3, 64. ],\n       [47.9, 63.2],\n       [55.1, 64.8],\n       [61.2, 69.4],\n       [67.9, 74.1],\n       [75.1, 80. ],\n       [76.1, 80.9],\n       [76.1, 81. ],\n       [74.3, 79.5],\n       [64.6, 73.2],\n       [57.4, 70.8],\n       [48.8, 63.7]])Record Low Year(Month, variable)int641997 2003 1996 ... 2000 2010 2010array([[1997, 2003],\n       [1996, 2005],\n       [1996, 2010],\n       [2009, 2003],\n       [1999, 2001],\n       [1995, 1996],\n       [2013, 2013],\n       [1996, 2012],\n       [2001, 2004],\n       [2005, 2005],\n       [2006, 2000],\n       [2010, 2010]])Years(Month, variable)int6423 24 23 21 24 ... 23 23 24 24 24array([[23, 24],\n       [23, 21],\n       [24, 25],\n       [24, 25],\n       [21, 23],\n       [20, 23],\n       [25, 25],\n       [24, 25],\n       [24, 24],\n       [23, 23],\n       [23, 24],\n       [24, 24]])Indexes: (2)variablePandasIndexPandasIndex(Index(['Air Temperature', 'Water Temperature'], dtype='object', name='variable'))MonthPandasIndexPandasIndex(Index(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',\n       'Nov', 'Dec'],\n      dtype='object', name='Month'))Attributes: (12)datum :MHHWday_threshold :2hr_threshold :3last_updated :2024-05-25 10:00:00stationid :8723214stationname :Virginia Key, FLtz :lstunit_system :englishAir Temperature units :FWater Temperature units :FAir Temperature data range :('1994-04-01', '2024-04-30')Water Temperature data range :('1994-04-01', '2024-04-30')\n\n\n\nmonthly_records.coords['variable']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'variable' (variable: 2)&gt; Size: 16B\narray(['Air Temperature', 'Water Temperature'], dtype=object)\nCoordinates:\n  * variable  (variable) object 16B 'Air Temperature' 'Water Temperature'xarray.DataArray'variable'variable: 2'Air Temperature' 'Water Temperature'array(['Air Temperature', 'Water Temperature'], dtype=object)Coordinates: (1)variable(variable)object'Air Temperature' 'Water Tempera...array(['Air Temperature', 'Water Temperature'], dtype=object)Indexes: (1)variablePandasIndexPandasIndex(Index(['Air Temperature', 'Water Temperature'], dtype='object', name='variable'))Attributes: (0)\n\n\nWe can still choose one environmental variable at a time, but now we get all of the records and corresponding years:\n\nmonthly_records.sel(variable='Air Temperature').to_dataframe().drop('variable', axis=1)\n\n\n\n\n\n\n\n\nMonthly Average\nRecord High Monthly Average\nRecord High Monthly Average Year\nRecord Low Monthly Average\nRecord Low Monthly Average Year\nAverage High\nLowest High\nLowest High Year\nRecord High\nRecord High Year\nAverage Low\nHighest Low\nHighest Low Year\nRecord Low\nRecord Low Year\nYears\n\n\nMonth\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJan\n68.7\n72.6\n2013\n63.0\n2001\n76.0\n73.0\n2011\n78.0\n2015\n55.6\n63.5\n2013\n48.3\n1997\n23\n\n\nFeb\n70.8\n74.9\n2018\n65.5\n1996\n76.5\n74.2\n2000\n78.6\n2021\n59.4\n70.0\n2018\n47.9\n1996\n23\n\n\nMar\n72.3\n77.6\n2003\n66.1\n2010\n78.5\n74.2\n2010\n82.8\n2003\n63.3\n72.0\n1997\n55.1\n1996\n24\n\n\nApr\n75.6\n79.4\n2020\n72.8\n2004\n80.8\n77.3\n2004\n85.8\n2020\n68.3\n72.6\n2015\n61.2\n2009\n24\n\n\nMay\n78.7\n80.7\n1995\n77.0\n2013\n82.5\n80.8\n2014\n85.2\n1995\n73.8\n77.1\n2003\n67.9\n1999\n21\n\n\nJun\n81.5\n83.6\n2010\n79.8\n2014\n84.8\n82.8\n2014\n87.6\n2009\n77.6\n80.8\n2004\n75.1\n1995\n20\n\n\nJul\n82.9\n85.0\n2023\n81.0\n2013\n85.8\n84.2\n2012\n88.7\n2018\n79.0\n82.3\n2022\n76.1\n2013\n25\n\n\nAug\n83.2\n85.9\n2022\n81.8\n1994\n85.7\n84.0\n2003\n88.5\n2022\n79.3\n83.6\n2022\n76.1\n1996\n24\n\n\nSep\n82.0\n82.7\n2017\n80.6\n2001\n85.1\n83.9\n2000\n86.7\n2021\n78.2\n79.8\n2009\n74.3\n2001\n24\n\n\nOct\n79.6\n81.2\n2020\n77.5\n2000\n83.8\n81.0\n2010\n86.8\n2023\n72.7\n77.8\n1995\n64.6\n2005\n23\n\n\nNov\n75.0\n78.6\n2015\n71.4\n2012\n79.7\n76.9\n2012\n82.0\n2020\n66.0\n74.4\n2020\n57.4\n2006\n23\n\n\nDec\n71.4\n76.9\n2015\n62.1\n2010\n77.5\n72.5\n2010\n79.6\n1994\n59.2\n70.5\n2015\n48.8\n2010\n24\n\n\n\n\n\n\n\nFinally, write these to file for safe keeping.\n\ndaily_records.to_netcdf(os.path.join(outdir, 'statistics-daily.nc'), mode='w')\nmonthly_records.to_netcdf(os.path.join(outdir, 'statistics-monthly.nc'), mode='w')\n\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: numpy.ndarray size changed, may indicate binary incompatibility. Expected 16 from C header, got 96 from PyObject\n\n\nWe will plot these results in Part 3, NOAA-CO-OPS-plots.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Behind the Scenes",
      "Data Cleansing and Records Calculations"
    ]
  },
  {
    "objectID": "demos/NOAA-CO-OPS-data.html",
    "href": "demos/NOAA-CO-OPS-data.html",
    "title": "Downloading NOAA CO-OPS Data",
    "section": "",
    "text": "In this notebook, we will download atmospheric and water observations from the National Oceanic and Atmospheric Administration (NOAA) Center for Operational Oceanographic Products and Services (CO-OPS) data portal. The objective is to replicate the Climatology for Virginia Key, FL page created and maintained by Brian McNoldy at the University of Miami Rosenstiel School of Marine, Atmospheric, and Earth Science.\nFor sake of demonstration, we will focus on air and water temperature from Virginia Key, FL. Ultimately, however, there are several variables of interest:\n\nAir temperature\nBarometric pressure\nWater temperature\nWater level (i.e., tides)\nWind speed\n\nThis notebook will simply download the data, store the metadata, and write these to file. The second notebook, NOAA-CO-OPS-records, will filter these data and calculate a set of statistics and records. Part 3, NOAA-CO-OPS-plots, will plot and display the data.\n\nPackages and configurations\nFirst we import the packages we need.\n\nfrom noaa_coops import Station\nimport datetime as dt\nimport pandas as pd\nimport numpy as np\nimport yaml\nimport os\n\nBy default, Python only displays warnings the first time they are thrown. Ideally, we want a code that does not throw any warnings, but it sometimes takes soem trial and error to resolve the issue being warned about. So, for diagnostic purposes, we’ll set the kernel to always display warnings.n\n\nimport warnings\nwarnings.filterwarnings('always')\n\n\n\nFunctions\nNext, we define a number of functions that will come in handy later.\n\nHelper functions\n\ndef camel(text):\n    \"\"\"Convert 'text' to camel case\"\"\"\n    s = text.replace(',','').replace(\"-\", \" \").replace(\"_\", \" \")\n    s = s.split()\n    if len(text) == 0:\n        return text\n    return s[0].lower() + ''.join(i.capitalize() for i in s[1:])\n\ndef get_units(variable, unit_system):\n    \"\"\"Return the desired units for 'variable'\"\"\"\n    unit_options = dict({\n        'Air Temperature': {'metric': 'C', 'english': 'F'},\n        'Barometric Pressure': {'metric': 'mb', 'english': 'mb'},\n        'Wind Speed': {'metric': 'm/s', 'english': 'kn'},\n        'Wind Gust': {'metric': 'm/s', 'english': 'kn'},\n        'Wind Direction': {'metric': 'deg', 'english': 'deg'},\n        'Water Temperature': {'metric': 'C', 'english': 'F'},\n        'Water Level': {'metric': 'm', 'english': 'ft'}\n    })\n    return unit_options[variable][unit_system]\n\ndef format_date(datestr):\n    \"\"\"Format date strings into YYYYMMDD format\"\"\"\n    dtdt = pd.to_datetime(datestr)\n    return dt.datetime.strftime(dtdt, '%Y%m%d')\n\n\n\nDownloading data\n\ndef load_atemp(metadata, start_date, end_date, verbose=True):\n    \"\"\"Download air temperature data from NOAA CO-OPS between 'start_date'\n    and 'end_date' for 'stationid', 'unit_system', and timezone 'tz'\n    provided in 'metadata' dictionary.\n    \"\"\"\n    if verbose:\n        print('Retrieving air temperature data')\n    station = Station(id=metadata['stationid'])\n    if not start_date:\n        start_date = format_date(station.data_inventory['Air Temperature']['start_date'])\n    if not end_date:\n        end_date = format_date(pd.to_datetime('today') + pd.Timedelta(days=1))\n    air_temp = station.get_data(\n        begin_date=start_date,\n        end_date=end_date,\n        product='air_temperature',\n        units=metadata['unit_system'],\n        time_zone=metadata['tz'])\n    air_temp.columns = ['atemp', 'atemp_flag']\n    return air_temp\n\ndef load_wind(metadata, start_date, end_date, verbose=True):\n    \"\"\"Download wind data from NOAA CO-OPS between 'start_date' and\n    'end_date' for 'stationid', 'unit_system', and timezone 'tz' provided\n    in 'metadata' dictionary.\n    \"\"\"\n    if verbose:\n        print('Retrieving wind data')\n    station = Station(id=metadata['stationid'])\n    if not start_date:\n        start_date = format_date(station.data_inventory['Wind']['start_date'])\n    if not end_date:\n        end_date = format_date(pd.to_datetime('today') + pd.Timedelta(days=1))\n    wind = station.get_data(\n        begin_date=start_date,\n        end_date=end_date,\n        product='wind',\n        units=metadata['unit_system'],\n        time_zone=metadata['tz'])\n    wind.columns = ['windspeed', 'winddir_deg', 'winddir',\n                    'windgust', 'wind_flag']\n    return wind\n\ndef load_atm_pres(metadata, start_date, end_date, verbose=True):\n    \"\"\"Download barometric pressure data from NOAA CO-OPS between\n    'start_date' and 'end_date' for 'stationid', 'unit_system', and\n    timezone 'tz' provided in 'metadata' dictionary.\n    \"\"\"\n    if verbose:\n        print('Retrieving barometric pressure data')\n    station = Station(id=metadata['stationid'])\n    if not start_date:\n        start_date = format_date(station.data_inventory['Barometric Pressure']['start_date'])\n    if not end_date:\n        end_date = format_date(pd.to_datetime('today') + pd.Timedelta(days=1))\n    pressure = station.get_data(\n        begin_date=start_date,\n        end_date=end_date,\n        product='air_pressure',\n        units=metadata['unit_system'],\n        time_zone=metadata['tz'])\n    pressure.columns = ['apres', 'apres_flag']\n    return pressure\n\ndef load_water_temp(metadata, start_date, end_date, verbose=True):\n    \"\"\"Download water temperature data from NOAA CO-OPS between\n    'start_date' and 'end_date' for 'stationid', 'unit_system', and\n    timezone 'tz' provided in 'metadata' dictionary.\n    \"\"\"\n    if verbose:\n        print('Retrieving water temperature data')\n    station = Station(id=metadata['stationid'])\n    if not start_date:\n        start_date = format_date(station.data_inventory['Water Temperature']['start_date'])\n    if not end_date:\n        end_date = format_date(pd.to_datetime('today') + pd.Timedelta(days=1))\n    water_temp = station.get_data(\n        begin_date=start_date,\n        end_date=end_date,\n        product='water_temperature',\n        units=metadata['unit_system'],\n        time_zone=metadata['tz'])\n    water_temp.columns = ['wtemp', 'wtemp_flag']\n    return water_temp\n\ndef load_water_level(metadata, start_date, end_date, verbose=True):\n    \"\"\"Download water level data from NOAA CO-OPS between 'start_date' and\n    'end_date' for 'stationid', 'unit_system', 'datum', and timezone 'tz'\n    provided in 'metadata' dictionary.\n    \"\"\"\n    if verbose:\n        print('Retrieving water level tide data')\n    station = Station(id=metadata['stationid'])\n    if not start_date:\n        start_date = format_date(station.data_inventory['Verified 6-Minute Water Level']['start_date'])\n    if not end_date:\n        end_date = format_date(pd.to_datetime('today') + pd.Timedelta(days=1))\n    water_levels = station.get_data(\n        begin_date=start_date,\n        end_date=end_date,\n        product='water_level',\n        datum=metadata['datum'],\n        units=metadata['unit_system'],\n        time_zone=metadata['tz'])\n    water_levels.columns = ['wlevel', 's', 'wlevel_flag', 'wlevel_qc']\n    return water_levels\n\ndef download_data(metadata, start_date=None, end_date=None, verbose=True):\n    \"\"\"Download data from NOAA CO-OPS\"\"\"\n    # List of data variables to combine at the end\n    datasets = []\n            \n    # If no 'end_date' is passed, download through end of current date\n    if not end_date:\n        end_date = format_date(pd.to_datetime('today') + pd.Timedelta(days=1))\n    \n    # Air temperature\n    if 'Air Temperature' in metadata['variables']:\n        air_temp = load_atemp(metadata=metadata, start_date=start_date,\n                              end_date=end_date, verbose=verbose)\n        air_temp['atemp_flag'] = air_temp['atemp_flag'].str.split(',', expand=True).astype(int).sum(axis=1)\n        air_temp.loc[air_temp['atemp_flag'] &gt; 0, 'atemp'] = np.nan\n        datasets.append(air_temp['atemp'])\n\n    # Barometric pressure\n    if 'Barometric Pressure' in metadata['variables']:\n        pressure = load_atm_pres(metadata=metadata, start_date=start_date,\n                                 end_date=end_date, verbose=verbose)\n        pressure['apres_flag'] = pressure['apres_flag'].str.split(',', expand=True).astype(int).sum(axis=1)\n        pressure.loc[pressure['apres_flag'] &gt; 0, 'apres'] = np.nan\n        datasets.append(pressure['apres'])\n\n    # Wind\n    if 'Wind Speed' in metadata['variables']:\n        metadata['variables'].extend(['Wind Gust'])\n        wind = load_wind(metadata=metadata, start_date=start_date,\n                         end_date=end_date, verbose=verbose)\n        wind['windflag'] = wind['wind_flag'].str.split(',', expand=True).astype(int).sum(axis=1)\n        wind.loc[wind['wind_flag'] &gt; 0, ['windspeed', 'windgust']] = np.nan\n        datasets.append(wind[['windspeed', 'windgust']])\n\n    # Water temperature\n    if 'Water Temperature' in metadata['variables']:\n        water_temp = load_water_temp(metadata=metadata, start_date=start_date,\n                                     end_date=end_date, verbose=verbose)\n        water_temp['wtemp_flag'] = water_temp['wtemp_flag'].str.split(',', expand=True).astype(int).sum(axis=1)\n        water_temp.loc[water_temp['wtemp_flag'] &gt; 0, 'wtemp'] = np.nan\n        datasets.append(water_temp['wtemp'])\n\n    # Water level (tides)\n    if 'Verified 6-Minute Water Level' in metadata['variables']:\n        water_levels = load_water_level(metadata=metadata, start_date=start_date,\n                                        end_date=end_date, verbose=verbose)\n        water_levels['wlevel_flag'] = water_levels['wlevel_flag'].str.split(',', expand=True).astype(int).sum(axis=1)\n        water_levels.loc[water_levels['wlevel_flag'] &gt; 0, 'wlevel'] = np.nan\n        datasets.append(water_levels['wlevel'])\n\n    # Merge into single dataframe and rename columns\n    newdata = pd.concat(datasets, axis=1)\n    newdata.index.name = f'time_{metadata[\"tz\"]}'\n    newdata.columns = [i for i in metadata['variables']]\n    return newdata\n\n\n\n\nLoad / download data\nNow it’s time to load the data. First, specify the station we want to load. This will be used to load saved data or download all data from a new station, if we have not yet retrieved data from this particular stationname.\nstationname is a custom human-readable “City, ST” string for the station, while id is the NOAA-COOPS station ID number.\n\nstationname = 'Virginia Key, FL'\nid = '8723214'\n\nDerive the directory name containing for data from the station name. This is where the data are or will be saved locally.\n\ndirname = camel(stationname)\noutdir = os.path.join(os.getcwd(), dirname)\n\nprint(f\"Station folder: {dirname}\")\nprint(f\"Full directory: {outdir}\")\n\nStation folder: virginiaKeyFl\nFull directory: /home/climatology/virginiaKeyFl\n\n\nFlag for printing statuses\n\nverbose = True\n\nLet’s see if we already have data from this station saved locally. This will be true if a directory already exists for the station.\nIf the directory outdir does not exist, then no data have been downloaded for this station, so we need to download everything through the present. This requires a few steps:\n\nCreate outdir\nLoad the configuration settings from station-init.yml. This file contains settings such as unit system, time zone, and what variables to retrieve. Using a init file like this makes it easier to keep the same settings across multiple stations. It will be read in as a Python dictionary, which we will call meta and will use to store all relevant metadata for the station.\nDownload the data and record the timestamp of the last observation in the metadata. This will be used later when updating the data.\nWrite the data and metadata to file.\n\nOn the other hand, if data already exist locally, we will load it from file and download new data we do not yet have:\n\nLoad the data and metadata from file\nRetrieve new data\nCombine new data to existing data, update the ‘last_updated’ metadata entry, and write data and metadata to file\n\nThe noaa-coops tool only accepts dates without times, so it is possible to download data we already have. We therefore have to check what we download against what we already have to avoid duplicating data.\nThe most likely (and perhaps only) scenerio is if the data we have for the most recent day is incomplete. For example, assume today is May 5, 2024 and we download data at noon. Also assume the start date is some earlier day, the last time we retrieved data, and this will be automatically determined from the metadata. Specifying an end date 2024-05-01 will retrieve all data available through noon on May 5. In this case, we do not yet have these data, so we concatenate what we do not have to what we do have. However, if we then run the download function again (say, for diagnostic purposes) with the new start date of 2024-05-01 and the end date 2024-05-01, it will again download the data through noon on May 5. But since we already have those data, we do not want to re-concatenate them.\nThis cell may take several seconds or minutes to run, depending on how much data is being downloaded.\n\nif not os.path.exists(outdir):\n    if verbose:\n        print('Creating new directory for this station.')\n    os.makedirs(outdir)\n\n    # Metadata configuration\n    with open('station-init.yml') as d:\n        meta = yaml.safe_load(d)\n    meta['units'] = {k:get_units(k, meta['unit_system']) for k in meta['variables']}\n    meta['outdir'] = outdir\n    meta['stationname'] = stationname\n    meta['stationid'] = id\n\n    # Download all data (set start and end date to None to get all data)\n    if verbose:\n        print('Downloading all data for this station.')\n    data = download_data(metadata=meta, start_date=None, end_date=None)\n    data.to_csv(os.path.join(meta['outdir'], 'observational_data_record.csv.gz'),\n                             compression='infer')\n    print(\"Updated observational data written to file \"\\\n          f\"{os.path.join(meta['outdir'], 'observational_data_record.csv')}.\")\n\n    # Save metadata\n    meta['last_updated'] = str(data.index.max())\n    if verbose:\n        print(f\"Metadata written to file {os.path.join(meta['outdir'], 'metadata.yml')}\")\n    with open(os.path.join(meta['outdir'], 'metadata.yml'), 'w') as fp:\n        yaml.dump(meta, fp)\n    \nelse:\n    # Load the metadata\n    if verbose:\n        print('Loading metadata from file')\n    with open(os.path.join(outdir, 'metadata.yml')) as m:\n        meta = yaml.safe_load(m)\n    \n    # Load the historical data\n    if verbose:\n        print('Loading data from file')\n    data = pd.read_csv(os.path.join(outdir, 'observational_data_record.csv.gz'),\n                       index_col=f'time_{meta[\"tz\"]}', parse_dates=True,\n                       compression='infer')\n\n    # Retrieve new data\n    newdata = download_data(metadata=meta, start_date=format_date(meta['last_updated']))\n    if sum(~newdata.index.isin(data.index)) == 0:\n        print('No new data available.')\n    else:\n        data = pd.concat([data,\n                          newdata[newdata.index.isin(data.index) == False]], axis=0)\n        data.to_csv(os.path.join(meta['outdir'], 'observational_data_record.csv.gz'),\n                                 compression='infer')\n        meta['last_updated'] = str(data.index.max())\n        with open(os.path.join(meta['outdir'], 'metadata.yml'), 'w') as fp:\n            yaml.dump(meta, fp)\n        print(\"Updated observational data written to file \"\\\n              f\"{os.path.join(meta['outdir'], 'observational_data_record.csv')}.\")\n\nLoading metadata from file\nLoading data from file\nRetrieving air temperature data\nRetrieving water temperature data\nNo new data available.\n\n\nCheck the data and metadata for sanity:\n\ndata\n\n\n\n\n\n\n\n\nAir Temperature\nWater Temperature\n\n\ntime_lst\n\n\n\n\n\n\n1994-01-28 00:00:00\nNaN\nNaN\n\n\n1994-01-28 00:06:00\nNaN\nNaN\n\n\n1994-01-28 00:12:00\nNaN\nNaN\n\n\n1994-01-28 00:18:00\nNaN\nNaN\n\n\n1994-01-28 00:24:00\nNaN\nNaN\n\n\n...\n...\n...\n\n\n2024-05-25 09:36:00\n83.5\n86.0\n\n\n2024-05-25 09:42:00\n83.5\n86.2\n\n\n2024-05-25 09:48:00\n83.7\n86.2\n\n\n2024-05-25 09:54:00\n83.8\n86.2\n\n\n2024-05-25 10:00:00\n83.7\n86.2\n\n\n\n\n2466580 rows × 2 columns\n\n\n\n\nmeta\n\n{'datum': 'MHHW',\n 'day_threshold': 2,\n 'hr_threshold': 3,\n 'last_updated': '2024-05-25 10:00:00',\n 'outdir': '/home/climatology/virginiaKeyFl',\n 'stationid': '8723214',\n 'stationname': 'Virginia Key, FL',\n 'tz': 'lst',\n 'unit_system': 'english',\n 'units': {'Air Temperature': 'F', 'Water Temperature': 'F'},\n 'variables': ['Air Temperature', 'Water Temperature']}\n\n\n\nlen(data.index.unique()) == data.shape[0]\n\nTrue\n\n\nThe ‘last_updated’ metadata flag matches the last observation in the data record and corresponds to the most recently available observation. Also, every observation time is unique, so there are no duplicated entries. So, everything checks out.\nIn the next part, NOAA-CO-OPS-records, we will clean filter these data and calculate statistics and records.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Behind the Scenes",
      "Downloading NOAA CO-OPS Data"
    ]
  },
  {
    "objectID": "demos/NOAA-CO-OPS-plots.html",
    "href": "demos/NOAA-CO-OPS-plots.html",
    "title": "Plotting Records",
    "section": "",
    "text": "This notebook is the last in a series of three notebooks demonstrating how daily and monthly record highs, lows, and averages are calculated from NOAA CO-OPS weather and tide station data. The notebook follows sequentially from NOAA-CO-OPS-records in which we calculated record highs, lows, and averages from observational data for a particular NOAA CO-OPS weather and tide station. Daily and monthly records were written to netCDF files. Here we visualize these records as plots and as a colored dataframe.\nIn the previous notebook we calculated several records of interest:\n\nDaily and monthly averages\nRecord high daily and monthly averages*\nRecord low daily and monthly averages*\nAverage daily and monthly high\nLowest daily and monthly high*\nRecord daily and monthly high*\nAverage daily and monthly low\nHighest daily and monthly low*\nRecord daily and monthly low*\n\nFor those records marked with an asterisk (*), we also noted the year in which that particular record was set. Now let’s return to these statistics to visualize them.\n\nPackages and configurations\nAs always, we frst import the packages we need. We will use Bokeh to make interactive plots and great_tables to display the data behind the plots in a visually appealing manner.\nTo better visualize the seasonality of daily and monthly averages, average highs, and average lows, we will fit a curve to the calculated averages and plot these curves instead of the actual values. This will be done with curve_fit from SciPy.\n\nfrom datetime import datetime as dt\nfrom scipy.optimize import curve_fit\nfrom great_tables import GT, loc, style\nfrom bokeh.plotting import figure, show\nfrom bokeh.io import output_notebook\nimport bokeh.models as bm\nimport pandas as pd\nimport xarray as xr\nimport numpy as np\nimport os\noutput_notebook(hide_banner=True)\n\n\n\n\nBy default, Python only displays warnings the first time they are thrown. Ideally, we want a code that does not throw any warnings, but it sometimes takes some trial and error to resolve the issue being warned about. So, for diagnostic purposes, we’ll set the kernel to always display warnings.\n\nimport warnings\nwarnings.filterwarnings('always')\n\n\n\nFunctions\nLet’s define functions to plot the daily and monthly data. These two plots will be similar in appearance but have some differences (for example, the x axis), so two separate functions will be needed.\nFirst, we’ll need some helper functions. Some of these were used previously, while others are new:\n\ndef camel(text):\n    \"\"\"Convert 'text' to camel case\"\"\"\n    s = text.replace(',','').replace(\"-\", \" \").replace(\"_\", \" \")\n    s = s.split()\n    if len(text) == 0:\n        return text\n    return s[0].lower() + ''.join(i.capitalize() for i in s[1:])\n\ndef round_down(num, divisor):\n    \"\"\"Round num down to the nearest divisor.\n    For example, round_down(45.5, 10) will return 40.\n    \"\"\"\n    return num - (num%divisor)\n\ndef round_up(num, divisor):\n    \"\"\"Round num up to the nearest divisor.\n    For example, round_up(45.5, 10) will return 50.\n    \"\"\"\n    return num + (divisor - (num%divisor))\n\ndef cos_fit(data, plot=False):\n    \"\"\"Fit cosine curve to data\"\"\"\n    X = np.arange(0, len(data))/len(data)\n\n    # Initial parameter values\n    guess_freq = 1\n    guess_amplitude = 3*np.std(data)/(2**0.5)\n    guess_phase = 0\n    guess_offset = np.mean(data)\n    p0 = [guess_freq, guess_amplitude,\n          guess_phase, guess_offset]\n\n    # Function to fit\n    def my_cos(x, freq, amplitude, phase, offset):\n        return np.cos(x * freq + phase) * amplitude + offset\n\n    # Fit curve to data\n    fit = curve_fit(my_cos, X, data, p0=p0)\n\n    if plot:\n        fig, ax = plt.subplots(1, 1, figsize=(12,5))\n\n        ax.plot(data, label=data.name)\n        ax.plot(fit, color='red', label=f'Cosine fit')\n\n        ax.legend(loc='best')\n        plt.show()\n    else:\n        return my_cos(np.array(X), *fit[0])\n    \n\nDefining all of the colors in a dictionary will make it easier to customize everything later and will clean up the plotting codes. Below is a dictionary of three color schemes: “mg” are my chosen colors, “bm” colors are the same color scheme as Brian McNoldy’s figures on his website, and “cb” are colorblind-friendly colors.\n\n# Color dictionary\n# https://www.tutorialrepublic.com/css-reference/css-color-names.php\ncolors = dict(\n    mg=dict({\n        'Date': 'white',\n        'Month': 'white',\n        'Daily Average': '#F5F5F5',\n        'Monthly Average': '#F5F5F5',\n        'Record High Daily Average': '#ff8080',\n        'Record High Daily Average Year': '#ff8080',\n        'Record High Monthly Average': '#ff8080',\n        'Record High Monthly Average Year': '#ff8080',\n        'Record Low Daily Average': '#c1d5f8',\n        'Record Low Daily Average Year': '#c1d5f8',\n        'Record Low Monthly Average': '#c1d5f8',\n        'Record Low Monthly Average Year': '#c1d5f8',\n        'Average High': '#dc8d8d',\n        'Lowest High': '#e6aeae',\n        'Lowest High Year': '#e6aeae',        \n        'Record High': '#d26c6c',\n        'Record High Year': '#d26c6c',\n        'Average Low': '#a2bff4',\n        'Highest Low': '#d1dffa',\n        'Highest Low Year': '#d1dffa',\n        'Record Low': '#74a0ef',\n        'Record Low Year': '#74a0ef',\n        'Years': 'white',\n        'Plot Light Color': '#D3D3D3'}),\n    bm=dict({\n        'Date': 'white',\n        'Month': 'white',\n        'Daily Average': 'gainsboro',\n        'Monthly Average': 'gainsboro',\n        'Record High Daily Average': 'mistyrose',\n        'Record High Daily Average Year': 'mistyrose',\n        'Record High Monthly Average': 'mistyrose',\n        'Record High Monthly Average Year': 'mistyrose',\n        'Record Low Daily Average': 'lavender',\n        'Record Low Daily Average Year': 'lavender',\n        'Record Low Monthly Average': 'lavender',\n        'Record Low Monthly Average Year': 'lavender',\n        'Average High': 'orangered',\n        'Lowest High': 'darkorange',\n        'Lowest High Year': 'darkorange',        \n        'Record High': 'orange',\n        'Record High Year': 'orange',\n        'Average Low': 'mediumpurple',\n        'Highest Low': 'navyblue',\n        'Highest Low Year': 'navyblue',\n        'Record Low': 'lightblue',\n        'Record Low Year': 'lightblue',\n        'Years': 'white',\n        'Plot Light Color': 'white'}),\n    cb=dict({\n        'Date': 'white',\n        'Month': 'white',\n        'Daily Average': '#F5F5F5',\n        'Monthly Average': '#F5F5F5',\n        'Record High Daily Average': '#',\n        'Record High Daily Average Year': '#',\n        'Record High Monthly Average': '#',\n        'Record High Monthly Average Year': '#',\n        'Record Low Daily Average': '#',\n        'Record Low Daily Average Year': '#',\n        'Record Low Monthly Average': '#',\n        'Record Low Monthly Average Year': '#',\n        'Average High': '#dc8d8d',\n        'Lowest High': '#',\n        'Lowest High Year': '#',        \n        'Record High': '#d26c6c',\n        'Record High Year': '#d26c6c',\n        'Average Low': '#a2bff4',\n        'Highest Low': '#',\n        'Highest Low Year': '#',\n        'Record Low': '#74a0ef',\n        'Record Low Year': '#74a0ef',\n        'Years': 'white',\n        'Plot Light Color': 'white'})\n    )\n\nThe plots will be made using Bokeh for interactivity. Consequently, there are many steps involved in building and formatting the plot with the desired functionality. We will plot daily/monthly averages, average highs, and average lows as curves; record highs and record lows as points, and will highlight records set this year for emphasis. The plot will also contain a legend and a hoverbox that displays the values of each series for a given date when one hovers one’s mouse over the plot. The functions below will be used to generate daily and monthly climatology plots, and comments within the functions explain what each step does.\nNote that daily_climo also supports showing flood thresholds when used to plot water level data. THese thresholds need to be retrieved for each site and passed as a dictionary, for example:\n\nfloods = {'Major Flood Threshold': 2.5,\n          'Moderate Flood Threshold': 1.7,\n          'Minor Flood Threshold': 1.3}\n\n\ndef daily_climo(data, var, flood_thresholds=None, scheme='mg'):\n    \"\"\"Create a daily climatology plot for environmental variable 'var'\n    from 'data' using color scheme 'scheme'.\n    \n    Inputs:\n        data: xarray containing climatological stats\n        var: str, one of the available environmental variables in 'data'\n        flood_threshold: dict containing flood thresholds to add to water\n            level plot\n        scheme: str specifying which color scheme to use. Options: 'mg'\n            for M. Grossi's, 'bm' for B. McNoldy's, or 'cb' to use a\n            colorblind scheme\n    \"\"\"\n\n    # Dates for x axis\n    df = data.sel(variable=var).to_dataframe().drop('variable', axis=1)\n    df['xdates'] = pd.date_range(start='2020-01-01', end='2020-12-31', freq='1D')\n    df['Average High Curve'] = cos_fit(df['Average High']).round(1)\n    df['Daily Average Curve'] = cos_fit(df['Daily Average']).round(1)\n    df['Average Low Curve'] = cos_fit(df['Average Low']).round(1)\n    \n    # Record this year\n    thisYear = pd.to_datetime('today').year\n    thisYearRecords = (df==thisYear)[['Record High Year', 'Record Low Year']].sum().sum()\n    lastYearRecords = (df==thisYear-1)[['Record High Year', 'Record Low Year']].sum().sum()\n    df['High Records'] = df['Record High'].where(df['Record High Year'] == thisYear)\n    df['Low Records'] = df['Record Low'].where(df['Record Low Year'] == thisYear)\n    source = bm.ColumnDataSource(df)\n    \n    # Create a new plot\n    ts_start = dt.strptime(data.attrs[f'{var} data range'][0], '%Y-%m-%d').strftime('%-m/%-d/%Y')\n    ts_end = dt.strptime(data.attrs[f'{var} data range'][1], '%Y-%m-%d').strftime('%-m/%-d/%Y')\n    p = figure(title='Daily {} records  |  {} - {}\\n'.format(var.lower(), ts_start, ts_end).upper()+\n                     'As of today, {} {} record highs/lows have been set. '.format(thisYearRecords, var.lower())+\n                     'Last year, {} records were set.'.format(lastYearRecords),\n               background_fill_color='#404040', border_fill_color='#404040',\n               width=1000, height=600, x_axis_type='datetime',\n               y_range=(round_down(df['Record Low'].min(), 10), round_up(df['Record High'].max(), 10)),\n               tools='pan, wheel_zoom, box_zoom, undo, reset, fullscreen',\n               outline_line_color=None, sizing_mode='scale_height')\n\n    # This year record highs\n    hr = p.scatter(x='xdates', y='High Records', source=source,\n                   name=f'{thisYear} High Record', size=6, color='white')\n    # This year record lows\n    lr = p.scatter(x='xdates', y='Low Records', source=source,\n                   name=f'{thisYear} Low Record', size=6, color='white')\n    # Record highs\n    rh = p.scatter(x='xdates', y='Record High', source=source,\n                   name='Record High', size=2,\n                   color=colors[scheme]['Record High'])\n    # Average high\n    ah = p.line(x='xdates', y='Average High Curve', source=source,\n                name='Average High', width=3,\n                color=colors[scheme]['Average High'])\n    # Daily average\n    da = p.line(x='xdates', y='Daily Average Curve', source=source,\n                name='Daily Average', width=2,\n                color=colors[scheme]['Daily Average'])\n    # Average lows\n    al = p.line(x='xdates', y='Average Low Curve', source=source,\n                name='Average Low', width=3,\n                color=colors[scheme]['Average Low'])\n    # Record lows\n    rl = p.scatter(x='xdates', y='Record Low', source=source,\n                   name='Record Low', size=2,\n                   color=colors[scheme]['Record Low'],\n                   hover_fill_color='white', hover_alpha=0.5)\n\n    # Flood thresholds (water level plot only)\n    if var=='Water Level' and threshold is not None:\n        for level, threshold in flood_thresholds.items():\n            hline = Span(location=threshold, dimension='width',\n                         line_dash=[20,8], line_alpha=0.75,\n                         line_color='cadetblue', line_width=2)\n            p.renderers.extend([hline])\n            mytext = bm.Label(x=pd.to_datetime('2019-12-15'), y=threshold+0.1,\n                              text=level.upper(), text_color='cadetblue',\n                              text_font_size='8px',\n                              text_font='arial narrow')\n            p.add_layout(mytext)\n    \n    # Tools\n    crosshair = bm.CrosshairTool(dimensions='height',\n                              line_color='grey', line_alpha=0.5)\n    hover = bm.HoverTool(mode='vline', renderers=[da],\n                      formatters={'@xdates': 'datetime'})\n    hover.tooltips = \"\"\"\n        &lt;b&gt; @xdates{{%b %d}} &lt;/b&gt; &lt;br&gt;\n        Record High: @{{Record High}}{{0.0}} &lt;br&gt;\n        Average High: @{{Average High Curve}}{{0.0}} &lt;br&gt;\n        Daily Average: @{{Daily Average Curve}}{{0.0}} &lt;br&gt;\n        Average Low: @{{Average Low Curve}}{{0.0}} &lt;br&gt;\n        Record Low: @{{Record Low}}{{0.0}} &lt;br&gt;\n        {} High Record: @{{High Records}}{{0.0}} &lt;br&gt;\n        {} Low Record: @{{Low Records}}{{0.0}}\n        \"\"\".format(thisYear, thisYear)\n    p.add_tools(hover, crosshair)\n    p.toolbar.autohide = True\n\n    # x-axis\n    p.xaxis[0].formatter = bm.DatetimeTickFormatter(months=\"%b %d\")\n    p.xaxis[0].ticker.desired_num_ticks = 12\n    p.xgrid.grid_line_color = None\n    p.xaxis.axis_line_color = 'grey'\n    p.xaxis.major_tick_line_color = 'grey'\n    \n    # y-axis\n    p.yaxis.axis_label=f'{var} ({data.attrs[f\"{var} units\"]})'\n    p.yaxis.axis_label_text_color = colors[scheme]['Plot Light Color']\n    p.ygrid.grid_line_color = 'grey'\n    p.yaxis.axis_line_color = None\n    p.yaxis.major_tick_line_color = None\n    p.yaxis.minor_tick_line_color = None\n    \n    # Fonts\n    p.title.text_font = 'arial narrow'\n    p.title.text_font_size = '16px'\n    p.title.text_color = colors[scheme]['Plot Light Color']\n    p.xaxis.major_label_text_font = 'arial narrow'\n    p.xaxis.major_label_text_color = colors[scheme]['Plot Light Color']\n    p.xaxis.major_label_text_font_size = \"14px\"\n    p.yaxis.major_label_text_font = 'arial narrow'\n    p.yaxis.axis_label_text_font = 'arial narrow'\n    p.yaxis.axis_label_text_font_style = 'normal'\n    p.yaxis.major_label_text_color = colors[scheme]['Plot Light Color']    \n    p.yaxis.major_label_text_font_size = \"14px\"\n    p.yaxis.axis_label_text_font_size = \"14px\"\n\n    # Legend\n    legend = bm.Legend(items=[\n        ('{} Record'.format(thisYear), [hr, lr]),\n        ('Record High', [rh]),\n        ('Average High', [ah]),\n        ('Daily Average', [da]),\n        ('Average Low', [al]),\n        ('Record Low', [rl])],\n                    background_fill_color='#404040', border_line_color=None,\n                    label_text_color=colors[scheme]['Plot Light Color'],\n                    location='center_right', click_policy='mute')\n    p.add_layout(legend, 'right')\n    \n    # Show the results\n    show(p)\n\ndef monthly_climo(data, var, scheme='mg'):\n    \"\"\"Create a monthly climatology plot for environmental variable 'var'\n    from 'data' using color scheme 'scheme'.\n    \n    Inputs:\n        data: xarray containing climatological stats\n        var: str, one of the available environmental variables in 'data'\n        scheme: str specifying which color scheme to use. Options: 'mg'\n            for M. Grossi's, 'bm' for B. McNoldy's, or 'cb' to use a\n            colorblind scheme\n    \"\"\"\n\n    # Dates for x axis\n    df = data.sel(variable=var).to_dataframe().drop('variable', axis=1).reset_index()\n    df['Average High Curve'] = cos_fit(df['Average High']).round(1)\n    df['Monthly Average Curve'] = cos_fit(df['Monthly Average']).round(1)\n    df['Average Low Curve'] = cos_fit(df['Average Low']).round(1)\n    \n    # Record this year\n    thisYear = pd.to_datetime('today').year\n    thisYearRecords = (df==thisYear)[['Record High Year', 'Record Low Year']].sum().sum()\n    lastYearRecords = (df==thisYear-1)[['Record High Year', 'Record Low Year']].sum().sum()\n    df['High Records'] = df['Record High'].where(df['Record High Year'] == thisYear)\n    df['Low Records'] = df['Record Low'].where(df['Record Low Year'] == thisYear)\n    source = bm.ColumnDataSource(df)\n    \n    # Create a new plot\n    ts_start = dt.strptime(data.attrs[f'{var} data range'][0], '%Y-%m-%d').strftime('%-m/%-d/%Y')\n    ts_end = dt.strptime(data.attrs[f'{var} data range'][1], '%Y-%m-%d').strftime('%-m/%-d/%Y')\n    p = figure(title='Monthly {} records  |  {} - {}\\n'.format(var.lower(), ts_start, ts_end).upper()+\n                     'As of today, {} {} record highs/lows have been set. '.format(thisYearRecords, var.lower())+\n                     'Last year, {} records were set.'.format(lastYearRecords),\n               background_fill_color='#404040', border_fill_color='#404040',\n               width=1000, height=600,\n               x_range=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n                        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n               y_range=(round_down(df['Record Low'].min(), 10), round_up(df['Record High'].max(), 10)),\n               tools='pan, wheel_zoom, box_zoom, undo, reset, fullscreen',\n               outline_line_color=None, sizing_mode='scale_height')\n\n    # This year record highs\n    hr = p.scatter(x='Month', y='High Records', source=source,\n                   name=f'{thisYear} High Record', size=6, color='white')\n    # This year record lows\n    lr = p.scatter(x='Month', y='Low Records', source=source,\n                   name=f'{thisYear} Low Record', size=6, color='white')\n    # Record highs\n    rh = p.scatter(x='Month', y='Record High', source=source,\n                   name='Record High', size=7,\n                   color=colors[scheme]['Record High'])\n    # Average high\n    ah = p.line(x='Month', y='Average High Curve', source=source,\n                name='Average High', width=4,\n                color=colors[scheme]['Average High'])\n    # Monthly average\n    ma = p.line(x='Month', y='Monthly Average Curve', source=source,\n                name='Monthly Average', width=3,\n                color=colors[scheme]['Monthly Average'])\n    # Average lows\n    al = p.line(x='Month', y='Average Low Curve', source=source,\n                name='Average Low', width=4,\n                color=colors[scheme]['Average Low'])\n    # Record lows\n    rl = p.scatter(x='Month', y='Record Low', source=source,\n                   name='Record Low', size=7,\n                   color=colors[scheme]['Record Low'],\n                   hover_fill_color='white', hover_alpha=0.5)\n    \n    # Tools\n    crosshair = bm.CrosshairTool(dimensions='height',\n                              line_color='grey', line_alpha=0.5)\n    hover = bm.HoverTool(mode='vline', renderers=[ma],\n                      formatters={'@xdates': 'datetime'})\n    hover.tooltips = \"\"\"\n        &lt;b&gt; @Month &lt;/b&gt; &lt;br&gt;\n        Record High: @{{Record High}}{{0.0}} &lt;br&gt;\n        Average High: @{{Average High Curve}}{{0.0}} &lt;br&gt;\n        Daily Average: @{{Daily Average Curve}}{{0.0}} &lt;br&gt;\n        Average Low: @{{Average Low Curve}}{{0.0}} &lt;br&gt;\n        Record Low: @{{Record Low}}{{0.0}} &lt;br&gt;\n        {} High Record: @{{High Records}}{{0.0}} &lt;br&gt;\n        {} Low Record: @{{Low Records}}{{0.0}}\n        \"\"\".format(thisYear, thisYear)\n    p.add_tools(hover, crosshair)\n    p.toolbar.autohide = True\n\n    # x-axis\n    p.xgrid.grid_line_color = None\n    p.xaxis.axis_line_color = 'grey'\n    p.xaxis.major_tick_line_color = 'grey'\n    \n    # y-axis\n    p.yaxis.axis_label=f'{var} ({data.attrs[f\"{var} units\"]})'\n    p.yaxis.axis_label_text_color = colors[scheme]['Plot Light Color']\n    p.ygrid.grid_line_color = 'grey'\n    p.yaxis.axis_line_color = None\n    p.yaxis.major_tick_line_color = None\n    p.yaxis.minor_tick_line_color = None\n    \n    # Fonts\n    p.title.text_font = 'arial narrow'\n    p.title.text_font_size = '16px'\n    p.title.text_color = colors[scheme]['Plot Light Color']\n    p.xaxis.major_label_text_font = 'arial narrow'\n    p.xaxis.major_label_text_color = colors[scheme]['Plot Light Color']\n    p.xaxis.major_label_text_font_size = \"14px\"\n    p.yaxis.major_label_text_font = 'arial narrow'\n    p.yaxis.axis_label_text_font = 'arial narrow'\n    p.yaxis.axis_label_text_font_style = 'normal'\n    p.yaxis.major_label_text_color = colors[scheme]['Plot Light Color']    \n    p.yaxis.major_label_text_font_size = \"14px\"\n    p.yaxis.axis_label_text_font_size = \"14px\"\n\n    # Legend\n    legend = bm.Legend(items=[\n        ('{} Record'.format(thisYear), [hr, lr]),\n        ('Record High', [rh]),\n        ('Average High', [ah]),\n        ('Monthly Average', [ma]),\n        ('Average Low', [al]),\n        ('Record Low', [rl])],\n                    background_fill_color='#404040', border_line_color=None,\n                    label_text_color=colors[scheme]['Plot Light Color'],\n                    location='center_right', click_policy='mute')\n    p.add_layout(legend, 'right')\n    \n    # Show the results\n    show(p)\n\n\n\nLoading data\nNow we need to load in the records for the desired station, which will be used to determine the directory from which to load the data. As before, stationname is the custom human-readable “City, ST” string for the station.\n\nstationname = 'Virginia Key, FL'\n\nDerive the local directory name containing the data from the station name. This is the same way the directory was created when the data were downloaded.\n\ndirname = camel(stationname)\noutdir = os.path.join(os.getcwd(), dirname)\n\nprint(f\"Station folder: {dirname}\")\nprint(f\"Full directory: {outdir}\")\n\nStation folder: virginiaKeyFl\nFull directory: /workspaces/climatology-quarto/virginiaKeyFl\n\n\nNext, load the data and metadata.\n\n# Records\ndays = xr.load_dataset(os.path.join(outdir, 'statistics-daily.nc'))\nmons = xr.load_dataset(os.path.join(outdir, 'statistics-monthly.nc'))\n\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: numpy.ndarray size changed, may indicate binary incompatibility. Expected 16 from C header, got 96 from PyObject\n\n\nAnd finally, we can make some plots. Let’s look at daily and monthly climatologies for Air Temperature.\n\nvar = 'Air Temperature'\ndaily_climo(data=days, var=var, flood_thresholds=floods, scheme='mg')\n\n\n  \n\n\n\n\n\n\nmonthly_climo(data=mons, var=var, scheme='mg')\n\n\n  \n\n\n\n\n\n\n\nData Table\nOne may wish to see the data behind these plots, or see the other records not plotted. We will use the great_table library to display colored tables. We’ll demonstrate this below for Air Temperature.\n“great_tables” displays dataframes, so we first need to extract the data from the xarray object, convert to a Pandas datarame, and reset the index.\n\nstats = mons.sel(variable=var.title()).to_dataframe().drop('variable', axis=1).reset_index()\n\n# Create the `great_tables`` object and add the columns\n# We also specify any formatting of each column here including the color using the color dictionary defined above.\ngtbl = GT(stats)\nfor column in stats.columns:\n    gtbl = gtbl.tab_style(style=[style.fill(color=colors['mg'][column]), style.text(align='center', v_align='middle')], locations=loc.body(columns=column))\n\n# Now we format the rest of the table\ngtbl = (gtbl\n.cols_align(align='center')\n.tab_style(style=[style.text(color='gainsboro', weight='bold'), style.fill(color='dimgray')], locations=loc.column_header())\n.tab_options(table_font_size='13px', table_body_hlines_color='white'))\n\ngtbl.show()\n\n\n\n\n\n\n\nMonth\nMonthly Average\nRecord High Monthly Average\nRecord High Monthly Average Year\nRecord Low Monthly Average\nRecord Low Monthly Average Year\nAverage High\nLowest High\nLowest High Year\nRecord High\nRecord High Year\nAverage Low\nHighest Low\nHighest Low Year\nRecord Low\nRecord Low Year\nYears\n\n\n\n\nJan\n68.7\n72.6\n2013\n63.0\n2001\n76.0\n73.0\n2011\n78.0\n2015\n55.6\n63.5\n2013\n48.3\n1997\n23\n\n\nFeb\n70.8\n74.9\n2018\n65.5\n1996\n76.5\n74.2\n2000\n78.6\n2021\n59.4\n70.0\n2018\n47.9\n1996\n23\n\n\nMar\n72.3\n77.6\n2003\n66.1\n2010\n78.5\n74.2\n2010\n82.8\n2003\n63.3\n72.0\n1997\n55.1\n1996\n24\n\n\nApr\n75.6\n79.4\n2020\n72.8\n2004\n80.8\n77.3\n2004\n85.8\n2020\n68.3\n72.6\n2015\n61.2\n2009\n24\n\n\nMay\n78.7\n80.7\n1995\n77.0\n2013\n82.5\n80.8\n2014\n85.2\n1995\n73.8\n77.1\n2003\n67.9\n1999\n21\n\n\nJun\n81.5\n83.6\n2010\n79.8\n2014\n84.8\n82.8\n2014\n87.6\n2009\n77.6\n80.8\n2004\n75.1\n1995\n20\n\n\nJul\n82.9\n85.0\n2023\n81.0\n2013\n85.8\n84.2\n2012\n88.7\n2018\n79.0\n82.3\n2022\n76.1\n2013\n25\n\n\nAug\n83.2\n85.9\n2022\n81.8\n1994\n85.7\n84.0\n2003\n88.5\n2022\n79.3\n83.6\n2022\n76.1\n1996\n24\n\n\nSep\n82.0\n82.7\n2017\n80.6\n2001\n85.1\n83.9\n2000\n86.7\n2021\n78.2\n79.8\n2009\n74.3\n2001\n24\n\n\nOct\n79.6\n81.2\n2020\n77.5\n2000\n83.8\n81.0\n2010\n86.8\n2023\n72.7\n77.8\n1995\n64.6\n2005\n23\n\n\nNov\n75.0\n78.6\n2015\n71.4\n2012\n79.7\n76.9\n2012\n82.0\n2020\n66.0\n74.4\n2020\n57.4\n2006\n23\n\n\nDec\n71.4\n76.9\n2015\n62.1\n2010\n77.5\n72.5\n2010\n79.6\n1994\n59.2\n70.5\n2015\n48.8\n2010\n24\n\n\n\n\n\n\n        \n\n\nAnd there we have it! All of the records for each month, color coded for easier reading.\nSome concluding remarks on the choice of packages here. Another common Python library for making interactive plots is Plotly. We tried this first (see below), but encountered a known issue with rendering Plotly plots in Quarto web dashboards. In short, the first time Plotly is called in a web application, the plot renders to the proper size of the web container, but subsequent calls to Plotly (like navigating to a new tab or page) do not size figures properly. The workaround demonstrated here fixed the width rendering, but the all of the resulting plots were only half the height of the container/page. Plotly also supports displaying colored tables, but these experienced the same rendering issue with Quarto. Cue Bokeh. This library did not have the rendering problem, although the plots had slighly less interactivity than the Plotly version. Creating colored tables with Bokeh, however, turned out to be frustratingly difficult and very poorly documented. For example, Bokeh tables are colored using HTML, but there was no documentation on how to color an entire column of data. In contrast, the new library great_tables made this easy, although it too currently lacks the full interactivity that Plotly offered (e.g., sorting by column).\n\nThe following is a Plotly of the daily climatology plot above. It is basically the same but supports some behaviors that, so far, are not possible (or much harder to accomplish) with Bokeh, such as only showing records in the hoverbox on days when a record is set.\n\nimport plotly.graph_objects as go\n\n\ndef daily_climo(data, var, scheme='mg'):\n    \"\"\"Create a daily climatology plot for environmental variable 'var'\n    from 'data'.\n    \n    Inputs:\n        data: xarray containing climatological stats\n        var: str, one of the available environmental variables in 'data'\n        scheme: str, either 'mg' or 'bm' specifying whether to use M. Grossi's\n            color scheme or B. McNoldy's\n        show: Bool, display the plot to screen instead of saving to file\n    \"\"\"\n\n    # Dates for x axis\n    xdates = pd.date_range(start='2020-01-01',end='2020-12-31', freq='1D')\n    df = data.sel(variable=var)\n    \n    # Color dictionary\n    colors = dict(\n        mg=dict({\n            'Record High Year': 'white',\n            'Record High': '#d26c6c',\n            'Average High': '#dc8d8d',\n            'Daily Average': '#F5F5F5',\n            'Average Low': '#a2bff4',\n            'Record Low': '#74a0ef',\n            'Record Low Year': 'white'}),\n        bm=dict({\n            'Record High Year': 'white',\n            'Record High': 'orange',\n            'Average High': 'red',\n            'Daily Average': 'grey',\n            'Average Low': 'purple',\n            'Record Low': 'white'}        \n        ))\n    \n    # Create figure\n    fig = go.Figure()\n\n    # Record highs\n    # High records this year\n    thisYear = pd.to_datetime('today').year\n    thisYearRecords = (df==thisYear).to_dataframe().drop('variable', axis=1)[['Record High Year', 'Record Low Year']].sum().sum()\n    lastYearRecords = (df==thisYear-1).to_dataframe().drop('variable', axis=1)[['Record High Year', 'Record Low Year']].sum().sum()\n    highRecords = df['Record High'].where(df['Record High Year'] == thisYear).to_dataframe()['Record High']\n    highRecords.index = pd.to_datetime(highRecords.index+'-2020')\n    lowRecords = df['Record Low'].where(df['Record Low Year'] == thisYear).to_dataframe()['Record Low']\n    lowRecords.index = pd.to_datetime(lowRecords.index+'-2020')\n    \n    first_time = dt.strptime(df.attrs[f'{var} data range'][0], '%Y-%m-%d').strftime('%-m/%-d/%Y')\n    last_time = dt.strptime(df.attrs[f'{var} data range'][1], '%Y-%m-%d').strftime('%-m/%-d/%Y')\n    fig.add_trace(\n    go.Scatter(\n        x=highRecords.index, y=highRecords.values,\n        name=f'{pd.to_datetime(\"today\").year} Record'.upper(),\n        mode='markers',\n        marker=dict(size=6, color='white'),\n        hovertext=[f'{thisYear} Record: {i}' if not pd.isnull(i) else '' for i in highRecords.values],\n        hoverinfo='text'\n    ))\n    fig.add_trace(\n    go.Scatter(\n        x=lowRecords.index, y=lowRecords.values,\n        name='Low Record',\n        mode='markers',\n        marker=dict(size=6, color='white'),\n        hoverinfo='none'\n    ))\n    fig.add_trace(\n    go.Scatter(\n        x=xdates, y=df['Record High'],\n        name='Record High'.upper(),\n        mode='markers',\n        marker=dict(size=3, color=colors[scheme]['Record High'])\n    ))\n    # Average highs\n    fig.add_trace(\n    go.Scatter(\n        x=xdates, y=cos_fit(df['Average High']).round(1),\n        name='Average High'.upper(),\n        marker=dict(size=3, color=colors[scheme]['Average High'])\n    ))\n    # Daily average\n    fig.add_trace(\n    go.Scatter(\n        x=xdates, y=cos_fit(df['Daily Average']).round(1),\n        name='Daily Average'.upper(),\n        marker=dict(size=3, color=colors[scheme]['Daily Average'])\n    ))\n    # Average lows\n    fig.add_trace(\n    go.Scatter(\n        x=xdates,\n        y=cos_fit(df['Average Low']).round(1),\n        name='Average Low'.upper(),\n        marker=dict(size=3, color=colors[scheme]['Average Low'])\n    ))\n    # Record lows\n    fig.add_trace(\n    go.Scatter(\n        x=xdates, y=df['Record Low'],\n        name='Record Low'.upper(),\n        mode='markers',\n        marker=dict(size=3, color=colors[scheme]['Record Low'])\n    ))\n    # Hover box\n    fig.update_traces(\n        hoverlabel = dict(bordercolor='white')\n    )\n    # Plot settings\n    fig.update_layout(\n        template='plotly_dark',\n        paper_bgcolor='#404040',\n        plot_bgcolor='#404040',\n        height=600, width=1000,\n        title=dict(text='Daily {} records'.format(var.lower())+\n                        '&lt;br&gt;&lt;sup&gt;{}-{}&lt;/sup&gt;'.format(first_time, last_time)+\n                        '&lt;br&gt;&lt;sup&gt;As of today, &lt;b&gt;{}&lt;/b&gt; {} record highs/lows have been set. Last year, {} records were set.&lt;/sup&gt;'.format(\n                            thisYearRecords, var.lower(), lastYearRecords\n                        ),\n                  font=dict(size=20)),\n        yaxis = dict(title=f'{var} ({data.attrs[f\"{var} units\"]})',\n                     showgrid=True, gridcolor='grey'),\n        xaxis = dict(showgrid=False, showspikes=True,\n                     dtick='M1', tickformat='%b %d'),\n        hovermode='x unified',\n        legend=dict(itemsizing='constant'),\n        hoverlabel=dict(font_size=12)\n    )\n    for trace in fig['data']: \n        if trace['name'] == 'Low Record':\n            trace['showlegend'] = False\n    fig.show()\n\n\ndaily_climo(days, 'Air Temperature', scheme='mg')\n\n                                                \n\n\nThat concludes this climatology demonstration series.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Behind the Scenes",
      "Plotting Records"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Local Climatologies",
    "section": "",
    "text": "Daily and monthly averages and records of NOAA CO-OPS weather and\ntide observations at different locations along the U.S. East Coast"
  },
  {
    "objectID": "index.html#active-sites-updated-daily",
    "href": "index.html#active-sites-updated-daily",
    "title": "Local Climatologies",
    "section": "Active Sites (updated daily)",
    "text": "Active Sites (updated daily)\n\n\n\n\n\n\n\n\n\n\nVirginia Key, FL\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#archived-sites-updated-less-frequently",
    "href": "index.html#archived-sites-updated-less-frequently",
    "title": "Local Climatologies",
    "section": "Archived Sites (updated less frequently)",
    "text": "Archived Sites (updated less frequently)\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "methods.html",
    "href": "methods.html",
    "title": "How are these records calculated?",
    "section": "",
    "text": "All data from the beginning of each time series to the present are retrieved from the NOAA CO-OPS Tides and Currents data portal and saved to file to avoid having to repeatedly re-download the historical data. Subsequent data updates retrieve from the most recently saved timestamp onward and append these new data to the saved historical record.\nSix-minute data are used whenever possible and hourly data otherwise.\nAny observations flagged by NOAA as being suspect for any reason (flag &gt; 0) are discarded. Examples of flagged data are a minimum or maximum value or a rate of change exceeding an acceptable tolerance. A day is allowed to have up to three hours of missing data to be counted in the daily climatologies, and a month is allowed up to two days of missing data to be counted in the monthly climatologies.\nAll of the statistics and records herein start with one of three quantities: daily highs, daily lows, or daily averages. Each of these is first calculated for each environmental variable (i.e., air temperature, water temperature, water level) and for every day in the data time series as follows.",
    "crumbs": [
      "Home",
      "Methodology"
    ]
  },
  {
    "objectID": "methods.html#daily-climatologies",
    "href": "methods.html#daily-climatologies",
    "title": "How are these records calculated?",
    "section": "Daily Climatologies",
    "text": "Daily Climatologies\nDaily climatologies are calculated for each day-of-year (DOY), where\n\nJan 1 \\(\\longrightarrow\\) Day 1\nJan 2 \\(\\longrightarrow\\) Day 2\n…\nFeb 28 \\(\\longrightarrow\\) Day 59\nFeb 29 \\(\\longrightarrow\\) Day 60\n…\nDec 30 \\(\\longrightarrow\\) Day 365\nDec 31 \\(\\longrightarrow\\) Day 366\n\nInstead of eliminating February 29 on leap years, Day 60 simply skipped in years that are not leap years. Thus, December 31 is always Day 366. Days start at midnight (00:00) and go until 23:59 (11:59 PM) local time.\n\nDOY Daily Average\nThe DOY daily average is the average of all daily averages for any given DOY. It is calculated by taking the daily averages calculated using Equation 3, grouping them by DOY, and calculating the average for each DOY.\nLet \\(\\textbf{A}\\) be a matrix of daily averages from Equation 3 arranged with years in rows and DOY in columns, and for simplicity, let subscript \\(y\\) indicate year and \\(d\\) indicate DOY:\n\\[\\textbf{A} = (a_{yd}) = \\left( \\begin{array}{cccc}\na_{1,1} & a_{1,2} & ... & a_{1,d} \\\\\na_{2,1} & a_{2,2} & ... & a_{2,d} \\\\\n\\vdotswithin{=} & \\vdotswithin{=} &  & \\vdotswithin{=} \\\\\na_{y,1} & a_{y,2} & ... & a_{y,d} \\end{array} \\right) \\tag{5}\\]\nThe DOY daily average is the average over each column:\n\\[\\text{DOY daily average} = \\frac{1}{Y}\\sum_{y=1}^Y a_{yd} \\tag{6}\\]\nwhere \\(Y\\) is the number of years in the observational time series.\nNote: The Daily Average reported in the statistics dashboard are DOY daily averages from Equation 6.\n\n\nRecord High Daily Average\nThe record high daily average is the maximum daily average for any given DOY. It is determined by taking the daily averages calculated using Equation 3, grouping them by DOY, and finding the maximum value for each DOY. Given \\(\\textbf{A}\\) from Equation 5 above:\n\\[\\text{record high daily average} = {\\max}_d |a_{yd}| = \\max\\{|a_{yd}|: d=1,2,...,366\\} \\tag{7}\\]\n\n\nRecord Low Daily Average\nThe record low daily average is the minimum daily average for any given DOY. It is determined by taking the daily averages calculated using Equation 3, grouping them by DOY, and finding the minimum value for each DOY. Given \\(\\textbf{A}\\) from Equation 5 above:\n\\[\\text{record low daily average} = {\\min}_d |a_{yd}| = \\min\\{|a_{yd}|: d=1,2,...,366\\} \\tag{8}\\]\n\n\nAverage High\nThe average high is the average of all daily highs for any given DOY. It is determined by taking the daily highs calculated using Equation 1, grouping them by DOY, and calculating the average for each DOY.\nLet \\(\\textbf{H}\\) be a matrix of daily highs from Equation 1 arranged with years in rows and DOY in columns, and for simplicity, let subscript \\(y\\) indicate year and \\(d\\) indicate DOY:\n\\[\\textbf{H} = (h_{yd}) = \\left( \\begin{array}{cccc}\nh_{1,1} & h_{1,2} & ... & h_{1,d} \\\\\nh_{2,1} & h_{2,2} & ... & h_{2,d} \\\\\n\\vdotswithin{=} & \\vdotswithin{=} &  & \\vdotswithin{=} \\\\\nh_{y,1} & h_{y,2} & ... & h_{y,d} \\end{array} \\right) \\tag{9}\\]\nThe average high is the average over each column:\n\\[\\text{average high} = \\frac{1}{Y}\\sum_{y=1}^Y h_{yd} \\tag{10}\\]\nwhere \\(Y\\) is the number of years in the observational time series.\n\n\nRecord High\nThe record high is the maximum daily high for any given DOY. It is determined by taking the daily highs calculated using Equation 1, grouping them by DOY, and finding the maximum value for each DOY. Given \\(\\textbf{H}\\) from Equation 9 above:\n\\[\\text{record high} = {\\max}_d |h_{yd}| = \\max\\{|h_{yd}|: d=1,2,...,366\\} \\tag{11}\\]\n\n\nLowest High\nThe lowest high is the minimum daily high for any given DOY. It is determined by taking the daily highs calculated using Equation 1, grouping them by DOY, and finding the minimum value for each DOY. Given \\(\\textbf{H}\\) from Equation 9 above:\n\\[\\text{lowest high} = {\\min}_d |h_{yd}| = \\min\\{|h_{yd}|: d=1,2,...,366\\} \\tag{12}\\]\n\n\nAverage Low\nThe average low is the average of all daily lows for any given DOY. It is determined by taking the daily lows calculated using Equation 2, grouping them by DOY, and calculating the average for each DOY.\nLet \\(\\textbf{L}\\) be a matrix of daily lows from Equation 2 arranged with years in rows and DOY in columns, and for simplicity, let subscript \\(y\\) indicate year and \\(d\\) indicate DOY:\n\\[\\textbf{L} = (l_{yd}) = \\left( \\begin{array}{cccc}\nl_{1,1} & l_{1,2} & ... & l_{1,d} \\\\\nl_{2,1} & l_{2,2} & ... & l_{2,d} \\\\\n\\vdotswithin{=} & \\vdotswithin{=} &  & \\vdotswithin{=} \\\\\nl_{y,1} & l_{y,2} & ... & l_{y,d} \\end{array} \\right) \\tag{13}\\]\nThe average low is the average over each column:\n\\[\\text{average low} = \\frac{1}{Y}\\sum_{y=1}^Y l_{yd} \\tag{14}\\]\nwhere \\(Y\\) is the number of years in the observational time series.\n\n\nHighest Low\nThe highest low is the maximum daily low for any given DOY. It is determined by taking the daily lows calculated using Equation 2, grouping them by DOY, and finding the maximum value for each DOY. Given \\(\\textbf{L}\\) from Equation 13 above:\n\\[\\text{highest low} = {\\max}_d |l_{yd}| = \\max\\{|l_{yd}|: d=1,2,...,366\\} \\tag{15}\\]\n\n\nRecord Low\nThe record low is the minimum daily low for any given DOY. It is determined by taking the daily lows calculated using Equation 2, grouping them by DOY, and finding the minimum value for each DOY. Given \\(\\textbf{L}\\) from Equation 13 above:\n\\[\\text{record low} = {\\min}_d |l_{yd}| = \\min\\{|l_{yd}|: d=1,2,...,366\\} \\tag{16}\\]\n\n\nNumber of Years in Record\nThe number of years of data available varies from day to day and between variables due to sensor availability, gaps in the observational record, or bad data being filtered out. Years are tallied by grouping the entire time series by DOY and counting the number of years for each day. For example, given \\(\\textbf{A}\\) from Equation 5 above, the number of years is the total number of unique years in each column.",
    "crumbs": [
      "Home",
      "Methodology"
    ]
  },
  {
    "objectID": "methods.html#monthly-climatologies",
    "href": "methods.html#monthly-climatologies",
    "title": "How are these records calculated?",
    "section": "Monthly Climatologies",
    "text": "Monthly Climatologies\nMonthly climatologies are calculated in the same way as daily climatologies except daily highs, lows, and averages are grouped by calendar month instead of DOY.\n\nMonthly Average\nThe monthly average is the average of all daily averages for any given month. It is calculated by taking the daily averages calculated using Equation 3, grouping them by calendar month, and calculating the average for each month.\nLet \\(\\textbf{A}\\) now be a matrix of daily averages from Equation 3 arranged with years in rows and months in columns, and for simplicity, let subscript \\(y\\) indicate year and \\(m\\) indicate month:\n\\[\\textbf{A} = (a_{ym}) = \\left( \\begin{array}{cccc}\na_{1,1} & a_{1,2} & ... & a_{1,12} \\\\\na_{2,1} & a_{2,2} & ... & a_{2,12} \\\\\n\\vdotswithin{=} & \\vdotswithin{=} &  & \\vdotswithin{=} \\\\\na_{y,1} & a_{y,2} & ... & a_{y,12} \\end{array} \\right) \\tag{17}\\]\nThe monthly average is the average over each column:\n\\[\\text{monthly average} = \\frac{1}{Y}\\sum_{y=1}^Y a_{ym} \\tag{18}\\]\nwhere \\(Y\\) is the number of years in the observational time series.\n\n\nRecord High Monthly Average\nThe record high monthly average is the maximum daily average for any given calendar month. It is determined by taking the daily averages calculated using Equation 3, grouping them by calendar month, and finding the maximum value for each month. Given \\(\\textbf{A}\\) from Equation 17 above:\n\\[\\text{record high monthly average} = {\\max}_m |a_{ym}| = \\max\\{|a_{ym}|: m=1,2,...,12\\} \\tag{19}\\]\n\n\nRecord Low Monthly Average\nThe record low monthly average is the minimum daily average for any given calendar month. It is determined by taking the daily averages calculated using Equation 3, grouping them by calendar month, and finding the minimum value for each month. Given \\(\\textbf{A}\\) from Equation 17 above:\n\\[\\text{record low monthly average} = {\\min}_m |a_{ym}| = \\min\\{|a_{ym}|: m=1,2,...,12\\} \\tag{20}\\]\n\n\nAverage High\nThe average high is the average of all daily highs for any given calendar month. It is determined by taking the daily highs calculated using Equation 1, grouping them by calendar month, and calculating the average for each month.\nLet \\(\\textbf{H}\\) now be a matrix of daily highs from Equation 1 arranged with years in rows and months in columns, and for simplicity, let subscript \\(y\\) indicate year and \\(m\\) indicate month:\n\\[\\textbf{H} = (h_{ym}) = \\left( \\begin{array}{cccc}\nh_{1,1} & h_{1,2} & ... & h_{1,12} \\\\\nh_{2,1} & h_{2,2} & ... & h_{2,12} \\\\\n\\vdotswithin{=} & \\vdotswithin{=} &  & \\vdotswithin{=} \\\\\nh_{y,1} & h_{y,2} & ... & h_{y,12} \\end{array} \\right) \\tag{21}\\]\nThe average high is the average over each column:\n\\[\\text{average high} = \\frac{1}{Y}\\sum_{y=1}^Y h_{ym} \\tag{22}\\]\nwhere \\(Y\\) is the number of years in the observational time series.\n\n\nRecord High\nThe record high is the maximum daily high for any given calendar month. It is determined by taking the daily highs calculated using Equation 1, grouping them by calendar month, and finding the maximum value for each month. Given \\(\\textbf{H}\\) from Equation 21 above:\n\\[\\text{record high} = {\\max}_m |h_{ym}| = \\max\\{|h_{ym}|: m=1,2,...,12\\} \\tag{23}\\]\n\n\nLowest High\nThe lowest high is the minimum daily high for any given calendar month. It is determined by taking the daily highs calculated using Equation 1, grouping them by calendar month, and finding the minimum value for each month. Given \\(\\textbf{H}\\) from Equation 21 above:\n\\[\\text{lowest high} = {\\min}_m |h_{ym}| = \\min\\{|h_{ym}|: m=1,2,...,12\\} \\tag{24}\\]\n\n\nAverage Low\nThe average low is the average of all daily lows for any given calendar month. It is determined by taking the daily lows calculated using Equation 2, grouping them by calendar month, and calculating the average for each month.\nLet \\(\\textbf{L}\\) now be a matrix of daily lows from Equation 2 arranged with years in rows and months in columns, and for simplicity, let subscript \\(y\\) indicate year and \\(m\\) indicate month:\n\\[\\textbf{L} = (l_{ym}) = \\left( \\begin{array}{cccc}\nl_{1,1} & l_{1,2} & ... & l_{1,12} \\\\\nl_{2,1} & l_{2,2} & ... & l_{2,12} \\\\\n\\vdotswithin{=} & \\vdotswithin{=} &  & \\vdotswithin{=} \\\\\nl_{y,1} & l_{y,2} & ... & l_{y,12} \\end{array} \\right) \\tag{25}\\]\nThe average low is the average over each column:\n\\[\\text{average low} = \\frac{1}{Y}\\sum_{y=1}^Y l_{ym} \\tag{26}\\]\nwhere \\(Y\\) is the number of years in the observational time series.\n\n\nHighest Low\nThe highest low is the maximum daily low for any given calendar month. It is determined by taking the daily lows calculated using Equation 2, grouping them by calendar month, and finding the maximum value for each month. Given \\(\\textbf{L}\\) from Equation 25 above:\n\\[\\text{highest low} = {\\max}_m |l_{ym}| = \\max\\{|l_{ym}|: m=1,2,...,12\\} \\tag{27}\\]\n\n\nRecord Low\nThe record low is the minimum daily low for any given calendar month. It is determined by taking the daily lows calculated using Equation 2, grouping them by calendar month, and finding the minimum value for each month. Given \\(\\textbf{L}\\) from Equation 25 above:\n\\[\\text{record low} = {\\min}_m |l_{ym}| = \\min\\{|l_{ym}|: m=1,2,...,12\\} \\tag{28}\\]\n\n\nNumber of Years in Record\nThe number of years of data available varies from month to month and between variables due to sensor availability, gaps in the observational record, or bad data being filtered out. Years are tallied by grouping the entire time series by calendar month and counting the number of years for each month. For example, given \\(\\textbf{A}\\) from Equation 17 above, the number of years is the total number of unique years in each column.",
    "crumbs": [
      "Home",
      "Methodology"
    ]
  },
  {
    "objectID": "demos/index.html",
    "href": "demos/index.html",
    "title": "Demonstrations",
    "section": "",
    "text": "The following notebooks demonstrate the code behind the dashboards. There are three steps:\n\nDownload the data\nCalculate the statistics and determine the records\nPlot and display the results\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Behind the Scenes"
    ]
  }
]