
---
title: "Virginia Key, FL"
image: ../../../images/vkfl.JPG
format:
  dashboard:
    logo: ../../../images/vkfl.JPG
    scrolling: false
---

```{python}
#| include: False

# SET THE DIRECTORY NAME
dirName = 'virginiaKeyFl'

# ENTER THE FLOOD THRESHOLDS FOR THIS SITE
# https://water.noaa.gov/gauges/vakf1
floods = {
    'Major Flood Threshold': 2.5,
    'Moderate Flood Threshold': 1.7,
    'Minor Flood Threshold': 1.3
    }
```

```{python}
#| include: False

from IPython.display import Markdown
from scipy.optimize import curve_fit
from datetime import datetime as dt
# import plotly.graph_objects as go
import pandas as pd
import xarray as xr
import numpy as np
import bokeh.models as bm
from bokeh.io import output_notebook
from bokeh.plotting import figure, show
from great_tables import GT, loc, style
# from polars import selectors as cs
# import plotly.io as pio
# pio.renderers.default = 'notebook_connected'
output_notebook(hide_banner=True)

today = dt.today().strftime('%d-%b')
daily_stats = xr.load_dataset(f'../../../{dirName}/statistics-daily.nc')
monthly_stats = xr.load_dataset(f'../../../{dirName}/statistics-monthly.nc')

# Color dictionary
# https://www.tutorialrepublic.com/css-reference/css-color-names.php
colors = dict(
    mg=dict({
        'Date': 'white',
        'Month': 'white',
        'Daily Average': '#F5F5F5',
        'Monthly Average': '#F5F5F5',
        'Record High Daily Average': '#ff8080',
        'Record High Daily Average Year': '#ff8080',
        'Record High Monthly Average': '#ff8080',
        'Record High Monthly Average Year': '#ff8080',
        'Record Low Daily Average': '#c1d5f8',
        'Record Low Daily Average Year': '#c1d5f8',
        'Record Low Monthly Average': '#c1d5f8',
        'Record Low Monthly Average Year': '#c1d5f8',
        'Average High': '#dc8d8d',
        'Lowest High': '#e6aeae',
        'Lowest High Year': '#e6aeae',        
        'Record High': '#d26c6c',
        'Record High Year': '#d26c6c',
        'Average Low': '#a2bff4',
        'Highest Low': '#d1dffa',
        'Highest Low Year': '#d1dffa',
        'Record Low': '#74a0ef',
        'Record Low Year': '#74a0ef',
        'Years': 'white',
        'Plot Light Color': '#D3D3D3'}),
    bm=dict({
        'Date': 'white',
        'Month': 'white',
        'Daily Average': 'gainsboro',
        'Monthly Average': 'gainsboro',
        'Record High Daily Average': 'mistyrose',
        'Record High Daily Average Year': 'mistyrose',
        'Record High Monthly Average': 'mistyrose',
        'Record High Monthly Average Year': 'mistyrose',
        'Record Low Daily Average': 'lavender',
        'Record Low Daily Average Year': 'lavender',
        'Record Low Monthly Average': 'lavender',
        'Record Low Monthly Average Year': 'lavender',
        'Average High': 'orangered',
        'Lowest High': 'darkorange',
        'Lowest High Year': 'darkorange',        
        'Record High': 'orange',
        'Record High Year': 'orange',
        'Average Low': 'mediumpurple',
        'Highest Low': 'navyblue',
        'Highest Low Year': 'navyblue',
        'Record Low': 'lightblue',
        'Record Low Year': 'lightblue',
        'Years': 'white',
        'Plot Light Color': 'white'}),
    cb=dict({
        'Date': 'white',
        'Month': 'white',
        'Daily Average': '#F5F5F5',
        'Monthly Average': '#F5F5F5',
        'Record High Daily Average': '#',
        'Record High Daily Average Year': '#',
        'Record High Monthly Average': '#',
        'Record High Monthly Average Year': '#',
        'Record Low Daily Average': '#',
        'Record Low Daily Average Year': '#',
        'Record Low Monthly Average': '#',
        'Record Low Monthly Average Year': '#',
        'Average High': '#dc8d8d',
        'Lowest High': '#',
        'Lowest High Year': '#',        
        'Record High': '#d26c6c',
        'Record High Year': '#d26c6c',
        'Average Low': '#a2bff4',
        'Highest Low': '#',
        'Highest Low Year': '#',
        'Record Low': '#74a0ef',
        'Record Low Year': '#74a0ef',
        'Years': 'white',
        'Plot Light Color': 'white'})
    )

deg = u'\N{DEGREE SIGN}'

# def getval(var, record, type):
#     """Retrieve 'var' 'record' from stats table for use in valueboxes"""
#     if type.lower() == 'daily':
#         val = daily_stats[record].sel(variable=var, Date=today).values
#     elif type.lower() == 'monthly':
#         val = monthly_stats[record].sel(variable=var, Date=today).values
#     else:
#         raise ValueError("'type' must be either 'daily' or 'monthly'")
#     return str(val)+f' {deg}F'

def colortable(stats, var):
    """Display a great_tables table if the variable 'var' exists in 'stats'. Otherwise, display a message that the data do not exist."""
    def getrows(record):
        thisyear = dt.today().year
        return df[(df[record] == thisyear)].index.to_list()

    def getcols(record):
        return [record.replace(' Year', ''), record]
    
    freq = 'Monthly' if 'Month' in stats.sizes.keys() else 'Daily'
    try:
        if var == 'Water Level':
            df = stats.sel(variable=var.title()).to_dataframe()\
                        .drop('variable', axis=1).round(2).reset_index()
        else:
            df = stats.sel(variable=var.title()).to_dataframe()\
                        .drop('variable', axis=1).round(1).reset_index()
        
        # # Data record
        ts_start = dt.strptime(stats.attrs[f'{var} data range'][0], '%Y-%m-%d').strftime('%-m/%-d/%Y')
        ts_end = dt.strptime(stats.attrs[f'{var} data range'][1], '%Y-%m-%d').strftime('%-m/%-d/%Y')
 
        # # Records this year
        thisYear = pd.to_datetime('today').year
        cols = df.columns[df.columns.str.endswith('Year')]
        thisYearRecords = (df==thisYear)[cols].sum().sum()
        lastYearRecords = (df==thisYear-1)[cols].sum().sum()

        # Add columns
        gtbl = GT(df)
        for column in df.columns:
            gtbl = gtbl.tab_style(style=[style.fill(color=colors['mg'][column]), style.text(v_align='middle')], locations=loc.body(columns=column))
    
        # Format table
        gtbl = (gtbl
        .cols_align(align='center')
        .tab_style(style=[style.text(color='gainsboro', weight='bold'), style.fill(color='dimgray')], locations=loc.column_header())
        .tab_options(table_font_size='13px', 
                     table_body_hlines_color='white',
                     heading_align='left',
                     heading_title_font_weight='bold',
                     heading_background_color='gainsboro')
        .tab_header(title="""As of today, {} {} record observations have been reported this year. Last year, {} records were reported.""".format(thisYearRecords, var.lower(), lastYearRecords),
                    subtitle='DATA RECORD: {} - {}'.format(ts_start, ts_end))
        )
        
        # Bolden records this year
        for record in df.columns[df.columns.str.endswith('Year')]:
            gtbl = gtbl.tab_style(
                style = style.text(weight='bold'),
                locations = loc.body(columns=getcols(record), rows=getrows(record)))

        gtbl.show()

    except KeyError:
        print(f'{freq} {var.lower()} data are not available for this station.')

def plotlytable(stats, var):
    """Display a Plotly table if the variable 'var' exists in 'stats'. Otherwise, display a message that the data do not exist."""
    # Colors:
    # https://www.tutorialrepublic.com/css-reference/css-color-names.php
    freq = 'Monthly' if 'Month' in stats.sizes.keys() else 'Daily'
    try:
        if var == 'Water Level':
            stats = stats.sel(variable=var.title()).to_dataframe()\
                        .drop('variable', axis=1).round(2).reset_index()
        else:
            stats = stats.sel(variable=var.title()).to_dataframe()\
                        .drop('variable', axis=1).round(1).reset_index()
        fig = go.Figure(data=[go.Table(
            header=dict(#values=list(stats.reset_index().columns),
                        values=[f'<b>{i}</b>' for i in stats.reset_index().columns],
                        fill_color='grey',
                        font_color='white',
                        font_size=12,
                        align='left'),
            cells=dict(values=stats.reset_index().T,
                    fill_color=[colors['mg'][i] for i in stats.columns],
                    font_size=12,
                    align='center')
            )])
        fig.show()
    except KeyError:
        print(f'{freq} {var.lower()} data are not available for this station.')

def cos_fit(data):
    """Fit cosine curve to data"""
    X = np.arange(0, len(data))/len(data)

    # Initial parameter values
    guess_freq = 1
    guess_amplitude = 3*np.std(data)/(2**0.5)
    guess_phase = 0
    guess_offset = np.mean(data)
    p0 = [guess_freq, guess_amplitude,
          guess_phase, guess_offset]

    # Function to fit
    def my_cos(x, freq, amplitude, phase, offset):
        return np.cos(x * freq + phase) * amplitude + offset

    # Fit curve to data
    fit = curve_fit(my_cos, X, data, p0=p0)
    
    return my_cos(np.array(X), *fit[0])

def round_down(num, divisor):
    """Round num down to the nearest divisor.
    For example, round_down(45.5, 10) will return 40.
    """
    return num - (num%divisor)

def round_up(num, divisor):
    """Round num up to the nearest divisor.
    For example, round_up(45.5, 10) will return 50.
    """
    return num + (divisor - (num%divisor))

def daily_climo(data, var, flood_thresholds, scheme='mg'):
    """Create a daily climatology plot for environmental variable 'var'
    from 'data' using color scheme 'scheme'.
    
    Inputs:
        data: xarray containing climatological stats
        var: str, one of the available environmental variables in 'data'
        flood_threshold: dict containing flood thresholds to add to water
            level plot
        scheme: str specifying which color scheme to use. Options: 'mg'
            for M. Grossi's, 'bm' for B. McNoldy's, or 'cb' to use a
            colorblind scheme
    """

    # Dates for x axis
    df = data.sel(variable=var).to_dataframe().drop('variable', axis=1)
    df['xdates'] = pd.date_range(start='2020-01-01', end='2020-12-31', freq='1D')
    df['Average High Curve'] = cos_fit(df['Average High'])
    df['Daily Average Curve'] = cos_fit(df['Daily Average'])
    df['Average Low Curve'] = cos_fit(df['Average Low'])
    
    # Records this year
    thisYear = pd.to_datetime('today').year
    df['High Records'] = df['Record High'].where(df['Record High Year'] == thisYear)
    df['Low Records'] = df['Record Low'].where(df['Record Low Year'] == thisYear)
    source = bm.ColumnDataSource(df)
    
    # Create a new plot
    ts_start = dt.strptime(data.attrs[f'{var} data range'][0], '%Y-%m-%d').strftime('%-m/%-d/%Y')
    ts_end = dt.strptime(data.attrs[f'{var} data range'][1], '%Y-%m-%d').strftime('%-m/%-d/%Y')
    p = figure(title=f'DATA RECORD: {ts_start} - {ts_end}',
               background_fill_color='#404040', border_fill_color='#404040',
               width=1000, height=600, x_axis_type='datetime',
               y_range=(round_down(df['Record Low'].min(), 10), round_up(df['Record High'].max(), 10)),
               tools='pan, wheel_zoom, box_zoom, undo, reset, fullscreen',
               outline_line_color=None, sizing_mode='scale_height')

    # This year record highs
    hr = p.scatter(x='xdates', y='High Records', source=source,
                   name=f'{thisYear} High Record', size=4, color='white')
    hr.level = 'overlay'
    # This year record lows
    lr = p.scatter(x='xdates', y='Low Records', source=source,
                   name=f'{thisYear} Low Record', size=4, color='white')
    lr.level = 'overlay'
    # Record highs
    rh = p.scatter(x='xdates', y='Record High', source=source,
                   name='Record High', size=2,
                   color=colors[scheme]['Record High'])
    # Average high
    ah = p.line(x='xdates', y='Average High Curve', source=source,
                name='Average High', width=3,
                color=colors[scheme]['Average High'])
    # Daily average
    da = p.line(x='xdates', y='Daily Average Curve', source=source,
                name='Daily Average', width=2,
                color=colors[scheme]['Daily Average'])
    # Average lows
    al = p.line(x='xdates', y='Average Low Curve', source=source,
                name='Average Low', width=3,
                color=colors[scheme]['Average Low'])
    # Record lows
    rl = p.scatter(x='xdates', y='Record Low', source=source,
                   name='Record Low', size=2,
                   color=colors[scheme]['Record Low'],
                   hover_fill_color='white', hover_alpha=0.5)

    # Flood thresholds (water level plot only)
    if var=='Water Level':
        for level, threshold in flood_thresholds.items():
            hline = bm.Span(location=threshold, dimension='width',
                         line_dash=[20,8], line_alpha=0.75,
                         line_color='cadetblue', line_width=2)
            p.renderers.extend([hline])
            mytext = bm.Label(x=pd.to_datetime('2019-12-15'), y=threshold+0.1,
                              text=level.upper(), text_color='cadetblue',
                              text_font_size='8px',
                              text_font='arial narrow')
            p.add_layout(mytext)
    
    # Tools
    crosshair = bm.CrosshairTool(dimensions='height',
                              line_color='grey', line_alpha=0.5)
    hover = bm.HoverTool(mode='vline', renderers=[da],
                      formatters={'@xdates': 'datetime'})
    units = data.attrs[f"{var} units"]
    if var=='Water Level':
        hover.tooltips = """
            <b> @xdates{{%b %d}} </b> <br>
            Record High: @{{Record High}}{{0.00}} {u}<br>
            Average High: @{{Average High Curve}}{{0.00}} {u}<br>
            Daily Average: @{{Daily Average Curve}}{{0.00}} {u}<br>
            Average Low: @{{Average Low Curve}}{{0.00}} {u}<br>
            Record Low: @{{Record Low}}{{0.00}} {u}<br>
            {y} High Record: @{{High Records}}{{0.00}} {u}<br>
            {y} Low Record: @{{Low Records}}{{0.00}} {u}
            """.format(u=units, y=thisYear)
    else:
        hover.tooltips = """
            <b> @xdates{{%b %d}} </b> <br>
            Record High: @{{Record High}}{{0.0}} {u}<br>
            Average High: @{{Average High Curve}}{{0.0}} {u}<br>
            Daily Average: @{{Daily Average Curve}}{{0.0}} {u}<br>
            Average Low: @{{Average Low Curve}}{{0.0}} {u}<br>
            Record Low: @{{Record Low}}{{0.0}} {u}<br>
            {y} High Record: @{{High Records}}{{0.0}} {u}<br>
            {y} Low Record: @{{Low Records}}{{0.0}} {u}
            """.format(u=units, y=thisYear)
    p.add_tools(hover, crosshair)
    p.toolbar.autohide = True

    # x-axis
    p.xaxis[0].formatter = bm.DatetimeTickFormatter(months="%b %d")
    p.xaxis[0].ticker.desired_num_ticks = 12
    p.xgrid.grid_line_color = None
    p.xaxis.axis_line_color = 'grey'
    p.xaxis.major_tick_line_color = 'grey'
    
    # y-axis
    p.yaxis.axis_label=f'{var} ({data.attrs[f"{var} units"]})'
    p.yaxis.axis_label_text_color = colors[scheme]['Plot Light Color']
    p.ygrid.grid_line_color = 'grey'
    p.yaxis.axis_line_color = None
    p.yaxis.major_tick_line_color = None
    p.yaxis.minor_tick_line_color = None
    
    # Fonts
    p.title.text_font = 'arial narrow'
    p.title.text_font_size = '16px'
    p.title.text_color = 'darkgray'
    p.xaxis.major_label_text_font = 'arial narrow'
    p.xaxis.major_label_text_color = colors[scheme]['Plot Light Color']
    p.xaxis.major_label_text_font_size = "14px"
    p.yaxis.major_label_text_font = 'arial narrow'
    p.yaxis.axis_label_text_font = 'arial narrow'
    p.yaxis.axis_label_text_font_style = 'normal'
    p.yaxis.major_label_text_color = colors[scheme]['Plot Light Color']    
    p.yaxis.major_label_text_font_size = "14px"
    p.yaxis.axis_label_text_font_size = "14px"

    # Legend
    legend = bm.Legend(items=[
        ('{} Record'.format(thisYear), [hr, lr]),
        ('Record High', [rh]),
        ('Average High', [ah]),
        ('Daily Average', [da]),
        ('Average Low', [al]),
        ('Record Low', [rl])],
                    background_fill_color='#404040', border_line_color=None,
                    label_text_color=colors[scheme]['Plot Light Color'],
                    location='center_right', click_policy='mute')
    p.add_layout(legend, 'right')
    
    # Show the results
    show(p)

def monthly_climo(data, var, scheme='mg'):
    """Create a monthly climatology plot for environmental variable 'var'
    from 'data' using color scheme 'scheme'.
    
    Inputs:
        data: xarray containing climatological stats
        var: str, one of the available environmental variables in 'data'
        scheme: str specifying which color scheme to use. Options: 'mg'
            for M. Grossi's, 'bm' for B. McNoldy's, or 'cb' to use a
            colorblind scheme
    """

    # Dates for x axis
    df = data.sel(variable=var).to_dataframe().drop('variable', axis=1).reset_index()
    df['Average High Curve'] = cos_fit(df['Average High'])
    df['Monthly Average Curve'] = cos_fit(df['Monthly Average'])
    df['Average Low Curve'] = cos_fit(df['Average Low'])
    
    # Record this year
    thisYear = pd.to_datetime('today').year
    df['High Records'] = df['Record High'].where(df['Record High Year'] == thisYear)
    df['Low Records'] = df['Record Low'].where(df['Record Low Year'] == thisYear)
    source = bm.ColumnDataSource(df)
    
    # Create a new plot
    ts_start = dt.strptime(data.attrs[f'{var} data range'][0], '%Y-%m-%d').strftime('%-m/%-d/%Y')
    ts_end = dt.strptime(data.attrs[f'{var} data range'][1], '%Y-%m-%d').strftime('%-m/%-d/%Y')
    p = figure(title=f'DATA RECORD: {ts_start} - {ts_end}',
               background_fill_color='#404040', border_fill_color='#404040',
               width=1000, height=600,
               x_range=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
               y_range=(round_down(df['Record Low'].min(), 1), round_up(df['Record High'].max(), 1)),
               tools='pan, wheel_zoom, box_zoom, undo, reset, fullscreen',
               outline_line_color=None, sizing_mode='scale_height')

    # This year record highs
    hr = p.scatter(x='Month', y='High Records', source=source,
                   name=f'{thisYear} High Record', size=7, color='white')
    hr.level = 'overlay'
    # This year record lows
    lr = p.scatter(x='Month', y='Low Records', source=source,
                   name=f'{thisYear} Low Record', size=7, color='white')
    lr.level = 'overlay'
    # Record highs
    rh = p.scatter(x='Month', y='Record High', source=source,
                   name='Record High', size=7,
                   color=colors[scheme]['Record High'])
    # Average high
    ah = p.line(x='Month', y='Average High Curve', source=source,
                name='Average High', width=4,
                color=colors[scheme]['Average High'])
    # Monthly average
    ma = p.line(x='Month', y='Monthly Average Curve', source=source,
                name='Monthly Average', width=3,
                color=colors[scheme]['Monthly Average'])
    # Average lows
    al = p.line(x='Month', y='Average Low Curve', source=source,
                name='Average Low', width=4,
                color=colors[scheme]['Average Low'])
    # Record lows
    rl = p.scatter(x='Month', y='Record Low', source=source,
                   name='Record Low', size=7,
                   color=colors[scheme]['Record Low'],
                   hover_fill_color='white', hover_alpha=0.5)
    
    # Tools
    crosshair = bm.CrosshairTool(dimensions='height',
                              line_color='grey', line_alpha=0.5)
    hover = bm.HoverTool(mode='vline', renderers=[ma],
                      formatters={'@xdates': 'datetime'})
    units = data.attrs[f"{var} units"]
    if var=='Water Level':
        hover.tooltips = """
            <b> @Month </b> <br>
            Record High: @{{Record High}}{{0.00}} {u}<br>
            Average High: @{{Average High Curve}}{{0.00}} {u}<br>
            Monthly Average: @{{Monthly Average Curve}}{{0.00}} {u}<br>
            Average Low: @{{Average Low Curve}}{{0.00}} {u}<br>
            Record Low: @{{Record Low}}{{0.00}} {u}<br>
            {y} High Record: @{{High Records}}{{0.00}} {u}<br>
            {y} Low Record: @{{Low Records}}{{0.00}} {u}
            """.format(u=units, y=thisYear)
    else:
        hover.tooltips = """
            <b> @Month </b> <br>
            Record High: @{{Record High}}{{0.0}} {u}<br>
            Average High: @{{Average High Curve}}{{0.0}} {u}<br>
            Monthly Average: @{{Monthly Average Curve}}{{0.0}} {u}<br>
            Average Low: @{{Average Low Curve}}{{0.0}} {u}<br>
            Record Low: @{{Record Low}}{{0.0}} {u}<br>
            {y} High Record: @{{High Records}}{{0.0}} {u}<br>
            {y} Low Record: @{{Low Records}}{{0.0}} {u}
            """.format(u=units, y=thisYear)
    p.add_tools(hover, crosshair)
    p.toolbar.autohide = True

    # x-axis
    p.xgrid.grid_line_color = None
    p.xaxis.axis_line_color = 'grey'
    p.xaxis.major_tick_line_color = 'grey'
    
    # y-axis
    p.yaxis.axis_label=f'{var} ({data.attrs[f"{var} units"]})'
    p.yaxis.axis_label_text_color = colors[scheme]['Plot Light Color']
    p.ygrid.grid_line_color = 'grey'
    p.yaxis.axis_line_color = None
    p.yaxis.major_tick_line_color = None
    p.yaxis.minor_tick_line_color = None
    
    # Fonts
    p.title.text_font = 'arial narrow'
    p.title.text_font_size = '16px'
    p.title.text_color = 'darkgray'
    p.xaxis.major_label_text_font = 'arial narrow'
    p.xaxis.major_label_text_color = colors[scheme]['Plot Light Color']
    p.xaxis.major_label_text_font_size = "14px"
    p.yaxis.major_label_text_font = 'arial narrow'
    p.yaxis.axis_label_text_font = 'arial narrow'
    p.yaxis.axis_label_text_font_style = 'normal'
    p.yaxis.major_label_text_color = colors[scheme]['Plot Light Color']    
    p.yaxis.major_label_text_font_size = "14px"
    p.yaxis.axis_label_text_font_size = "14px"

    # Legend
    legend = bm.Legend(items=[
        ('{} Record'.format(thisYear), [hr, lr]),
        ('Record High', [rh]),
        ('Average High', [ah]),
        ('Monthly Average', [ma]),
        ('Average Low', [al]),
        ('Record Low', [rl])],
                    background_fill_color='#404040', border_line_color=None,
                    label_text_color=colors[scheme]['Plot Light Color'],
                    location='center_right', click_policy='mute')
    p.add_layout(legend, 'right')
    
    # Show the results
    show(p)

```

# {.sidebar}

```{python}

display(Markdown(f"**{dt.today().strftime('%A, %B %d, %Y')}**<br>"))

```

::: {.card}
![](../../../images/vkfl.JPG){scale="75%"}
:::

<br>
[**Virginia Key**](https://en.wikipedia.org/wiki/Virginia_Key){target="_blank"} is a small barrier island in southeast Florida with a **tropical monsoon climate** characterized by hot, humid summers and warm, dry winters. It is located east of Miami, south of Miami Beach, and north of Key Biscayne in Biscayne Bay. The [NOAA](https://www.noaa.gov){target="_blank"} [weather station](https://tidesandcurrents.noaa.gov/stationhome.html?id=8723214){target="_blank"} has been installed on a pier at the [University of Miami](https://welcome.miami.edu){target="_blank"} [Rosenstiel School of Marine, Atmospheric, and Earth Science](https://earth.miami.edu){target="_blank"} since February 1994.

<iframe src="https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d42461.70157812699!2d-80.17255246551831!3d25.73753395804339!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sus!4v1704939462365!5m2!1sen!2sus" align="right" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>


# Plots

## Dashboard {.tabset}

```{python}
#| output: asis
#| title: Daily Stats
output_notebook(hide_banner=True)
display(Markdown('::: {.panel-tabset}'))

for var in daily_stats.variable.values:
    display(Markdown(f'\n## {var}\n\n'))
    daily_climo(data=daily_stats, var=var, flood_thresholds=floods,
    scheme='cb')
    display(Markdown(' '))

display(Markdown(':::'))

```

```{python}
#| output: asis
#| title: Monthly Stats

display(Markdown('::: {.panel-tabset}'))

for var in daily_stats.variable.values:
    display(Markdown(f'\n## {var}\n\n'))
    monthly_climo(data=monthly_stats, var=var, scheme='cb')
    display(Markdown(' '))

display(Markdown(':::'))

```

# Data

## Row {.tabset}

```{python}
#| output: asis
#| title: Daily Stats

display(Markdown('::: {.panel-tabset}'))

for var in daily_stats.variable.values:
    display(Markdown(f'\n### {var}\n\n'))
    colortable(daily_stats, var)
    display(Markdown(' '))

display(Markdown(':::'))

```

```{python}
#| output: asis
#| title: Monthly Stats

display(Markdown('::: {.panel-tabset}'))

for var in monthly_stats.variable.values:
    display(Markdown(f'\n### {var}\n\n'))
    colortable(monthly_stats, var)
    display(Markdown(' '))

display(Markdown(':::'))

```
