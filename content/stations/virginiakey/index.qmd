
---
title: "Virginia Key, FL"
image: ../../../images/vkfl.JPG
format:
  dashboard:
    logo: ../../../images/vkfl.JPG
    # orientation: columns
    scrolling: false
---

<!-- Known issue displaying plotly plots in Chrome, Brave:
https://github.com/quarto-dev/quarto-cli/issues/8612
-->

```{python}
#| include: False

from IPython.display import Markdown
from scipy.optimize import curve_fit
from datetime import datetime as dt
import plotly.graph_objects as go
import pandas as pd
import xarray as xr
import numpy as np
import os
import bokeh.models as bm
from bokeh.plotting import figure, show, output_file
from bokeh.io import output_notebook
output_notebook(hide_banner=True)

dirName = 'virginiaKeyFl'

# Flood thresholds for Virginia  Key, FL
# https://water.noaa.gov/gauges/vakf1
floods = {'Major Flood Threshold': 2.5,
          'Moderate Flood Threshold': 1.7,
          'Minor Flood Threshold': 1.3}

today = dt.today().strftime('%d-%b')
daily_stats = xr.load_dataset(f'../../../{dirName}/statistics-daily.nc')
monthly_stats = xr.load_dataset(f'../../../{dirName}/statistics-monthly.nc')

colsdict = {
    'RecordHigh': '#d26c6c',
    'AvgHigh': '#dc8d8d',
    'LowestHigh': '#e6aeae',
    'RecordHighAvg': '#ff8080',
    'DailyAvg': '#F5F5F5',
    'RecordLowAvg': '#c1d5f8',
    'HighestLow': '#d1dffa',
    'AvgLow': '#a2bff4',
    'RecordLow': '#74a0ef'
}

# colsdict = {
#     'RecordHigh': '#b31529',
#     'AvgHigh': '#d75f4c',
#     'LowestHigh': '#f6a482',
#     'RecordHighAvg': '#fedbc7',
#     'DailyAvg': '#f9f9f9',
#     'RecordLowAvg': '#d1e5f0',
#     'HighestLow': '#8ec4de',
#     'AvgLow': '#3a93c3',    
#     'RecordLow': '#1065ab'
# }

deg = u'\N{DEGREE SIGN}'

def getval(var, record, type):
    """Retrieve 'var' 'record' from stats table"""
    if type.lower() == 'daily':
        val = daily_stats[record].sel(variable=var, Date=today).values
    elif type.lower() == 'monthly':
        val = monthly_stats[record].sel(variable=var, Date=today).values
    else:
        raise ValueError("'type' must be either 'daily' or 'monthly'")
    return str(val)+f' {deg}F'

def colortable(stats):
    """Create a colored table"""
    # Colors:
    # https://www.tutorialrepublic.com/css-reference/css-color-names.php
    fig = go.Figure(data=[go.Table(
        header=dict( #values=list(stats.reset_index().columns),
                    values=[f'<b>{i}</b>' for i in stats.reset_index().columns],
                    fill_color='grey',
                    font_color='white',
                    font_size=12,
                    align='left'),
        cells=dict(values=stats.reset_index().T,
                fill_color=['white', colsdict['DailyAvg'],
                            colsdict['RecordHighAvg'],
                            colsdict['RecordHighAvg'],
                            colsdict['RecordLowAvg'],
                            colsdict['RecordLowAvg'],
                            colsdict['AvgHigh'],
                            colsdict['LowestHigh'],
                            colsdict['LowestHigh'],
                            colsdict['RecordHigh'],
                            colsdict['RecordHigh'],
                            colsdict['AvgLow'],
                            colsdict['HighestLow'],
                            colsdict['HighestLow'],
                            colsdict['RecordLow'],
                            colsdict['RecordLow'], 'white'],
                font_size=12,
                align='center')
        )
    ])
    fig.show()

def cos_fit(data, plot=False):
    """Fit cosine curve to data"""
    X = np.arange(0, len(data))/len(data)

    # Initial parameter values
    guess_freq = 1
    guess_amplitude = 3*np.std(data)/(2**0.5)
    guess_phase = 0
    guess_offset = np.mean(data)
    p0 = [guess_freq, guess_amplitude,
          guess_phase, guess_offset]

    # Function to fit
    def my_cos(x, freq, amplitude, phase, offset):
        return np.cos(x * freq + phase) * amplitude + offset

    # Fit curve to data
    fit = curve_fit(my_cos, X, data, p0=p0)

    if plot:
        fig, ax = plt.subplots(1, 1, figsize=(12,5))

        ax.plot(data, label=data.name)
        ax.plot(fit, color='red', label=f'Cosine fit')

        ax.legend(loc='best')
        plt.show()
    else:
        return my_cos(np.array(X), *fit[0])

def round_down(num, divisor):
    """Round num down to the nearest divisor.
    For example, round_down(45.5, 10) will return 40.
    """
    return num - (num%divisor)

def round_up(num, divisor):
    """Round num up to the nearest divisor.
    For example, round_up(45.5, 10) will return 50.
    """
    return num + (divisor - (num%divisor))

def daily_climo(data, var, flood_thresholds, scheme='mg'):
    """Create a daily climatology plot for environmental variable 'var'
    from 'data' using color scheme 'scheme'.
    
    Inputs:
        data: xarray containing climatological stats
        var: str, one of the available environmental variables in 'data'
        flood_threshold: dict containing flood thresholds to add to water
            level plot
        scheme: str specifying which color scheme to use. Options: 'mg'
            for M. Grossi's, 'bm' for B. McNoldy's, or 'cb' to use a
            colorblind scheme
    """

    # Dates for x axis
    df = data.sel(variable=var).to_dataframe().drop('variable', axis=1)
    df['xdates'] = pd.date_range(start='2020-01-01',end='2020-12-31', freq='1D')
    df['Average High Curve'] = cos_fit(df['Average High']).round(1)
    df['Daily Average Curve'] = cos_fit(df['Daily Average']).round(1)
    df['Average Low Curve'] = cos_fit(df['Average Low']).round(1)
    
    # Color dictionary
    colors = dict(
        mg=dict({
            'Record High Year': 'white',
            'Record High': '#d26c6c',
            'Average High': '#dc8d8d',
            'Daily Average': '#F5F5F5',
            'Average Low': '#a2bff4',
            'Record Low': '#74a0ef',
            'Record Low Year': 'white',
            'Plot Light Color': '#D3D3D3'}),
        bm=dict({
            'Record High Year': 'white',
            'Record High': 'orange',
            'Average High': 'orangered',
            'Daily Average': 'gainsboro',
            'Average Low': 'mediumpurple',
            'Record Low': 'lightblue',
            'Record Low Year': 'white',
            'Plot Light Color': 'white'}),
        cb=dict({
            'Record High Year': 'white',
            'Record High': '#d26c6c',
            'Average High': '#dc8d8d',
            'Daily Average': '#F5F5F5',
            'Average Low': '#a2bff4',
            'Record Low': '#74a0ef',
            'Record Low Year': 'white',
            'Plot Light Color': 'white'})
        )

    # Record this year
    thisYear = pd.to_datetime('today').year
    thisYearRecords = (df==thisYear)[['Record High Year', 'Record Low Year']].sum().sum()
    lastYearRecords = (df==thisYear-1)[['Record High Year', 'Record Low Year']].sum().sum()
    df['High Records'] = df['Record High'].where(df['Record High Year'] == thisYear)
    df['Low Records'] = df['Record Low'].where(df['Record Low Year'] == thisYear)
    source = bm.ColumnDataSource(df)
    
    # Create a new plot
    ts_start = dt.strptime(data.attrs[f'{var} data range'][0], '%Y-%m-%d').strftime('%-m/%-d/%Y')
    ts_end = dt.strptime(data.attrs[f'{var} data range'][1], '%Y-%m-%d').strftime('%-m/%-d/%Y')
    p = figure(title='Daily {} records  |  {} - {}\n'.format(var.lower(), ts_start, ts_end).upper()+
                     'As of today, {} {} record highs/lows have been set. '.format(thisYearRecords, var.lower())+
                     'Last year, {} records were set.'.format(lastYearRecords),
               background_fill_color='#404040', border_fill_color='#404040',
               width=1000, height=600, x_axis_type='datetime',
               y_range=(round_down(df['Record Low'].min(), 10), round_up(df['Record High'].max(), 10)),
               tools='pan, wheel_zoom, box_zoom, undo, reset, fullscreen',
               outline_line_color=None, sizing_mode='scale_height')

    # This year record highs
    hr = p.scatter(x='xdates', y='High Records', source=source,
                   name=f'{thisYear} High Record', size=6, color='white')
    # This year record lows
    lr = p.scatter(x='xdates', y='Low Records', source=source,
                   name=f'{thisYear} Low Record', size=6, color='white')
    # Record highs
    rh = p.scatter(x='xdates', y='Record High', source=source,
                   name='Record High', size=2,
                   color=colors[scheme]['Record High'])
    # Average high
    ah = p.line(x='xdates', y='Average High Curve', source=source,
                name='Average High', width=3,
                color=colors[scheme]['Average High'])
    # Daily average
    da = p.line(x='xdates', y='Daily Average Curve', source=source,
                name='Daily Average', width=2,
                color=colors[scheme]['Daily Average'])
    # Average lows
    al = p.line(x='xdates', y='Average Low Curve', source=source,
                name='Average Low', width=3,
                color=colors[scheme]['Average Low'])
    # Record lows
    rl = p.scatter(x='xdates', y='Record Low', source=source,
                   name='Record Low', size=2,
                   color=colors[scheme]['Record Low'],
                   hover_fill_color='white', hover_alpha=0.5)

    # Flood thresholds (water level plot only)
    if var=='Water Level':
        for level, threshold in flood_thresholds.items():
            hline = Span(location=threshold, dimension='width',
                         line_dash=[20,8], line_alpha=0.75,
                         line_color='cadetblue', line_width=2)
            p.renderers.extend([hline])
            mytext = bm.Label(x=pd.to_datetime('2019-12-15'), y=threshold+0.1,
                              text=level.upper(), text_color='cadetblue',
                              text_font_size='8pt',
                              text_font='arial narrow')
            p.add_layout(mytext)
    
    # Tools
    crosshair = bm.CrosshairTool(dimensions='height',
                              line_color='grey', line_alpha=0.5)
    hover = bm.HoverTool(mode='vline', renderers=[da],
                      formatters={'@xdates': 'datetime'})
    hover.tooltips = """
        <b> @xdates{{%b %d}} </b> <br>
        Record High: @{{Record High}}{{0.0}} <br>
        Average High: @{{Average High Curve}}{{0.0}} <br>
        Daily Average: @{{Daily Average Curve}}{{0.0}} <br>
        Average Low: @{{Average Low Curve}}{{0.0}} <br>
        Record Low: @{{Record Low}}{{0.0}} <br>
        {} High Record: @{{High Records}}{{0.0}} <br>
        {} Low Record: @{{Low Records}}{{0.0}}
        """.format(thisYear, thisYear)
    p.add_tools(hover, crosshair)
    p.toolbar.autohide = True

    # x-axis
    p.xaxis[0].formatter = bm.DatetimeTickFormatter(months="%b %d")
    p.xaxis[0].ticker.desired_num_ticks = 12
    p.xgrid.grid_line_color = None
    p.xaxis.axis_line_color = 'grey'
    p.xaxis.major_tick_line_color = 'grey'
    
    # y-axis
    p.yaxis.axis_label=f'{var} ({data.attrs[f"{var} units"]})'
    p.yaxis.axis_label_text_color = colors[scheme]['Plot Light Color']
    p.ygrid.grid_line_color = 'grey'
    p.yaxis.axis_line_color = None
    p.yaxis.major_tick_line_color = None
    p.yaxis.minor_tick_line_color = None
    
    # Fonts
    p.title.text_font = 'arial narrow'
    p.title.text_font_size = '16pt'
    p.title.text_color = colors[scheme]['Plot Light Color']
    p.xaxis.major_label_text_font = 'arial narrow'
    p.xaxis.major_label_text_color = colors[scheme]['Plot Light Color']
    p.xaxis.major_label_text_font_size = "12pt"
    p.yaxis.major_label_text_font = 'arial narrow'
    p.yaxis.axis_label_text_font = 'arial narrow'
    p.yaxis.axis_label_text_font_style = 'normal'
    p.yaxis.major_label_text_color = colors[scheme]['Plot Light Color']    
    p.yaxis.major_label_text_font_size = "12pt"
    p.yaxis.axis_label_text_font_size = "12pt"

    # Legend
    legend = bm.Legend(items=[
        ('{} Record'.format(thisYear), [hr, lr]),
        ('Record High', [rh]),
        ('Average High', [ah]),
        ('Daily Average', [da]),
        ('Average Low', [al]),
        ('Record Low', [rl])],
                    background_fill_color='#404040', border_line_color=None,
                    label_text_color=colors[scheme]['Plot Light Color'],
                    location='center_right', click_policy='mute')
    p.add_layout(legend, 'right')
    
    # Show the results
    show(p)

def monthly_climo(data, var, scheme='mg'):
    """Create a monthly climatology plot for environmental variable 'var'
    from 'data' using color scheme 'scheme'.
    
    Inputs:
        data: xarray containing climatological stats
        var: str, one of the available environmental variables in 'data'
        scheme: str specifying which color scheme to use. Options: 'mg'
            for M. Grossi's, 'bm' for B. McNoldy's, or 'cb' to use a
            colorblind scheme
    """

    # Dates for x axis
    df = data.sel(variable=var).to_dataframe().drop('variable', axis=1).reset_index()
    df['Average High Curve'] = cos_fit(df['Average High']).round(1)
    df['Monthly Average Curve'] = cos_fit(df['Monthly Average']).round(1)
    df['Average Low Curve'] = cos_fit(df['Average Low']).round(1)
    
    # Color dictionary
    colors = dict(
        mg=dict({
            'Record High Year': 'white',
            'Record High': '#d26c6c',
            'Average High': '#dc8d8d',
            'Monthly Average': '#F5F5F5',
            'Average Low': '#a2bff4',
            'Record Low': '#74a0ef',
            'Record Low Year': 'white',
            'Plot Light Color': '#D3D3D3'}),
        bm=dict({
            'Record High Year': 'white',
            'Record High': 'orange',
            'Average High': 'orangered',
            'Monthly Average': 'gainsboro',
            'Average Low': 'mediumpurple',
            'Record Low': 'lightblue',
            'Record Low Year': 'white',
            'Plot Light Color': 'white'}),
        cb=dict({
            'Record High Year': 'white',
            'Record High': '#d26c6c',
            'Average High': '#dc8d8d',
            'Monthly Average': '#F5F5F5',
            'Average Low': '#a2bff4',
            'Record Low': '#74a0ef',
            'Record Low Year': 'white',
            'Plot Light Color': 'white'})
        )

    # Record this year
    thisYear = pd.to_datetime('today').year
    thisYearRecords = (df==thisYear)[['Record High Year', 'Record Low Year']].sum().sum()
    lastYearRecords = (df==thisYear-1)[['Record High Year', 'Record Low Year']].sum().sum()
    df['High Records'] = df['Record High'].where(df['Record High Year'] == thisYear)
    df['Low Records'] = df['Record Low'].where(df['Record Low Year'] == thisYear)
    source = bm.ColumnDataSource(df)
    
    # Create a new plot
    ts_start = dt.strptime(data.attrs[f'{var} data range'][0], '%Y-%m-%d').strftime('%-m/%-d/%Y')
    ts_end = dt.strptime(data.attrs[f'{var} data range'][1], '%Y-%m-%d').strftime('%-m/%-d/%Y')
    p = figure(title='Monthly {} records  |  {} - {}\n'.format(var.lower(), ts_start, ts_end).upper()+
                     'As of today, {} {} record highs/lows have been set. '.format(thisYearRecords, var.lower())+
                     'Last year, {} records were set.'.format(lastYearRecords),
               background_fill_color='#404040', border_fill_color='#404040',
               width=1000, height=600,
               x_range=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
               y_range=(round_down(df['Record Low'].min(), 10), round_up(df['Record High'].max(), 10)),
               tools='pan, wheel_zoom, box_zoom, undo, reset, fullscreen',
               outline_line_color=None, sizing_mode='scale_height')

    # This year record highs
    hr = p.scatter(x='Month', y='High Records', source=source,
                   name=f'{thisYear} High Record', size=6, color='white')
    # This year record lows
    lr = p.scatter(x='Month', y='Low Records', source=source,
                   name=f'{thisYear} Low Record', size=6, color='white')
    # Record highs
    rh = p.scatter(x='Month', y='Record High', source=source,
                   name='Record High', size=7,
                   color=colors[scheme]['Record High'])
    # Average high
    ah = p.line(x='Month', y='Average High Curve', source=source,
                name='Average High', width=4,
                color=colors[scheme]['Average High'])
    # Monthly average
    ma = p.line(x='Month', y='Monthly Average Curve', source=source,
                name='Monthly Average', width=3,
                color=colors[scheme]['Monthly Average'])
    # Average lows
    al = p.line(x='Month', y='Average Low Curve', source=source,
                name='Average Low', width=4,
                color=colors[scheme]['Average Low'])
    # Record lows
    rl = p.scatter(x='Month', y='Record Low', source=source,
                   name='Record Low', size=7,
                   color=colors[scheme]['Record Low'],
                   hover_fill_color='white', hover_alpha=0.5)
    
    # Tools
    crosshair = bm.CrosshairTool(dimensions='height',
                              line_color='grey', line_alpha=0.5)
    hover = bm.HoverTool(mode='vline', renderers=[ma],
                      formatters={'@xdates': 'datetime'})
    hover.tooltips = """
        <b> @Month </b> <br>
        Record High: @{{Record High}}{{0.0}} <br>
        Average High: @{{Average High Curve}}{{0.0}} <br>
        Daily Average: @{{Daily Average Curve}}{{0.0}} <br>
        Average Low: @{{Average Low Curve}}{{0.0}} <br>
        Record Low: @{{Record Low}}{{0.0}} <br>
        {} High Record: @{{High Records}}{{0.0}} <br>
        {} Low Record: @{{Low Records}}{{0.0}}
        """.format(thisYear, thisYear)
    p.add_tools(hover, crosshair)
    p.toolbar.autohide = True

    # x-axis
    p.xgrid.grid_line_color = None
    p.xaxis.axis_line_color = 'grey'
    p.xaxis.major_tick_line_color = 'grey'
    
    # y-axis
    p.yaxis.axis_label=f'{var} ({data.attrs[f"{var} units"]})'
    p.yaxis.axis_label_text_color = colors[scheme]['Plot Light Color']
    p.ygrid.grid_line_color = 'grey'
    p.yaxis.axis_line_color = None
    p.yaxis.major_tick_line_color = None
    p.yaxis.minor_tick_line_color = None
    
    # Fonts
    p.title.text_font = 'arial narrow'
    p.title.text_font_size = '16pt'
    p.title.text_color = colors[scheme]['Plot Light Color']
    p.xaxis.major_label_text_font = 'arial narrow'
    p.xaxis.major_label_text_color = colors[scheme]['Plot Light Color']
    p.xaxis.major_label_text_font_size = "12pt"
    p.yaxis.major_label_text_font = 'arial narrow'
    p.yaxis.axis_label_text_font = 'arial narrow'
    p.yaxis.axis_label_text_font_style = 'normal'
    p.yaxis.major_label_text_color = colors[scheme]['Plot Light Color']    
    p.yaxis.major_label_text_font_size = "12pt"
    p.yaxis.axis_label_text_font_size = "12pt"

    # Legend
    legend = bm.Legend(items=[
        ('{} Record'.format(thisYear), [hr, lr]),
        ('Record High', [rh]),
        ('Average High', [ah]),
        ('Monthly Average', [ma]),
        ('Average Low', [al]),
        ('Record Low', [rl])],
                    background_fill_color='#404040', border_line_color=None,
                    label_text_color=colors[scheme]['Plot Light Color'],
                    location='center_right', click_policy='mute')
    p.add_layout(legend, 'right')
    
    # Show the results
    show(p)

def display_table(stats, var):
    """Display the table if the variable 'var' exists in 'stats'. Otherwise, display a message that the data do not exist.
    """
    freq = 'Monthly' if 'Month' in stats.sizes.keys() else 'Daily'
    try:
        stats = stats.sel(variable=var.title()).to_dataframe().drop('variable', axis=1)
        colortable(stats)
    except KeyError:
        print(f'{freq} {var.lower()} data are not available for this station.')

```


# About

## Row

### Column {width=30%}

[Virginia Key](https://en.wikipedia.org/wiki/Virginia_Key){target="_blank"} is a small barrier island in southeast Florida with a **tropical monsoon climate** characterized by hot, humid summers and warm, dry winters. It is located east of Miami, south of Miami Beach, and north of Key Biscayne in Biscayne Bay. The [NOAA](https://www.noaa.gov){target="_blank"} [weather station](https://tidesandcurrents.noaa.gov/stationhome.html?id=8723214){target="_blank"} has been installed on a pier at the [University of Miami](https://welcome.miami.edu){target="_blank"} [Rosenstiel School of Marine, Atmospheric, and Earth Science](https://earth.miami.edu){target="_blank"} since February 1994.

:::{.card}
<iframe src="https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d42461.70157812699!2d-80.17255246551831!3d25.73753395804339!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sus!4v1704939462365!5m2!1sen!2sus" align="right" style="border:0; padding-left: 20px; padding-top: 20px;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
:::

### Column {width=70%}

:::{.card}
![](../../../images/vkfl.JPG){scale="75%"}
:::




# Plots

## Row {height=80%}

### Column {width=20%}

#### Row

```{python}
#| content: valuebox
#| title: "Today's Record High"
var = 'Air Temperature'
dict(
  icon = "thermometer-sun",
  color = colsdict['RecordHigh'],
  value = getval(var, 'Record High', 'daily')
)
```

#### Row

```{python}
#| content: valuebox
#| title: "Today's Average High"
dict(
  icon = "thermometer-high",
  color = colsdict['AvgHigh'],
  value = getval(var, 'Average High', 'daily')
)
```

#### Row

```{python}
#| content: valuebox
#| title: "Today's Lowest High"
dict(
  icon = "thermometer-half",
  color = colsdict['LowestHigh'],
  value = getval(var, 'Lowest High', 'daily')
)
```

#### Row

```{python}
#| content: valuebox
#| title: "Today's Highest Low"
dict(
  icon = "thermometer-half",
  color = colsdict['HighestLow'],
  value = getval(var, 'Highest Low', 'daily')
)
```

#### Row

```{python}
#| content: valuebox
#| title: "Today's Average Low"
dict(
  icon = "thermometer-low",
  color = colsdict['AvgLow'],
  value = getval(var, 'Average Low', 'daily')
)
```

#### Row

```{python}
#| content: valuebox
#| title: "Today's Record Low"
dict(
  icon = "thermometer-snow",
  color = colsdict['RecordLow'],
  value = getval(var, 'Record Low', 'daily')
)
```

### Column {.tabset}

```{python}
#| output: asis
#| title: Daily Stats
output_notebook(hide_banner=True)
display(Markdown('::: {.panel-tabset}'))

for var in daily_stats.variable.values:
    display(Markdown(f'\n## {var}\n\n'))
    daily_climo(data=daily_stats, var=var, flood_thresholds=floods,
    scheme='cb')
    display(Markdown(' '))

display(Markdown(':::'))

```

```{python}
#| output: asis
#| title: Monthly Stats

display(Markdown('::: {.panel-tabset}'))

for var in daily_stats.variable.values:
    display(Markdown(f'\n## {var}\n\n'))
    monthly_climo(data=monthly_stats, var=var, scheme='cb')
    display(Markdown(' '))

display(Markdown(':::'))

```










# Data

## Row {.tabset}

```{python}
#| output: asis
#| title: Daily Stats

display(Markdown('::: {..column-screen}'))
display(Markdown('::: {.panel-tabset}'))

for var in daily_stats.variable.values:
    display(Markdown(f'\n## {var}\n\n'))
    display_table(daily_stats, var)
    display(Markdown(' '))

display(Markdown(':::'))
display(Markdown(':::'))

```

```{python}
#| output: asis
#| title: Monthly Stats

display(Markdown('::: {.panel-tabset}'))

for var in daily_stats.variable.values:
    display(Markdown(f'\n## {var}\n\n'))
    display_table(monthly_stats, var)
    display(Markdown(' '))

display(Markdown(':::'))

```